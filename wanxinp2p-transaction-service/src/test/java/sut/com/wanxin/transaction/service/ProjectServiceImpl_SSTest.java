/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.transaction.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.wanxin.api.consumer.model.BalanceDetailsDTO;
import com.wanxin.api.consumer.model.ConsumerDTO;
import com.wanxin.api.depository.model.LoanRequest;
import com.wanxin.api.transaction.model.ProjectDTO;
import com.wanxin.api.transaction.model.ProjectInvestDTO;
import com.wanxin.api.transaction.model.ProjectQueryDTO;
import com.wanxin.api.transaction.model.TenderDTO;
import com.wanxin.api.transaction.model.TenderOverviewDTO;
import com.wanxin.common.domain.PageVO;
import com.wanxin.common.domain.RestResponse;
import com.wanxin.transaction.agent.ConsumerApiAgent;
import com.wanxin.transaction.agent.ContentSearchApiAgent;
import com.wanxin.transaction.agent.DepositoryAgentApiAgent;
import com.wanxin.transaction.entity.Project;
import com.wanxin.transaction.entity.Tender;
import com.wanxin.transaction.mapper.ProjectMapper;
import com.wanxin.transaction.mapper.TenderMapper;
import com.wanxin.transaction.service.ConfigService;
import com.wanxin.transaction.service.ProjectServiceImpl;
import groovy.lang.NonEmptySequence;
import groovy.lang.Sequence;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ProjectServiceImpl_SSTest extends ProjectServiceImpl_SSTest_scaffolding {
// allCoveredLines:[45, 64, 65, 71, 72, 73, 74, 75, 76, 138, 150, 152, 154, 155, 158, 160, 162, 163, 164, 166, 168, 169, 170, 172, 175, 184, 186, 188, 189, 190, 193, 197, 198, 199, 200, 201, 202, 204, 210, 212, 213, 214, 218, 220, 221, 222, 225, 226, 227, 231, 232, 236, 237, 238, 239, 244, 246, 248, 249, 251, 253, 255, 257, 259, 261, 263, 264, 266, 268, 270, 274, 276, 278, 280, 282, 284, 286, 288, 291, 293, 294, 296, 297, 303, 305, 306, 309, 310, 312, 315, 316, 320, 325, 329, 330, 331, 336, 337, 338, 339, 340, 341, 342, 343, 345, 351, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 371, 373, 374, 375, 376, 378, 383, 385, 386, 389, 395, 396, 399, 400, 402, 403, 404, 405, 406, 410, 412, 413, 416, 417, 421, 425, 426, 427, 429, 430, 433, 438, 440, 442, 443, 447, 448, 450, 451, 455, 456, 458, 459, 463, 464, 468, 469, 474, 477, 480, 481, 485, 486, 488, 489, 490, 491, 492, 493, 494, 500, 503, 505, 507, 509, 511, 513, 515, 517, 519, 520, 521, 523, 525, 527, 529, 531, 532, 534, 535, 536, 542, 543, 544, 548, 549, 550, 552, 556, 559, 560, 561, 565, 568, 569, 570]

  @Test(timeout = 9000)
  public void test_convertTenderEntityListToDTOList_00()  throws Throwable  {
      //caseID:7d9a344425ac85296ac0ab7804031019
      //CoveredLines: [45, 193, 197, 198, 199, 200, 201, 202, 204]
      //Input_0_List<com.wanxin.transaction.entity.Tender>: sequence0
      //Assert: assertNotNull(method_result);
      //Assert: assertFalse(method_result.isEmpty());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Sequence sequence0 = new Sequence();
      //mock tender0
      Tender tender0 = mock(Tender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      sequence0.add(tender0);
      
      //Call method: convertTenderEntityListToDTOList
      List<TenderDTO> list0 = (List<TenderDTO>)PrivateAccess.callMethod((Class<ProjectServiceImpl>) ProjectServiceImpl.class, projectServiceImpl0, "convertTenderEntityListToDTOList", (Object) sequence0, (Class<?>) List.class);
      
      //Test Result Assert
      assertNotNull(list0);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 9000)
  public void test_createProject_01()  throws Throwable  {
      //caseID:332cc68d8ea2c099a7e8034e57592a10
      //CoveredLines: [45, 500, 503, 505, 507, 509, 511, 513, 515, 517, 519, 520, 521, 523, 525, 527, 529, 531, 532, 534, 535, 536, 556, 559, 560, 561]
      //Input_0_ProjectDTO: {getAnnualRate=BigDecimal.ONE, getUserNo=\"6+wC\", getName=\"bskr|OYGw^e}I08p\", getIsAssignment=JLayeredPane.DEFAULT_LAYER, getCommissionAnnualRate=BigDecimal.ONE, getId=0L, getStatus=JLayeredPane.DEFAULT_LAYER, getDescription=\"success\", getPeriod=JLayeredPane.DEFAULT_LAYER, getProjectStatus=\"\\u6807\\u7684\\u53F7\\u524D\\u7F00\", getRequestNo=\"o8\", getModifyDate=date0, getProjectNo=\"/;q7G93}~ZK#zbSt4el\", getCreateDate=date1, getType=\"\\u52DF\\u96C6\\u4E2D\", getRepaymentWay=\"CODE_PROJECT_PREFIX\", getBorrowerAnnualRate=BigDecimal.ONE, getAmount=BigDecimal.ONE, getConsumerId=0L}
      //Assert: assertEquals(0, (int)method_result.getStatus());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Long long0 = new Long(0L);
      //mock consumerDTO0
      ConsumerDTO consumerDTO0 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("'session' scope").when(consumerDTO0).getUserNo();
      //mock consumerDTO1
      ConsumerDTO consumerDTO1 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(". Root cause: ").when(consumerDTO1).getFullname();
      doReturn(long0).when(consumerDTO1).getId();
      doReturn("/;q7G93}~ZK#zbSt4el").when(consumerDTO1).getIdNumber();
      //mock consumerDTO2
      ConsumerDTO consumerDTO2 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(consumerDTO2).getId();
      //mock consumerDTO3
      ConsumerDTO consumerDTO3 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumerDTO4
      ConsumerDTO consumerDTO4 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock restResponse0
      RestResponse<ConsumerDTO> restResponse0 = (RestResponse<ConsumerDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumerDTO0, consumerDTO2, consumerDTO1, consumerDTO4, consumerDTO3).when(restResponse0).getResult();
      //mock consumerApiAgent0
      ConsumerApiAgent consumerApiAgent0 = mock(ConsumerApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(consumerApiAgent0).getCurrentLoginConsumer();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(projectMapper0).selectCount(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(configService0).getAnnualRate();
      doReturn(bigDecimal0).when(configService0).getBorrowerAnnualRate();
      doReturn(bigDecimal0).when(configService0).getCommissionAnnualRate();
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "configService", (Object) configService0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "consumerApiAgent", (Object) consumerApiAgent0);
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("ylr").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("4").when(date1).toString();
      //mock projectDTO0
      ProjectDTO projectDTO0 = mock(ProjectDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(projectDTO0).getAmount();
      doReturn(bigDecimal0).when(projectDTO0).getAnnualRate();
      doReturn(bigDecimal0).when(projectDTO0).getBorrowerAnnualRate();
      doReturn(bigDecimal0).when(projectDTO0).getCommissionAnnualRate();
      doReturn(long0).when(projectDTO0).getConsumerId();
      doReturn(date1).when(projectDTO0).getCreateDate();
      doReturn("success").when(projectDTO0).getDescription();
      doReturn(long0).when(projectDTO0).getId();
      doReturn(integer0).when(projectDTO0).getIsAssignment();
      doReturn(date0).when(projectDTO0).getModifyDate();
      doReturn("bskr|OYGw^e}I08p").when(projectDTO0).getName();
      doReturn(integer0).when(projectDTO0).getPeriod();
      doReturn("/;q7G93}~ZK#zbSt4el").when(projectDTO0).getProjectNo();
      doReturn("\u6807\u7684\u53F7\u524D\u7F00").when(projectDTO0).getProjectStatus();
      doReturn("CODE_PROJECT_PREFIX").when(projectDTO0).getRepaymentWay();
      doReturn("o8").when(projectDTO0).getRequestNo();
      doReturn(integer0).when(projectDTO0).getStatus();
      doReturn("\u52DF\u96C6\u4E2D").when(projectDTO0).getType();
      doReturn("6+wC").when(projectDTO0).getUserNo();
      
      //Call method: createProject
      ProjectDTO projectDTO1 = projectServiceImpl0.createProject(projectDTO0);
      
      //Test Result Assert
      assertEquals(0, (int)projectDTO1.getStatus());
  }

  @Test(timeout = 9000)
  public void test_createTender_02()  throws Throwable  {
      //caseID:1318318dc69809aaeb8863083bdade4b
      //CoveredLines: [45, 210, 212, 213, 214]
      //Input_0_ProjectInvestDTO: {getAmount=\"0\"}
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(configService0).getMiniInvestmentAmount();
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "configService", (Object) configService0);
      //mock projectInvestDTO0
      ProjectInvestDTO projectInvestDTO0 = mock(ProjectInvestDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(projectInvestDTO0).getAmount();
      
      //Call method: createTender
      // Undeclared exception!
      try { 
        projectServiceImpl0.createTender(projectInvestDTO0);
      } catch(Throwable e) {
         verifyException("com.wanxin.transaction.service.ProjectServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createTender_03()  throws Throwable  {
      //caseID:44c0d4184237965568490337f1d38677
      //CoveredLines: [45, 210, 212, 213, 218, 220, 221, 222]
      //Input_0_ProjectInvestDTO: {getAmount=\"4\"}
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock consumerDTO0
      ConsumerDTO consumerDTO0 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("t").when(consumerDTO0).getUserNo();
      //mock restResponse0
      RestResponse<ConsumerDTO> restResponse0 = (RestResponse<ConsumerDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumerDTO0).when(restResponse0).getResult();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock balanceDetailsDTO0
      BalanceDetailsDTO balanceDetailsDTO0 = mock(BalanceDetailsDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(balanceDetailsDTO0).getBalance();
      //mock restResponse1
      RestResponse<BalanceDetailsDTO> restResponse1 = (RestResponse<BalanceDetailsDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(balanceDetailsDTO0).when(restResponse1).getResult();
      //mock consumerApiAgent0
      ConsumerApiAgent consumerApiAgent0 = mock(ConsumerApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse1).when(consumerApiAgent0).getBalance(nullable(java.lang.String.class));
      doReturn(restResponse0).when(consumerApiAgent0).getCurrentLoginConsumer();
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(configService0).getMiniInvestmentAmount();
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "configService", (Object) configService0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "consumerApiAgent", (Object) consumerApiAgent0);
      //mock projectInvestDTO0
      ProjectInvestDTO projectInvestDTO0 = mock(ProjectInvestDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("4").when(projectInvestDTO0).getAmount();
      
      //Call method: createTender
      // Undeclared exception!
      try { 
        projectServiceImpl0.createTender(projectInvestDTO0);
      } catch(Throwable e) {
         verifyException("com.wanxin.transaction.service.ProjectServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createTender_04()  throws Throwable  {
      //caseID:09570886f889697fde5bc99bb7cb307f
      //CoveredLines: [45, 210, 212, 213, 218, 220, 221, 225, 226, 227]
      //Input_0_ProjectInvestDTO: {getId=1L, getAmount=\"1.0\"}
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock consumerDTO0
      ConsumerDTO consumerDTO0 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("E_150113").when(consumerDTO0).getUserNo();
      //mock restResponse0
      RestResponse<ConsumerDTO> restResponse0 = (RestResponse<ConsumerDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumerDTO0).when(restResponse0).getResult();
      BigDecimal bigDecimal0 = new BigDecimal(126L);
      //mock balanceDetailsDTO0
      BalanceDetailsDTO balanceDetailsDTO0 = mock(BalanceDetailsDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(balanceDetailsDTO0).getBalance();
      //mock restResponse1
      RestResponse<BalanceDetailsDTO> restResponse1 = (RestResponse<BalanceDetailsDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(balanceDetailsDTO0).when(restResponse1).getResult();
      //mock consumerApiAgent0
      ConsumerApiAgent consumerApiAgent0 = mock(ConsumerApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse1).when(consumerApiAgent0).getBalance(nullable(java.lang.String.class));
      doReturn(restResponse0).when(consumerApiAgent0).getCurrentLoginConsumer();
      Long long0 = new Long(1L);
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("FULLY").when(project0).getProjectStatus();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(project0).when(projectMapper0).selectById(nullable(java.io.Serializable.class));
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal1).when(configService0).getMiniInvestmentAmount();
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "configService", (Object) configService0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "consumerApiAgent", (Object) consumerApiAgent0);
      //mock projectInvestDTO0
      ProjectInvestDTO projectInvestDTO0 = mock(ProjectInvestDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(projectInvestDTO0).getAmount();
      doReturn(long0).when(projectInvestDTO0).getId();
      
      //Call method: createTender
      // Undeclared exception!
      try { 
        projectServiceImpl0.createTender(projectInvestDTO0);
      } catch(Throwable e) {
         verifyException("com.wanxin.transaction.service.ProjectServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createTender_05()  throws Throwable  {
      //caseID:1632d409bb54974fde9eb336ed17bfe5
      //CoveredLines: [45, 210, 212, 213, 218, 220, 221, 225, 226, 231, 232, 320, 371, 373, 374, 375, 376, 378]
      //Input_0_ProjectInvestDTO: {getId=292L, getAmount=\"1.0\"}
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock consumerDTO0
      ConsumerDTO consumerDTO0 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("%s=%s").when(consumerDTO0).getUserNo();
      //mock restResponse0
      RestResponse<ConsumerDTO> restResponse0 = (RestResponse<ConsumerDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumerDTO0).when(restResponse0).getResult();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock balanceDetailsDTO0
      BalanceDetailsDTO balanceDetailsDTO0 = mock(BalanceDetailsDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(balanceDetailsDTO0).getBalance();
      //mock restResponse1
      RestResponse<BalanceDetailsDTO> restResponse1 = (RestResponse<BalanceDetailsDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(balanceDetailsDTO0).when(restResponse1).getResult();
      //mock consumerApiAgent0
      ConsumerApiAgent consumerApiAgent0 = mock(ConsumerApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse1).when(consumerApiAgent0).getBalance(nullable(java.lang.String.class));
      doReturn(restResponse0).when(consumerApiAgent0).getCurrentLoginConsumer();
      Long long0 = new Long(292L);
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(project0).getAmount();
      doReturn(long0).when(project0).getId();
      doReturn("%s=%s").when(project0).getProjectStatus();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(project0).when(projectMapper0).selectById(nullable(java.io.Serializable.class));
      Vector<BigDecimal> vector0 = new Vector<BigDecimal>();
      
      vector0.add(bigDecimal0);
      //mock tenderMapper0
      TenderMapper tenderMapper0 = mock(TenderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(tenderMapper0).selectAmountInvestedByProjectId(nullable(java.lang.Long.class));
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(configService0).getMiniInvestmentAmount();
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "configService", (Object) configService0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "tenderMapper", (Object) tenderMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "consumerApiAgent", (Object) consumerApiAgent0);
      //mock projectInvestDTO0
      ProjectInvestDTO projectInvestDTO0 = mock(ProjectInvestDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(projectInvestDTO0).getAmount();
      doReturn(long0).when(projectInvestDTO0).getId();
      
      //Call method: createTender
      // Undeclared exception!
      try { 
        projectServiceImpl0.createTender(projectInvestDTO0);
      } catch(Throwable e) {
         verifyException("com.wanxin.transaction.service.ProjectServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createTender_06()  throws Throwable  {
      //caseID:02f33db7f53058b7493574c4b395e869
      //CoveredLines: [45, 210, 212, 213, 218, 220, 221, 225, 226, 231, 232, 236, 237, 238, 239, 371, 373, 374, 378]
      //Input_0_ProjectInvestDTO: {getId=265L, getAmount=\"1.0\"}
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock consumerDTO0
      ConsumerDTO consumerDTO0 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("622").when(consumerDTO0).getUserNo();
      //mock restResponse0
      RestResponse<ConsumerDTO> restResponse0 = (RestResponse<ConsumerDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumerDTO0).when(restResponse0).getResult();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock balanceDetailsDTO0
      BalanceDetailsDTO balanceDetailsDTO0 = mock(BalanceDetailsDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(balanceDetailsDTO0).getBalance();
      //mock restResponse1
      RestResponse<BalanceDetailsDTO> restResponse1 = (RestResponse<BalanceDetailsDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(balanceDetailsDTO0).when(restResponse1).getResult();
      //mock consumerApiAgent0
      ConsumerApiAgent consumerApiAgent0 = mock(ConsumerApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse1).when(consumerApiAgent0).getBalance(nullable(java.lang.String.class));
      doReturn(restResponse0).when(consumerApiAgent0).getCurrentLoginConsumer();
      Long long0 = new Long(265L);
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(project0).getAmount();
      doReturn(long0).when(project0).getId();
      doReturn("622").when(project0).getProjectStatus();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(project0).when(projectMapper0).selectById(nullable(java.io.Serializable.class));
      Stack<BigDecimal> stack0 = new Stack<BigDecimal>();
      //mock tenderMapper0
      TenderMapper tenderMapper0 = mock(TenderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(tenderMapper0).selectAmountInvestedByProjectId(nullable(java.lang.Long.class));
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(configService0).getMiniInvestmentAmount();
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "configService", (Object) configService0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "tenderMapper", (Object) tenderMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "consumerApiAgent", (Object) consumerApiAgent0);
      //mock projectInvestDTO0
      ProjectInvestDTO projectInvestDTO0 = mock(ProjectInvestDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(projectInvestDTO0).getAmount();
      doReturn(long0).when(projectInvestDTO0).getId();
      
      //Call method: createTender
      // Undeclared exception!
      try { 
        projectServiceImpl0.createTender(projectInvestDTO0);
      } catch(Throwable e) {
         verifyException("com.wanxin.transaction.service.ProjectServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createTender_07()  throws Throwable  {
      //caseID:bae05c8eb6254c318ec12b28f6aa5db6
      //CoveredLines: [45, 210, 212, 213, 218, 220, 221, 225, 226, 231, 232, 236, 237, 238, 244, 246, 248, 249, 251, 253, 255, 257, 259, 261, 263, 264, 266, 268, 270, 274, 276, 278, 280, 282, 284, 286, 288, 291, 315, 316, 371, 373, 374, 378]
      //Input_0_ProjectInvestDTO: {getId=1083L 1083L, getAmount=\"1.0\"}
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Long long0 = new Long(1083L);
      //mock consumerDTO0
      ConsumerDTO consumerDTO0 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(consumerDTO0).getId();
      doReturn("'", "REQ_", "REQ_").when(consumerDTO0).getUserNo();
      doReturn("REQ_").when(consumerDTO0).getUsername();
      //mock consumerDTO1
      ConsumerDTO consumerDTO1 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumerDTO2
      ConsumerDTO consumerDTO2 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumerDTO3
      ConsumerDTO consumerDTO3 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumerDTO4
      ConsumerDTO consumerDTO4 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock restResponse0
      RestResponse<ConsumerDTO> restResponse0 = (RestResponse<ConsumerDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumerDTO0, consumerDTO4, consumerDTO3, consumerDTO2, consumerDTO1).when(restResponse0).getResult();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock balanceDetailsDTO0
      BalanceDetailsDTO balanceDetailsDTO0 = mock(BalanceDetailsDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(balanceDetailsDTO0).getBalance();
      //mock restResponse1
      RestResponse<BalanceDetailsDTO> restResponse1 = (RestResponse<BalanceDetailsDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(balanceDetailsDTO0).when(restResponse1).getResult();
      //mock consumerApiAgent0
      ConsumerApiAgent consumerApiAgent0 = mock(ConsumerApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse1).when(consumerApiAgent0).getBalance(nullable(java.lang.String.class));
      doReturn(restResponse0).when(consumerApiAgent0).getCurrentLoginConsumer();
      //mock restResponse2
      RestResponse<String> restResponse2 = (RestResponse<String>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock depositoryAgentApiAgent0
      DepositoryAgentApiAgent depositoryAgentApiAgent0 = mock(DepositoryAgentApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse2).when(depositoryAgentApiAgent0).userAutoPreTransaction(any(com.wanxin.api.depository.model.UserAutoPreTransactionRequest.class));
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(project0).getAmount();
      doReturn(bigDecimal0).when(project0).getAnnualRate();
      doReturn(long0).when(project0).getId();
      doReturn("FULLY").when(project0).getName();
      doReturn(integer0).when(project0).getPeriod();
      doReturn("Comparator ", "'").when(project0).getProjectNo();
      doReturn("17").when(project0).getProjectStatus();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(project0).when(projectMapper0).selectById(nullable(java.io.Serializable.class));
      Sequence sequence0 = new Sequence();
      //mock tenderMapper0
      TenderMapper tenderMapper0 = mock(TenderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(701).when(tenderMapper0).insert(any(com.wanxin.transaction.entity.Tender.class));
      doReturn(sequence0).when(tenderMapper0).selectAmountInvestedByProjectId(anyLong());
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal1, bigDecimal1).when(configService0).getMiniInvestmentAmount();
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "configService", (Object) configService0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "tenderMapper", (Object) tenderMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "depositoryAgentApiAgent", (Object) depositoryAgentApiAgent0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "consumerApiAgent", (Object) consumerApiAgent0);
      //mock projectInvestDTO0
      ProjectInvestDTO projectInvestDTO0 = mock(ProjectInvestDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(projectInvestDTO0).getAmount();
      doReturn(long0, long0).when(projectInvestDTO0).getId();
      
      //Call method: createTender
      // Undeclared exception!
      try { 
        projectServiceImpl0.createTender(projectInvestDTO0);
      } catch(Throwable e) {
         verifyException("com.wanxin.transaction.service.ProjectServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createTender_08()  throws Throwable  {
      //caseID:888a44004a08531b7ec08c0ccb1df762
      //CoveredLines: [45, 210, 212, 213, 218, 220, 221, 225, 226, 231, 232, 236, 237, 238, 244, 246, 248, 249, 251, 253, 255, 257, 259, 261, 263, 264, 266, 268, 270, 274, 276, 278, 280, 282, 284, 286, 288, 291, 293, 294, 296, 297, 303, 305, 306, 309, 310, 312, 325, 329, 330, 331, 371, 373, 374, 378, 565, 568, 569, 570]
      //Input_0_ProjectInvestDTO: {getId=1083L 1083L, getAmount=\"1.0\" \"com/wanxin/transaction/entity/Tender\"}
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Long long0 = new Long(1083L);
      //mock consumerDTO0
      ConsumerDTO consumerDTO0 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("'").when(consumerDTO0).getUserNo();
      //mock consumerDTO1
      ConsumerDTO consumerDTO1 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2147483645").when(consumerDTO1).getUserNo();
      //mock consumerDTO2
      ConsumerDTO consumerDTO2 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u6295\u6807").when(consumerDTO2).getUserNo();
      //mock consumerDTO3
      ConsumerDTO consumerDTO3 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("getType").when(consumerDTO3).getUsername();
      //mock consumerDTO4
      ConsumerDTO consumerDTO4 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(consumerDTO4).getId();
      //mock restResponse0
      RestResponse<ConsumerDTO> restResponse0 = (RestResponse<ConsumerDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumerDTO0, consumerDTO4, consumerDTO3, consumerDTO2, consumerDTO1).when(restResponse0).getResult();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock balanceDetailsDTO0
      BalanceDetailsDTO balanceDetailsDTO0 = mock(BalanceDetailsDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(balanceDetailsDTO0).getBalance();
      //mock restResponse1
      RestResponse<BalanceDetailsDTO> restResponse1 = (RestResponse<BalanceDetailsDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(balanceDetailsDTO0).when(restResponse1).getResult();
      //mock consumerApiAgent0
      ConsumerApiAgent consumerApiAgent0 = mock(ConsumerApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse1).when(consumerApiAgent0).getBalance(nullable(java.lang.String.class));
      doReturn(restResponse0).when(consumerApiAgent0).getCurrentLoginConsumer();
      //mock restResponse2
      RestResponse<String> restResponse2 = (RestResponse<String>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("00000").when(restResponse2).getResult();
      //mock depositoryAgentApiAgent0
      DepositoryAgentApiAgent depositoryAgentApiAgent0 = mock(DepositoryAgentApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse2).when(depositoryAgentApiAgent0).userAutoPreTransaction(any(com.wanxin.api.depository.model.UserAutoPreTransactionRequest.class));
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("E_150112").when(date0).toString();
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(",,ywM/vY@L]l-AS5").when(date1).toString();
      //mock project1
      Project project1 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(project1).getAmount();
      doReturn(bigDecimal0, bigDecimal0).when(project1).getAnnualRate();
      doReturn(bigDecimal0).when(project1).getBorrowerAnnualRate();
      doReturn(bigDecimal0).when(project1).getCommissionAnnualRate();
      doReturn(long0).when(project1).getConsumerId();
      doReturn(date1).when(project1).getCreateDate();
      doReturn("*Tt}U+!W,7X#~R").when(project1).getDescription();
      doReturn(long0, long0, long0).when(project1).getId();
      doReturn(integer0).when(project1).getIsAssignment();
      doReturn(date0).when(project1).getModifyDate();
      doReturn("FULLY", "-1467855501").when(project1).getName();
      doReturn(integer0, integer0, integer0).when(project1).getPeriod();
      doReturn("Comparator ", "'", "\u8BF7\u6C42\u6D41\u6C34\u53F7\u524D\u7F00").when(project1).getProjectNo();
      doReturn("17", "\u7B49\u989D\u672C\u606F").when(project1).getProjectStatus();
      doReturn("{A^2|{e0").when(project1).getRepaymentWay();
      doReturn("150112").when(project1).getRequestNo();
      doReturn(integer0).when(project1).getStatus();
      doReturn("springfox.documentation.swagger2.web.Swagger2Controller").when(project1).getType();
      doReturn("E_150109").when(project1).getUserNo();
      doReturn(project0).when(project1).setRepaymentWay(anyString());
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(project1).when(projectMapper0).selectById(nullable(java.io.Serializable.class));
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      //mock tenderMapper0
      TenderMapper tenderMapper0 = mock(TenderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(701).when(tenderMapper0).insert(any(com.wanxin.transaction.entity.Tender.class));
      doReturn(222).when(tenderMapper0).updateById(any(com.wanxin.transaction.entity.Tender.class));
      doReturn(nonEmptySequence0, nonEmptySequence0).when(tenderMapper0).selectAmountInvestedByProjectId(anyLong());
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal1, bigDecimal1).when(configService0).getMiniInvestmentAmount();
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "configService", (Object) configService0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "tenderMapper", (Object) tenderMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "depositoryAgentApiAgent", (Object) depositoryAgentApiAgent0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "consumerApiAgent", (Object) consumerApiAgent0);
      //mock projectInvestDTO0
      ProjectInvestDTO projectInvestDTO0 = mock(ProjectInvestDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0", "com/wanxin/transaction/entity/Tender").when(projectInvestDTO0).getAmount();
      doReturn(long0, long0).when(projectInvestDTO0).getId();
      
      //Call method: createTender
      // Undeclared exception!
      try { 
        projectServiceImpl0.createTender(projectInvestDTO0);
      } catch(Throwable e) {
         verifyException("java.math.BigDecimal", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_generateLoanRequest_09()  throws Throwable  {
      //caseID:0a0861124d6c5784accb784294d95650
      //CoveredLines: [45, 150, 152, 154, 158, 160, 162, 163, 164, 166, 168, 169, 170, 172, 175]
      //Input_0_Project: {}
      //Input_1_List<Tender>: arrayList0
      //Input_2_String: 
      //Assert: assertNull(method_result.getProjectNo());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ArrayList<Tender> arrayList0 = new ArrayList<Tender>();
      //mock tender0
      Tender tender0 = mock(Tender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(tender0);
      
      //Call method: generateLoanRequest
      LoanRequest loanRequest0 = projectServiceImpl0.generateLoanRequest(project0, arrayList0, "");
      
      //Test Result Assert
      assertNull(loanRequest0.getProjectNo());
  }

  @Test(timeout = 9000)
  public void test_generateLoanRequest_10()  throws Throwable  {
      //caseID:970555d3af60fe82e359d61a1db726f3
      //CoveredLines: [45, 150, 152, 154, 155, 158, 160, 162, 163, 164, 166, 168, 169, 170, 172, 175]
      //Input_0_Project: {}
      //Input_1_List<Tender>: arrayList0
      //Input_2_String: 1.0
      //Assert: assertEquals("REQ_ADD24364317D45EBB5B401F2718E5B0A", method_result.getRequestNo());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ArrayList<Tender> arrayList0 = new ArrayList<Tender>();
      //mock tender0
      Tender tender0 = mock(Tender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList0.add(tender0);
      
      //Call method: generateLoanRequest
      LoanRequest loanRequest0 = projectServiceImpl0.generateLoanRequest(project0, arrayList0, "1.0");
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("REQ_ADD24364317D45EBB5B401F2718E5B0A", loanRequest0.getRequestNo());
  }

  @Test(timeout = 9000)
  public void test_loansApprovalStatus_11()  throws Throwable  {
      //caseID:b35a342811a98dd5300d5f24019be7ec
      //CoveredLines: [45, 71, 138]
      //Input_0_Long: 1482L
      //Input_1_String: getCreateDate
      //Input_2_String: m!
      //Assert: assertEquals("\u5BA1\u6838\u62D2\u7EDD", method_result);
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Long long0 = new Long(1482L);
      
      //Call method: loansApprovalStatus
      String string0 = projectServiceImpl0.loansApprovalStatus(long0, "getCreateDate", "m!");
      
      //Test Result Assert
      assertEquals("\u5BA1\u6838\u62D2\u7EDD", string0);
  }

  @Test(timeout = 9000)
  public void test_loansApprovalStatus_12()  throws Throwable  {
      //caseID:9d9bd491459cec50edecb8e9561c5b7b
      //CoveredLines: [45, 71, 72, 73, 74, 75, 76, 138]
      //Input_0_Long: 2136L
      //Input_1_String: 3
      //Input_2_String: 150113
      //Assert: assertEquals("\u5BA1\u6838\u62D2\u7EDD", method_result);
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      Long long0 = new Long(2136L);
      
      //Call method: loansApprovalStatus
      String string0 = projectServiceImpl0.loansApprovalStatus(long0, "3", "150113");
      
      //Test Result Assert
      assertEquals("\u5BA1\u6838\u62D2\u7EDD", string0);
  }

  @Test(timeout = 9000)
  public void test_projectsApprovalStatus_13()  throws Throwable  {
      //caseID:483f65deee211adb448d662eead3a121
      //CoveredLines: [45, 395, 396, 399, 400, 402, 403, 404, 405, 406, 410, 412, 433, 565, 568, 569, 570]
      //Input_0_Long: 1L
      //Input_1_String: 0
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock restResponse0
      RestResponse<String> restResponse0 = (RestResponse<String>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("getId").when(restResponse0).getResult();
      //mock depositoryAgentApiAgent0
      DepositoryAgentApiAgent depositoryAgentApiAgent0 = mock(DepositoryAgentApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(depositoryAgentApiAgent0).createProject(any(com.wanxin.api.transaction.model.ProjectDTO.class));
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("RETURN_CODE_00000").when(date0).toString();
      Long long0 = new Long(1L);
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u6D41\u6807").when(date1).toString();
      byte[] byteArray0 = new byte[5];
      //mock bigInteger0
      BigInteger bigInteger0 = mock(BigInteger.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(byteArray0).when(bigInteger0).toByteArray();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(project0).getAmount();
      doReturn(bigDecimal0).when(project0).getAnnualRate();
      doReturn(bigDecimal0).when(project0).getBorrowerAnnualRate();
      doReturn(bigDecimal0).when(project0).getCommissionAnnualRate();
      doReturn(long0).when(project0).getConsumerId();
      doReturn(date1).when(project0).getCreateDate();
      doReturn("17").when(project0).getDescription();
      doReturn(long0, long0).when(project0).getId();
      doReturn(integer0).when(project0).getIsAssignment();
      doReturn(date0).when(project0).getModifyDate();
      doReturn("\u5BA1\u6838\u6210\u529F").when(project0).getName();
      doReturn(integer0).when(project0).getPeriod();
      doReturn("6LrBCo$Q&tg1?rqi").when(project0).getProjectNo();
      doReturn("C\",Qu,y9oDu,8").when(project0).getProjectStatus();
      doReturn(",").when(project0).getRepaymentWay();
      doReturn("Hsy1K%", (String) null).when(project0).getRequestNo();
      doReturn(integer0).when(project0).getStatus();
      doReturn("MISCARRY").when(project0).getType();
      doReturn("Api Documentation").when(project0).getUserNo();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(project0).when(projectMapper0).selectById(any(java.io.Serializable.class));
      doReturn(150113).when(projectMapper0).updateById(any(com.wanxin.transaction.entity.Project.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "depositoryAgentApiAgent", (Object) depositoryAgentApiAgent0);
      
      //Call method: projectsApprovalStatus
      // Undeclared exception!
      try { 
        projectServiceImpl0.projectsApprovalStatus(long0, "0");
      } catch(Throwable e) {
         verifyException("com.wanxin.transaction.service.ProjectServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_projectsApprovalStatus_14()  throws Throwable  {
      //caseID:77683c33df7487d3f75def6763f6ad24
      //CoveredLines: [45, 395, 396, 399, 410, 412, 413, 416, 417, 421, 425, 426, 427, 429, 430, 565, 568, 569, 570]
      //Input_0_Long: 3149L
      //Input_1_String: 150113
      //Assert: assertEquals("success", method_result);
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock restResponse0
      RestResponse<String> restResponse0 = (RestResponse<String>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("00000").when(restResponse0).getResult();
      //mock depositoryAgentApiAgent0
      DepositoryAgentApiAgent depositoryAgentApiAgent0 = mock(DepositoryAgentApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(depositoryAgentApiAgent0).createProject(any(com.wanxin.api.transaction.model.ProjectDTO.class));
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("00000").when(date0).toString();
      Long long0 = new Long(3149L);
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("00000").when(date1).toString();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(project0).getAmount();
      doReturn(bigDecimal0).when(project0).getAnnualRate();
      doReturn(bigDecimal0).when(project0).getBorrowerAnnualRate();
      doReturn(bigDecimal0).when(project0).getCommissionAnnualRate();
      doReturn(long0).when(project0).getConsumerId();
      doReturn(date1).when(project0).getCreateDate();
      doReturn("00000").when(project0).getDescription();
      doReturn(long0, long0).when(project0).getId();
      doReturn(integer0).when(project0).getIsAssignment();
      doReturn(date0).when(project0).getModifyDate();
      doReturn("00000").when(project0).getName();
      doReturn(integer0).when(project0).getPeriod();
      doReturn("00000").when(project0).getProjectNo();
      doReturn("00000").when(project0).getProjectStatus();
      doReturn("00000").when(project0).getRepaymentWay();
      doReturn("00000", "00000").when(project0).getRequestNo();
      doReturn(integer0).when(project0).getStatus();
      doReturn("00000").when(project0).getType();
      doReturn("00000").when(project0).getUserNo();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(project0).when(projectMapper0).selectById(any(java.io.Serializable.class));
      doReturn((int)(short)10).when(projectMapper0).updateById(any(com.wanxin.transaction.entity.Project.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "depositoryAgentApiAgent", (Object) depositoryAgentApiAgent0);
      
      //Call method: projectsApprovalStatus
      String string0 = projectServiceImpl0.projectsApprovalStatus(long0, "150113");
      
      //Test Result Assert
      assertEquals("success", string0);
  }

  @Test(timeout = 9000)
  public void test_queryProjects_15()  throws Throwable  {
      //caseID:93d8ba7b74a62ddba4253da688e63430
      //CoveredLines: [45, 383, 385, 386]
      //Input_0_ProjectQueryDTO: {}
      //Input_1_String: 6
      //Input_2_Integer: JLayeredPane.FRAME_CONTENT_LAYER
      //Input_3_Integer: JLayeredPane.FRAME_CONTENT_LAYER
      //Input_4_String: M.:;h
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Boolean boolean0 = Boolean.FALSE;
      //mock restResponse0
      RestResponse<PageVO<ProjectDTO>> restResponse0 = (RestResponse<PageVO<ProjectDTO>>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(restResponse0).isSuccessful();
      //mock contentSearchApiAgent0
      ContentSearchApiAgent contentSearchApiAgent0 = mock(ContentSearchApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(contentSearchApiAgent0).queryProjectIndex(any(com.wanxin.api.transaction.model.ProjectQueryDTO.class) , anyInt() , anyInt() , anyString() , anyString());
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "contentSearchApiAgent", (Object) contentSearchApiAgent0);
      //mock projectQueryDTO0
      ProjectQueryDTO projectQueryDTO0 = mock(ProjectQueryDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      
      //Call method: queryProjects
      // Undeclared exception!
      try { 
        projectServiceImpl0.queryProjects(projectQueryDTO0, "6", integer0, integer0, "M.:;h");
      } catch(Throwable e) {
         verifyException("com.wanxin.transaction.service.ProjectServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_queryProjects_16()  throws Throwable  {
      //caseID:ceec8c3631bfbc2aea43276a9d95db35
      //CoveredLines: [45, 383, 385, 389]
      //Input_0_ProjectQueryDTO: {}
      //Input_1_String: 0.0
      //Input_2_Integer: JLayeredPane.DRAG_LAYER
      //Input_3_Integer: JLayeredPane.DRAG_LAYER
      //Input_4_String: \u5973\u58EB
      //Assert: assertNull(method_result);
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Boolean boolean0 = Boolean.TRUE;
      //mock restResponse0
      RestResponse<PageVO<ProjectDTO>> restResponse0 = (RestResponse<PageVO<ProjectDTO>>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(restResponse0).isSuccessful();
      //mock contentSearchApiAgent0
      ContentSearchApiAgent contentSearchApiAgent0 = mock(ContentSearchApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(contentSearchApiAgent0).queryProjectIndex(any(com.wanxin.api.transaction.model.ProjectQueryDTO.class) , anyInt() , anyInt() , anyString() , anyString());
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "contentSearchApiAgent", (Object) contentSearchApiAgent0);
      //mock projectQueryDTO0
      ProjectQueryDTO projectQueryDTO0 = mock(ProjectQueryDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      
      //Call method: queryProjects
      PageVO<ProjectDTO> pageVO0 = projectServiceImpl0.queryProjects(projectQueryDTO0, "0.0", integer0, integer0, "\u5973\u58EB");
      
      //Test Result Assert
      assertNull(pageVO0);
  }

  @Test(timeout = 9000)
  public void test_queryProjectsByQueryDTO_17()  throws Throwable  {
      //caseID:ed7265edb47aaa92144b90d9ef951dd8
      //CoveredLines: [45, 438, 440, 442, 447, 448, 450, 451, 455, 458, 459, 463, 464, 468, 469, 474, 477, 480, 481, 485, 486]
      //Input_0_ProjectQueryDTO: {getEndPeriod=JLayeredPane.POPUP_LAYER, getStartAnnualRate=BigDecimal.ZERO, getStartPeriod=(Integer) null, getType=(String) null, getEndAnnualRate=BigDecimal.ZERO, getStatus=\"()Ljava/lang/String;\", getProjectStatus=\"apply\"}
      //Input_1_Integer: JLayeredPane.POPUP_LAYER
      //Input_2_Integer: JLayeredPane.POPUP_LAYER
      //Assert: assertEquals(300, method_result.getPageSize());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock iPage0
      IPage<Project> iPage0 = (IPage<Project>) mock(IPage.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(iPage0).when(projectMapper0).selectPage(any(com.baomidou.mybatisplus.core.metadata.IPage.class) , any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      //mock projectQueryDTO0
      ProjectQueryDTO projectQueryDTO0 = mock(ProjectQueryDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(projectQueryDTO0).getEndAnnualRate();
      doReturn(integer0).when(projectQueryDTO0).getEndPeriod();
      doReturn("apply").when(projectQueryDTO0).getProjectStatus();
      doReturn(bigDecimal0).when(projectQueryDTO0).getStartAnnualRate();
      doReturn((Integer) null).when(projectQueryDTO0).getStartPeriod();
      doReturn("()Ljava/lang/String;").when(projectQueryDTO0).getStatus();
      doReturn((String) null).when(projectQueryDTO0).getType();
      
      //Call method: queryProjectsByQueryDTO
      PageVO<ProjectDTO> pageVO0 = projectServiceImpl0.queryProjectsByQueryDTO(projectQueryDTO0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(300, pageVO0.getPageSize());
  }

  @Test(timeout = 9000)
  public void test_queryProjectsByQueryDTO_18()  throws Throwable  {
      //caseID:dc3d1fb9e34dd2438e49ae959aff19d7
      //CoveredLines: [45, 438, 440, 442, 447, 448, 450, 455, 456, 458, 463, 468, 474, 477, 480, 481, 485, 488, 489, 490, 491, 492, 493, 494]
      //Input_0_ProjectQueryDTO: {getEndPeriod=(Integer) null, getStartAnnualRate=BigDecimal.TEN (BigDecimal) null, getStartPeriod=JLayeredPane.POPUP_LAYER JLayeredPane.POPUP_LAYER, getType=(String) null, getEndAnnualRate=(BigDecimal) null, getStatus=(String) null, getProjectStatus=(String) null}
      //Input_1_Integer: JLayeredPane.POPUP_LAYER
      //Input_2_Integer: JLayeredPane.POPUP_LAYER
      //Assert: assertEquals(300, method_result.getPageNo());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Sequence sequence0 = new Sequence();
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      sequence0.add(project0);
      //mock iPage0
      IPage<Project> iPage0 = (IPage<Project>) mock(IPage.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sequence0).when(iPage0).getRecords();
      doReturn((-1L)).when(iPage0).getTotal();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(iPage0).when(projectMapper0).selectPage(any(com.baomidou.mybatisplus.core.metadata.IPage.class) , any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock projectQueryDTO0
      ProjectQueryDTO projectQueryDTO0 = mock(ProjectQueryDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((BigDecimal) null).when(projectQueryDTO0).getEndAnnualRate();
      doReturn((Integer) null).when(projectQueryDTO0).getEndPeriod();
      doReturn((String) null).when(projectQueryDTO0).getProjectStatus();
      doReturn(bigDecimal0, (BigDecimal) null).when(projectQueryDTO0).getStartAnnualRate();
      doReturn(integer0, integer0).when(projectQueryDTO0).getStartPeriod();
      doReturn((String) null).when(projectQueryDTO0).getStatus();
      doReturn((String) null).when(projectQueryDTO0).getType();
      
      //Call method: queryProjectsByQueryDTO
      PageVO<ProjectDTO> pageVO0 = projectServiceImpl0.queryProjectsByQueryDTO(projectQueryDTO0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(300, pageVO0.getPageNo());
  }

  @Test(timeout = 9000)
  public void test_queryProjectsByQueryDTO_19()  throws Throwable  {
      //caseID:87b4161ebf2bab3994a6be25b022a9f8
      //CoveredLines: [45, 438, 440, 442, 443, 447, 450, 455, 456, 458, 459, 463, 464, 468, 474, 477, 480, 481, 485, 488, 489, 490, 491, 492, 493, 494]
      //Input_0_ProjectQueryDTO: {getEndPeriod=JLayeredPane.POPUP_LAYER JLayeredPane.POPUP_LAYER, getStartAnnualRate=(BigDecimal) null, getStartPeriod=JLayeredPane.POPUP_LAYER JLayeredPane.POPUP_LAYER, getType=\"FULLY\" (String) null, getEndAnnualRate=(BigDecimal) null, getStatus=(String) null, getProjectStatus=\"()Ljava/lang/String;\" \"`w[\"}
      //Input_1_Integer: JLayeredPane.POPUP_LAYER
      //Input_2_Integer: JLayeredPane.POPUP_LAYER
      //Assert: assertEquals(300, method_result.getPageSize());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(" {activeProfiles=").when(date0).toString();
      Long long0 = new Long((-1L));
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("5").when(date1).toString();
      BigDecimal bigDecimal0 = new BigDecimal((-3052.5103525));
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(project0).getAmount();
      doReturn(bigDecimal0).when(project0).getAnnualRate();
      doReturn(bigDecimal0).when(project0).getBorrowerAnnualRate();
      doReturn(bigDecimal0).when(project0).getCommissionAnnualRate();
      doReturn(long0).when(project0).getConsumerId();
      doReturn(date1).when(project0).getCreateDate();
      doReturn("16").when(project0).getDescription();
      doReturn(long0).when(project0).getId();
      doReturn(integer0).when(project0).getIsAssignment();
      doReturn(date0).when(project0).getModifyDate();
      doReturn("name server address changed, old=").when(project0).getName();
      doReturn(integer0).when(project0).getPeriod();
      doReturn("\u5973\u58EB").when(project0).getProjectNo();
      doReturn("MOD11").when(project0).getProjectStatus();
      doReturn("\u5BA1\u6838\u62D2\u7EDD").when(project0).getRepaymentWay();
      doReturn("()Ljava/lang/Integer;").when(project0).getRequestNo();
      doReturn(integer0).when(project0).getStatus();
      doReturn("com.wanxin.transaction.service.ProjectServiceImpl").when(project0).getType();
      doReturn("CODE_REQUEST_PREFIX").when(project0).getUserNo();
      
      nonEmptySequence0.add(project0);
      //mock iPage0
      IPage<Project> iPage0 = (IPage<Project>) mock(IPage.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(nonEmptySequence0).when(iPage0).getRecords();
      doReturn(1339L).when(iPage0).getTotal();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(iPage0).when(projectMapper0).selectPage(any(com.baomidou.mybatisplus.core.metadata.IPage.class) , any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      //mock projectQueryDTO0
      ProjectQueryDTO projectQueryDTO0 = mock(ProjectQueryDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((BigDecimal) null).when(projectQueryDTO0).getEndAnnualRate();
      doReturn(integer0, integer0).when(projectQueryDTO0).getEndPeriod();
      doReturn("()Ljava/lang/String;", "`w[").when(projectQueryDTO0).getProjectStatus();
      doReturn((BigDecimal) null).when(projectQueryDTO0).getStartAnnualRate();
      doReturn(integer0, integer0).when(projectQueryDTO0).getStartPeriod();
      doReturn((String) null).when(projectQueryDTO0).getStatus();
      doReturn("FULLY", (String) null).when(projectQueryDTO0).getType();
      
      //Call method: queryProjectsByQueryDTO
      PageVO<ProjectDTO> pageVO0 = projectServiceImpl0.queryProjectsByQueryDTO(projectQueryDTO0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(300, pageVO0.getPageSize());
  }

  @Test(timeout = 9000)
  public void test_queryProjectsByQueryDTO_20()  throws Throwable  {
      //caseID:16ae842998cc6d350b197cc639ec083c
      //CoveredLines: [45, 438, 440, 442, 443, 447, 450, 451, 455, 456, 458, 463, 464, 468, 474, 477, 480, 481, 485, 488, 489, 490, 491, 492, 493, 494]
      //Input_0_ProjectQueryDTO: {getEndPeriod=(Integer) null, getStartAnnualRate=(BigDecimal) null (BigDecimal) null, getStartPeriod=JLayeredPane.DEFAULT_LAYER JLayeredPane.DEFAULT_LAYER, getType=\"Collection type [\" \"()Ljava/lang/Long;\", getEndAnnualRate=BigDecimal.ZERO, getStatus=(String) null, getProjectStatus=\"-2147483645\" \"()Ljava/lang/Integer;\"}
      //Input_1_Integer: JLayeredPane.DEFAULT_LAYER
      //Input_2_Integer: JLayeredPane.DEFAULT_LAYER
      //Assert: assertEquals(0, method_result.getPageSize());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Y7o#:x~00P<:jq").when(date0).toString();
      Long long0 = new Long(1905L);
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com/baomidou/mybatisplus/core/toolkit/support/SFunction").when(date1).toString();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(project0).getAmount();
      doReturn(bigDecimal0).when(project0).getAnnualRate();
      doReturn(bigDecimal0).when(project0).getBorrowerAnnualRate();
      doReturn(bigDecimal0).when(project0).getCommissionAnnualRate();
      doReturn(long0).when(project0).getConsumerId();
      doReturn(date1).when(project0).getCreateDate();
      doReturn("[?:}J3PwQl").when(project0).getDescription();
      doReturn(long0).when(project0).getId();
      doReturn(integer0).when(project0).getIsAssignment();
      doReturn(date0).when(project0).getModifyDate();
      doReturn("getProjectStatus").when(project0).getName();
      doReturn(integer0).when(project0).getPeriod();
      doReturn("150113").when(project0).getProjectNo();
      doReturn("\"pn`+").when(project0).getProjectStatus();
      doReturn("()Ljava/lang/String;").when(project0).getRepaymentWay();
      doReturn("AUTOWIRE_CONSTRUCTOR not supported for existing bean instance").when(project0).getRequestNo();
      doReturn(integer0).when(project0).getStatus();
      doReturn("\u5148\u751F").when(project0).getType();
      doReturn("eureka.instance.secure-port-enabled").when(project0).getUserNo();
      
      nonEmptySequence0.add(project0);
      //mock iPage0
      IPage<Project> iPage0 = (IPage<Project>) mock(IPage.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(nonEmptySequence0).when(iPage0).getRecords();
      doReturn(514L).when(iPage0).getTotal();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(iPage0).when(projectMapper0).selectPage(any(com.baomidou.mybatisplus.core.metadata.IPage.class) , any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      //mock projectQueryDTO0
      ProjectQueryDTO projectQueryDTO0 = mock(ProjectQueryDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(projectQueryDTO0).getEndAnnualRate();
      doReturn((Integer) null).when(projectQueryDTO0).getEndPeriod();
      doReturn("-2147483645", "()Ljava/lang/Integer;").when(projectQueryDTO0).getProjectStatus();
      doReturn((BigDecimal) null, (BigDecimal) null).when(projectQueryDTO0).getStartAnnualRate();
      doReturn(integer0, integer0).when(projectQueryDTO0).getStartPeriod();
      doReturn((String) null).when(projectQueryDTO0).getStatus();
      doReturn("Collection type [", "()Ljava/lang/Long;").when(projectQueryDTO0).getType();
      
      //Call method: queryProjectsByQueryDTO
      PageVO<ProjectDTO> pageVO0 = projectServiceImpl0.queryProjectsByQueryDTO(projectQueryDTO0, integer0, integer0);
      
      //Test Result Assert
      assertEquals(0, pageVO0.getPageSize());
  }

  @Test(timeout = 9000)
  public void test_queryProjectsByQueryDTO_21()  throws Throwable  {
      //caseID:544734ce650ec9a81b30fe1ff264a918
      //CoveredLines: [45, 438, 440, 442, 443, 447, 448, 450, 455, 456, 458, 463, 464, 468, 474, 477, 480, 481, 485, 488, 489, 490, 491, 492, 493, 494]
      //Input_0_ProjectQueryDTO: {getEndPeriod=(Integer) null, getStartAnnualRate=BigDecimal.ONE (BigDecimal) null, getStartPeriod=999991 (Integer) null, getType=\"com.google.common.collect.Multimaps$CustomSortedSetMultimap\" \"com.wanxin.transaction.service.ProjectServiceImpl\", getEndAnnualRate=(BigDecimal) null, getStatus=(String) null, getProjectStatus=\"150113\" \"org.assertj.core.internal.bytebuddy.asm.Advice$OnDefaultValue\"}
      //Input_1_Integer: 999991
      //Input_2_Integer: 999991
      //Assert: assertFalse(method_result.isFirst());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      LinkedList<Project> linkedList0 = new LinkedList<Project>();
      Integer integer0 = new Integer(999991);
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("] isn't an enum value").when(date0).toString();
      Long long0 = new Long(0L);
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("6").when(date1).toString();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(project0).getAmount();
      doReturn(bigDecimal0).when(project0).getAnnualRate();
      doReturn(bigDecimal0).when(project0).getBorrowerAnnualRate();
      doReturn(bigDecimal0).when(project0).getCommissionAnnualRate();
      doReturn(long0).when(project0).getConsumerId();
      doReturn(date1).when(project0).getCreateDate();
      doReturn("98245393").when(project0).getDescription();
      doReturn(long0).when(project0).getId();
      doReturn(integer0).when(project0).getIsAssignment();
      doReturn(date0).when(project0).getModifyDate();
      doReturn("-2147483645").when(project0).getName();
      doReturn(integer0).when(project0).getPeriod();
      doReturn("1895451829").when(project0).getProjectNo();
      doReturn("{;;'|1qn").when(project0).getProjectStatus();
      doReturn("1.0").when(project0).getRepaymentWay();
      doReturn("5").when(project0).getRequestNo();
      doReturn(integer0).when(project0).getStatus();
      doReturn("98245393").when(project0).getType();
      doReturn("No advice defined by ").when(project0).getUserNo();
      
      linkedList0.add(project0);
      //mock iPage0
      IPage<Project> iPage0 = (IPage<Project>) mock(IPage.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(iPage0).getRecords();
      doReturn((-1L)).when(iPage0).getTotal();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(iPage0).when(projectMapper0).selectPage(any(com.baomidou.mybatisplus.core.metadata.IPage.class) , any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      //mock projectQueryDTO0
      ProjectQueryDTO projectQueryDTO0 = mock(ProjectQueryDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((BigDecimal) null).when(projectQueryDTO0).getEndAnnualRate();
      doReturn((Integer) null).when(projectQueryDTO0).getEndPeriod();
      doReturn("150113", "org.assertj.core.internal.bytebuddy.asm.Advice$OnDefaultValue").when(projectQueryDTO0).getProjectStatus();
      doReturn(bigDecimal0, (BigDecimal) null).when(projectQueryDTO0).getStartAnnualRate();
      doReturn(integer0, (Integer) null).when(projectQueryDTO0).getStartPeriod();
      doReturn((String) null).when(projectQueryDTO0).getStatus();
      doReturn("com.google.common.collect.Multimaps$CustomSortedSetMultimap", "com.wanxin.transaction.service.ProjectServiceImpl").when(projectQueryDTO0).getType();
      
      //Call method: queryProjectsByQueryDTO
      PageVO<ProjectDTO> pageVO0 = projectServiceImpl0.queryProjectsByQueryDTO(projectQueryDTO0, integer0, integer0);
      
      //Test Result Assert
      assertFalse(pageVO0.isFirst());
  }

  @Test(timeout = 9000)
  public void test_queryProjectsByQueryDTO_22()  throws Throwable  {
      //caseID:c7997b33dfb3c800a04231ff154d4133
      //CoveredLines: [45, 438, 440, 442, 443, 447, 450, 455, 456, 458, 463, 464, 468, 469, 474, 477, 480, 481, 485, 488, 489, 490, 491, 492, 493, 494]
      //Input_0_ProjectQueryDTO: {getEndPeriod=(Integer) null, getStartAnnualRate=(BigDecimal) null, getStartPeriod=JLayeredPane.FRAME_CONTENT_LAYER (Integer) null, getType=\"com/baomidou/mybatisplus/core/toolkit/support/SFunction\" (String) null, getEndAnnualRate=(BigDecimal) null, getStatus=\"com/baomidou/mybatisplus/core/toolkit/support/SFunction\" (String) null, getProjectStatus=\"getPeriod\" (String) null}
      //Input_1_Integer: JLayeredPane.FRAME_CONTENT_LAYER
      //Input_2_Integer: JLayeredPane.FRAME_CONTENT_LAYER
      //Assert: assertEquals((-30000), method_result.getPageNo());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      LinkedList<Project> linkedList0 = new LinkedList<Project>();
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(project0);
      //mock iPage0
      IPage<Project> iPage0 = (IPage<Project>) mock(IPage.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(iPage0).getRecords();
      doReturn(600000L).when(iPage0).getTotal();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(iPage0).when(projectMapper0).selectPage(any(com.baomidou.mybatisplus.core.metadata.IPage.class) , any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      //mock projectQueryDTO0
      ProjectQueryDTO projectQueryDTO0 = mock(ProjectQueryDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((BigDecimal) null).when(projectQueryDTO0).getEndAnnualRate();
      doReturn((Integer) null).when(projectQueryDTO0).getEndPeriod();
      doReturn("getPeriod", (String) null).when(projectQueryDTO0).getProjectStatus();
      doReturn((BigDecimal) null).when(projectQueryDTO0).getStartAnnualRate();
      doReturn(integer0, (Integer) null).when(projectQueryDTO0).getStartPeriod();
      doReturn("com/baomidou/mybatisplus/core/toolkit/support/SFunction", (String) null).when(projectQueryDTO0).getStatus();
      doReturn("com/baomidou/mybatisplus/core/toolkit/support/SFunction", (String) null).when(projectQueryDTO0).getType();
      
      //Call method: queryProjectsByQueryDTO
      PageVO<ProjectDTO> pageVO0 = projectServiceImpl0.queryProjectsByQueryDTO(projectQueryDTO0, integer0, integer0);
      
      //Test Result Assert
      assertEquals((-30000), pageVO0.getPageNo());
  }

  @Test(timeout = 9000)
  public void test_queryProjectsIds_23()  throws Throwable  {
      //caseID:8d92a1afaa644a083a9ebf6ae51397f2
      //CoveredLines: [45, 351, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 371, 373, 374, 378, 565, 568, 569, 570]
      //Input_0_String: 0
      //Assert: assertTrue(method_result.isEmpty());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Stack<Project> stack0 = new Stack<Project>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("704288951").when(date0).toString();
      Long long0 = new Long(289L);
      //mock date1
      Date date1 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("ON6lWQ!>").when(date1).toString();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(project0).getAmount();
      doReturn(bigDecimal0).when(project0).getAnnualRate();
      doReturn(bigDecimal0).when(project0).getBorrowerAnnualRate();
      doReturn(bigDecimal0).when(project0).getCommissionAnnualRate();
      doReturn(long0).when(project0).getConsumerId();
      doReturn(date1).when(project0).getCreateDate();
      doReturn("704288951").when(project0).getDescription();
      doReturn(long0, long0, long0).when(project0).getId();
      doReturn(integer0).when(project0).getIsAssignment();
      doReturn(date0).when(project0).getModifyDate();
      doReturn("ON6lWQ!>").when(project0).getName();
      doReturn(integer0).when(project0).getPeriod();
      doReturn("ON6lWQ!>").when(project0).getProjectNo();
      doReturn("ON6lWQ!>").when(project0).getProjectStatus();
      doReturn("704288951").when(project0).getRepaymentWay();
      doReturn("ON6lWQ!>").when(project0).getRequestNo();
      doReturn(integer0).when(project0).getStatus();
      doReturn("ON6lWQ!>").when(project0).getType();
      doReturn("ON6lWQ!>").when(project0).getUserNo();
      
      stack0.add(project0);
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(projectMapper0).selectList(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      Sequence sequence0 = new Sequence();
      //mock tenderMapper0
      TenderMapper tenderMapper0 = mock(TenderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(tenderMapper0).selectCount(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      doReturn(sequence0).when(tenderMapper0).selectAmountInvestedByProjectId(anyLong());
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "tenderMapper", (Object) tenderMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      
      //Call method: queryProjectsIds
      List<ProjectDTO> list0 = projectServiceImpl0.queryProjectsIds("0");
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 9000)
  public void test_queryQualifications_24()  throws Throwable  {
      //caseID:223da08de69ea080dd04512a8448976b
      //CoveredLines: [45, 542, 543, 544]
      //Assert: assertEquals(0, (int)method_result);
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      //mock consumerDTO0
      ConsumerDTO consumerDTO0 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(consumerDTO0).getIsBindCard();
      //mock restResponse0
      RestResponse<ConsumerDTO> restResponse0 = (RestResponse<ConsumerDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumerDTO0).when(restResponse0).getResult();
      //mock consumerApiAgent0
      ConsumerApiAgent consumerApiAgent0 = mock(ConsumerApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(consumerApiAgent0).getCurrentLoginConsumer();
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "consumerApiAgent", (Object) consumerApiAgent0);
      
      //Call method: queryQualifications
      Integer integer1 = projectServiceImpl0.queryQualifications();
      
      //Test Result Assert
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 9000)
  public void test_queryQualifications_25()  throws Throwable  {
      //caseID:c50ad291567aa3ca9c8784ba3c74fbe6
      //CoveredLines: [45, 542, 543, 548, 549, 552]
      //Assert: assertEquals(1, (int)method_result);
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Integer integer0 = new Integer(1);
      Long long0 = new Long(1);
      //mock consumerDTO0
      ConsumerDTO consumerDTO0 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(consumerDTO0).getId();
      doReturn(integer0).when(consumerDTO0).getIsBindCard();
      //mock restResponse0
      RestResponse<ConsumerDTO> restResponse0 = (RestResponse<ConsumerDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumerDTO0).when(restResponse0).getResult();
      //mock consumerApiAgent0
      ConsumerApiAgent consumerApiAgent0 = mock(ConsumerApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(consumerApiAgent0).getCurrentLoginConsumer();
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer1).when(projectMapper0).selectCount(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "consumerApiAgent", (Object) consumerApiAgent0);
      
      //Call method: queryQualifications
      Integer integer2 = projectServiceImpl0.queryQualifications();
      
      //Test Result Assert
      assertEquals(1, (int)integer2);
  }

  @Test(timeout = 9000)
  public void test_queryQualifications_26()  throws Throwable  {
      //caseID:38f4ebdd5974ad969a3025cd98354a68
      //CoveredLines: [45, 542, 543, 548, 549, 550]
      //Assert: assertEquals(0, (int)method_result);
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      Integer integer0 = new Integer(1);
      Long long0 = new Long(1);
      //mock consumerDTO0
      ConsumerDTO consumerDTO0 = mock(ConsumerDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(consumerDTO0).getId();
      doReturn(integer0).when(consumerDTO0).getIsBindCard();
      //mock restResponse0
      RestResponse<ConsumerDTO> restResponse0 = (RestResponse<ConsumerDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumerDTO0).when(restResponse0).getResult();
      //mock consumerApiAgent0
      ConsumerApiAgent consumerApiAgent0 = mock(ConsumerApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(consumerApiAgent0).getCurrentLoginConsumer();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(projectMapper0).selectCount(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "consumerApiAgent", (Object) consumerApiAgent0);
      
      //Call method: queryQualifications
      Integer integer1 = projectServiceImpl0.queryQualifications();
      
      //Test Result Assert
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 9000)
  public void test_queryTendersByProjectId_27()  throws Throwable  {
      //caseID:93c97404c2e499a50682c23723b6be9f
      //CoveredLines: [45, 336, 337, 338, 339, 340, 341, 342, 343, 345]
      //Input_0_Long: 0L
      //Assert: assertFalse(method_result.isEmpty());
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      LinkedList<Tender> linkedList0 = new LinkedList<Tender>();
      //mock tender0
      Tender tender0 = mock(Tender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(tender0);
      //mock tenderMapper0
      TenderMapper tenderMapper0 = mock(TenderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(tenderMapper0).selectList(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "tenderMapper", (Object) tenderMapper0);
      Long long0 = new Long(0L);
      
      //Call method: queryTendersByProjectId
      List<TenderOverviewDTO> list0 = projectServiceImpl0.queryTendersByProjectId(long0);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 9000)
  public void test_updateProjectStatusAndStartRepayment_28()  throws Throwable  {
      //caseID:d4c281fadf56726a4d85017c823dac85
      //CoveredLines: [45, 64, 65]
      //Input_0_Project: {setProjectStatus=project0}
      //Assert: assertTrue(method_result);
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(projectMapper0).updateById(any(com.wanxin.transaction.entity.Project.class));
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock project1
      Project project1 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(project0).when(project1).setProjectStatus(anyString());
      
      //Call method: updateProjectStatusAndStartRepayment
      Boolean boolean0 = projectServiceImpl0.updateProjectStatusAndStartRepayment(project1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_updateProjectStatusAndStartRepayment_29()  throws Throwable  {
      //caseID:b5a178ab03273d12eeb07752b2f3e10f
      //CoveredLines: [45, 64, 65]
      //Input_0_Project: {}
      //Assert: assertFalse(method_result);
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock projectMapper0
      ProjectMapper projectMapper0 = mock(ProjectMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "projectMapper", (Object) projectMapper0);
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateProjectStatusAndStartRepayment
      Boolean boolean0 = projectServiceImpl0.updateProjectStatusAndStartRepayment(project0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_updateTenderStatusAlreadyLoan_30()  throws Throwable  {
      //caseID:3349d2b8c5951aebf2ee2d039ca66175
      //CoveredLines: [45, 184, 186, 188, 189, 190]
      //Input_0_List<com.wanxin.transaction.entity.Tender>: stack0
      
      ProjectServiceImpl projectServiceImpl0 = new ProjectServiceImpl();
      //mock tenderMapper0
      TenderMapper tenderMapper0 = mock(TenderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ProjectServiceImpl.class, projectServiceImpl0, "tenderMapper", (Object) tenderMapper0);
      Stack<Tender> stack0 = new Stack<Tender>();
      //mock tender0
      Tender tender0 = mock(Tender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stack0.add(tender0);
      
      //Call method: updateTenderStatusAlreadyLoan
      PrivateAccess.callMethod((Class<ProjectServiceImpl>) ProjectServiceImpl.class, projectServiceImpl0, "updateTenderStatusAlreadyLoan", (Object) stack0, (Class<?>) List.class);
      
      //Test Result Assert
      assertFalse(stack0.isEmpty());
  }
}
