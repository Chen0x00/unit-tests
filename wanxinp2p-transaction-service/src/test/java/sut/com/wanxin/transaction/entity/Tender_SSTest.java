/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.transaction.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.transaction.entity.Tender;
import java.math.BigDecimal;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class Tender_SSTest extends Tender_SSTest_scaffolding {
// allCoveredLines:[23, 26, 35, 41, 47, 53, 59, 65, 71, 77, 84, 90, 96, 102, 108, 114]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:3223ff61e174721818d16cf7f1493d8b
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26]
      //Input_0_Object: tender0
      //Assert: assertTrue(method_result);
      
      Tender tender0 = new Tender();
      
      //Call method: equals
      boolean boolean0 = tender0.equals(tender0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:481978394c6ce8b3911c5969135a7433
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26]
      //Input_0_Object: )
      //Assert: assertFalse(method_result);
      
      Tender tender0 = new Tender();
      
      //Call method: equals
      boolean boolean0 = tender0.equals(")");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:70ed00a799c7fb554ccd70e452a335d5
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26, 35, 41, 47, 53, 59, 65, 71, 77]
      //Input_0_Object: tender2
      //Assert: assertFalse(method_result);
      
      Tender tender0 = new Tender();
      Tender tender1 = new Tender();
      
      //Test Result Assert
      assertTrue(tender1.equals((Object)tender0));
      
      
      Tender tender2 = tender1.setTenderStatus("Root bean: ");
      
      //Call method: equals
      boolean boolean0 = tender0.equals(tender2);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:6642807bf037285507b63da5b60ebea0
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26, 35, 41, 47, 53, 59, 65, 71, 77, 84, 90, 96, 102, 108, 114]
      //Input_0_Object: tender1
      //Assert: assertTrue(method_result);
      
      Tender tender0 = new Tender();
      Tender tender1 = new Tender();
      
      //Call method: equals
      boolean boolean0 = tender0.equals(tender1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_04()  throws Throwable  {
      //caseID:290e578eda0a2385dfa7e2a5aa9cd57e
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26, 35, 41, 47, 53, 59, 65, 71, 77, 84, 90, 96, 102, 108, 114]
      //Input_0_Object: tender0
      //Assert: assertTrue(method_result);
      
      Tender tender0 = new Tender();
      Tender tender1 = new Tender();
      
      //Call method: equals
      boolean boolean0 = tender1.equals(tender0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_05()  throws Throwable  {
      //caseID:c187c9325a951a92307bd27703a4abfa
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26, 35, 41, 47, 53, 59, 65, 71, 77, 84, 90, 96, 102, 108, 114]
      
      Tender tender0 = new Tender();
      
      //Call method: hashCode
      tender0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAmount_06()  throws Throwable  {
      //caseID:a67029afd9c18a42224c1bb7d5f1719a
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_BigDecimal: 172L
      //Assert: assertSame(tender0, method_result);
      
      Tender tender0 = new Tender();
      BigDecimal bigDecimal0 = new BigDecimal(172L);
      
      //Call method: setAmount
      Tender tender1 = tender0.setAmount(bigDecimal0);
      
      //Test Result Assert
      assertSame(tender0, tender1);
  }

  @Test(timeout = 9000)
  public void test_setConsumerId_07()  throws Throwable  {
      //caseID:202f73651e29d4ed8b579d09840c2907
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Long: 741L
      //Assert: assertNull(method_result.getUserNo());
      
      Tender tender0 = new Tender();
      Long long0 = new Long(741L);
      
      //Call method: setConsumerId
      Tender tender1 = tender0.setConsumerId(long0);
      
      //Test Result Assert
      assertNull(tender1.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setConsumerUsername_08()  throws Throwable  {
      //caseID:0a7f1afc35289a0a93c00507bf3048d9
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: 
      //Assert: assertNull(method_result.getProjectId());
      
      Tender tender0 = new Tender();
      
      //Call method: setConsumerUsername
      Tender tender1 = tender0.setConsumerUsername("");
      
      //Test Result Assert
      assertNull(tender1.getProjectId());
  }

  @Test(timeout = 9000)
  public void test_setCreateDate_09()  throws Throwable  {
      //caseID:94d51a8ebd0a116f9c2b5a85b66c8792
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Date: {toString=\"No 'messageSource' bean, using [\"}
      //Assert: assertNull(method_result.getUserNo());
      
      Tender tender0 = new Tender();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("No 'messageSource' bean, using [").when(date0).toString();
      
      //Call method: setCreateDate
      Tender tender1 = tender0.setCreateDate(date0);
      
      //Test Result Assert
      assertNull(tender1.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setId_10()  throws Throwable  {
      //caseID:7b5af470618457263020207119ffbfa9
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result.getProjectPeriod());
      
      Tender tender0 = new Tender();
      Long long0 = new Long(0L);
      
      //Call method: setId
      Tender tender1 = tender0.setId(long0);
      
      //Test Result Assert
      assertNull(tender1.getProjectPeriod());
  }

  @Test(timeout = 9000)
  public void test_setProjectAnnualRate_11()  throws Throwable  {
      //caseID:564395fa3911dd3ac60bf876a23ed80e
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_BigDecimal: 2067L
      //Assert: assertNull(method_result.getConsumerUsername());
      
      Tender tender0 = new Tender();
      BigDecimal bigDecimal0 = new BigDecimal(2067L);
      
      //Call method: setProjectAnnualRate
      Tender tender1 = tender0.setProjectAnnualRate(bigDecimal0);
      
      //Test Result Assert
      assertNull(tender1.getConsumerUsername());
  }

  @Test(timeout = 9000)
  public void test_setProjectId_12()  throws Throwable  {
      //caseID:f6a9f7a323fded653195e73c7dab328c
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Long: 1000L
      //Assert: assertNull(method_result.getTenderStatus());
      
      Tender tender0 = new Tender();
      Long long0 = new Long(1000L);
      
      //Call method: setProjectId
      Tender tender1 = tender0.setProjectId(long0);
      
      //Test Result Assert
      assertNull(tender1.getTenderStatus());
  }

  @Test(timeout = 9000)
  public void test_setProjectName_13()  throws Throwable  {
      //caseID:31884771c2d12868fa214212162e0cab
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: 1.0
      //Assert: assertNull(method_result.getUserNo());
      
      Tender tender0 = new Tender();
      
      //Call method: setProjectName
      Tender tender1 = tender0.setProjectName("1.0");
      
      //Test Result Assert
      assertNull(tender1.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setProjectNo_14()  throws Throwable  {
      //caseID:66cc0b8928ee53eddf16fe4c66bc7ac7
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: , createDate=
      //Assert: assertSame(tender0, method_result);
      
      Tender tender0 = new Tender();
      
      //Call method: setProjectNo
      Tender tender1 = tender0.setProjectNo(", createDate=");
      
      //Test Result Assert
      assertSame(tender0, tender1);
  }

  @Test(timeout = 9000)
  public void test_setProjectPeriod_15()  throws Throwable  {
      //caseID:303e17989ce472758f3fca27730a2bc0
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Integer: 59
      //Assert: assertSame(method_result, tender0);
      
      Tender tender0 = new Tender();
      Integer integer0 = new Integer(59);
      
      //Call method: setProjectPeriod
      Tender tender1 = tender0.setProjectPeriod(integer0);
      
      //Test Result Assert
      assertSame(tender1, tender0);
  }

  @Test(timeout = 9000)
  public void test_setRequestNo_16()  throws Throwable  {
      //caseID:d7af42e5d43d7123af8254790de4d3e8
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: 
      //Assert: assertSame(method_result, tender0);
      
      Tender tender0 = new Tender();
      
      //Call method: setRequestNo
      Tender tender1 = tender0.setRequestNo("");
      
      //Test Result Assert
      assertSame(tender1, tender0);
  }

  @Test(timeout = 9000)
  public void test_setStatus_17()  throws Throwable  {
      //caseID:a0bf72fd21e4958152256781bb127a7a
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Integer: 4089
      //Assert: assertSame(tender0, method_result);
      
      Tender tender0 = new Tender();
      Integer integer0 = new Integer(4089);
      
      //Call method: setStatus
      Tender tender1 = tender0.setStatus(integer0);
      
      //Test Result Assert
      assertSame(tender0, tender1);
  }

  @Test(timeout = 9000)
  public void test_setUserNo_18()  throws Throwable  {
      //caseID:d6eb1c4ed9f1edcec76a388b816379a4
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: gB<t&
      //Assert: assertNull(method_result.getConsumerUsername());
      
      Tender tender0 = new Tender();
      
      //Call method: setUserNo
      Tender tender1 = tender0.setUserNo("gB<t&");
      
      //Test Result Assert
      assertNull(tender1.getConsumerUsername());
  }

  @Test(timeout = 9000)
  public void test_toString_19()  throws Throwable  {
      //caseID:a1cf65d94d2f2f8bbc518012ccc7ab49
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 35, 41, 47, 53, 59, 65, 71, 77, 84, 90, 96, 102, 108, 114]
      //Assert: assertEquals("Tender(id=null, consumerId=null, consumerUsername=null, userNo=null, projectId=null, projectNo=null, amount=null, tenderStatus=null, createDate=null, requestNo=null, status=null, projectName=null, projectPeriod=null, projectAnnualRate=null)", method_result);
      
      Tender tender0 = new Tender();
      
      //Call method: toString
      String string0 = tender0.toString();
      
      //Test Result Assert
      assertEquals("Tender(id=null, consumerId=null, consumerUsername=null, userNo=null, projectId=null, projectNo=null, amount=null, tenderStatus=null, createDate=null, requestNo=null, status=null, projectName=null, projectPeriod=null, projectAnnualRate=null)", string0);
  }
}
