/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.transaction.interceptor;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.transaction.interceptor.TokenInterceptor;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class TokenInterceptor_SSTest extends TokenInterceptor_SSTest_scaffolding {
// allCoveredLines:[22, 25, 26, 27, 29, 31]

  @Test(timeout = 9000)
  public void test_preHandle_0()  throws Throwable  {
      //caseID:2a39d07d4423fad598d5d8572ea1e9cd
      //CoveredLines: [22, 25, 26, 31]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_Object: {}
      //Assert: assertTrue(method_result);
      
      TokenInterceptor tokenInterceptor0 = new TokenInterceptor();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: preHandle
      boolean boolean0 = tokenInterceptor0.preHandle(httpServletRequest0, httpServletResponse0, httpServletRequest0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_preHandle_1()  throws Throwable  {
      //caseID:3c07414e311e47786492286ade1fe72f
      //CoveredLines: [22, 25, 26, 27, 29, 31]
      //Input_0_HttpServletRequest: {getParameter=\"fW\"}
      //Input_1_HttpServletResponse: {}
      //Input_2_Object: {}
      //Assert: assertTrue(method_result);
      
      TokenInterceptor tokenInterceptor0 = new TokenInterceptor();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("fW").when(httpServletRequest0).getParameter(anyString());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: preHandle
      boolean boolean0 = tokenInterceptor0.preHandle(httpServletRequest0, httpServletResponse0, httpServletResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }
}
