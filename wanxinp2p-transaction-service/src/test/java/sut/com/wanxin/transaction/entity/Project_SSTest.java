/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.transaction.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.transaction.entity.Project;
import java.math.BigDecimal;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class Project_SSTest extends Project_SSTest_scaffolding {
// allCoveredLines:[23, 26, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101, 107, 118, 125, 131, 137, 143, 149]

  @Test(timeout = 9000)
  public void test_canEqual_00()  throws Throwable  {
      //caseID:850d1de9b353e3c72cda562d40a4438e
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26]
      //Input_0_Object: , requestNo=
      //Assert: assertFalse(method_result);
      
      Project project0 = new Project();
      
      //Call method: canEqual
      boolean boolean0 = (boolean)PrivateAccess.callMethod((Class<Project>) Project.class, project0, "canEqual", (Object) ", requestNo=", (Class<?>) Object.class);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:951df431f4552619d83f0806ce436b11
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26]
      //Input_0_Object: project0
      //Assert: assertTrue(method_result);
      
      Project project0 = new Project();
      
      //Call method: equals
      boolean boolean0 = project0.equals(project0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:c7b43497abcd95768399d3c1907640f5
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26]
      //Input_0_Object: 43
      //Assert: assertFalse(method_result);
      
      Project project0 = new Project();
      
      //Call method: equals
      boolean boolean0 = project0.equals("43");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_03()  throws Throwable  {
      //caseID:4a0c26f6738515b4074ff0d2418ef74d
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101, 107, 118, 125, 131, 137, 143, 149]
      
      Project project0 = new Project();
      
      //Call method: hashCode
      project0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAmount_04()  throws Throwable  {
      //caseID:ae122b316772103dda5d0dca6fb5b51d
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_BigDecimal: BigDecimal.ONE
      //Assert: assertSame(project0, method_result);
      
      Project project0 = new Project();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setAmount
      Project project1 = project0.setAmount(bigDecimal0);
      
      //Test Result Assert
      assertSame(project0, project1);
  }

  @Test(timeout = 9000)
  public void test_setAnnualRate_05()  throws Throwable  {
      //caseID:988f86b34d2bc1dbf50639d882885ea6
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_BigDecimal: BigDecimal.ZERO
      //Assert: assertNull(method_result.getStatus());
      
      Project project0 = new Project();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      //Call method: setAnnualRate
      Project project1 = project0.setAnnualRate(bigDecimal0);
      
      //Test Result Assert
      assertNull(project1.getStatus());
  }

  @Test(timeout = 9000)
  public void test_setBorrowerAnnualRate_06()  throws Throwable  {
      //caseID:b98a73d5f16e989558d484e3b1b38db3
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_BigDecimal: BigDecimal.ZERO
      //Assert: assertSame(project0, method_result);
      
      Project project0 = new Project();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      //Call method: setBorrowerAnnualRate
      Project project1 = project0.setBorrowerAnnualRate(bigDecimal0);
      
      //Test Result Assert
      assertSame(project0, project1);
  }

  @Test(timeout = 9000)
  public void test_setCommissionAnnualRate_07()  throws Throwable  {
      //caseID:9de17bee0cf44f47ffd42546958bd832
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_BigDecimal: BigDecimal.TEN
      //Assert: assertSame(project0, method_result);
      
      Project project0 = new Project();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setCommissionAnnualRate
      Project project1 = project0.setCommissionAnnualRate(bigDecimal0);
      
      //Test Result Assert
      assertSame(project0, project1);
  }

  @Test(timeout = 9000)
  public void test_setConsumerId_08()  throws Throwable  {
      //caseID:0f8d496400a4ad093a2782aa95bff12e
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Long: 1801L
      //Assert: assertSame(project0, method_result);
      
      Project project0 = new Project();
      Long long0 = new Long(1801L);
      
      //Call method: setConsumerId
      Project project1 = project0.setConsumerId(long0);
      
      //Test Result Assert
      assertSame(project0, project1);
  }

  @Test(timeout = 9000)
  public void test_setCreateDate_09()  throws Throwable  {
      //caseID:f662d652515ddb9ecfa7816985a78938
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Date: {toString=\"com.google.common.base.CharMatcher$1\"}
      //Assert: assertNull(method_result.getProjectNo());
      
      Project project0 = new Project();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.google.common.base.CharMatcher$1").when(date0).toString();
      
      //Call method: setCreateDate
      Project project1 = project0.setCreateDate(date0);
      
      //Test Result Assert
      assertNull(project1.getProjectNo());
  }

  @Test(timeout = 9000)
  public void test_setDescription_10()  throws Throwable  {
      //caseID:8992c0588ca57e616cc15ee59e2a28a7
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: DV+
      //Assert: assertNull(method_result.getType());
      
      Project project0 = new Project();
      
      //Call method: setDescription
      Project project1 = project0.setDescription("DV+");
      
      //Test Result Assert
      assertNull(project1.getType());
  }

  @Test(timeout = 9000)
  public void test_setId_11()  throws Throwable  {
      //caseID:da917b53d815fe54ce4170db0f93c643
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result.getConsumerId());
      
      Project project0 = new Project();
      Long long0 = new Long(0L);
      
      //Call method: setId
      Project project1 = project0.setId(long0);
      
      //Test Result Assert
      assertNull(project1.getConsumerId());
  }

  @Test(timeout = 9000)
  public void test_setIsAssignment_12()  throws Throwable  {
      //caseID:5cfd9eb2deefc08718e1720c0b03c4f5
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Integer: (-1)
      //Assert: assertNull(method_result.getRepaymentWay());
      
      Project project0 = new Project();
      Integer integer0 = new Integer((-1));
      
      //Call method: setIsAssignment
      Project project1 = project0.setIsAssignment(integer0);
      
      //Test Result Assert
      assertNull(project1.getRepaymentWay());
  }

  @Test(timeout = 9000)
  public void test_setModifyDate_13()  throws Throwable  {
      //caseID:5c6c8db9dc97e02b56c56f2cc7346dd7
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Date: {}
      //Assert: assertSame(method_result, project0);
      
      Project project0 = new Project();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setModifyDate
      Project project1 = project0.setModifyDate(date0);
      
      //Test Result Assert
      assertSame(project1, project0);
  }

  @Test(timeout = 9000)
  public void test_setName_14()  throws Throwable  {
      //caseID:35d234e0d151d538168a01e1836f5a26
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: , modifyDate=
      //Assert: assertNull(method_result.getProjectNo());
      
      Project project0 = new Project();
      
      //Call method: setName
      Project project1 = project0.setName(", modifyDate=");
      
      //Test Result Assert
      assertNull(project1.getProjectNo());
  }

  @Test(timeout = 9000)
  public void test_setPeriod_15()  throws Throwable  {
      //caseID:93cd2b9595eaeb0ef82d0e6a5ea72798
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Integer: 1
      //Assert: assertEquals(1, (int)method_result.getPeriod());
      
      Project project0 = new Project();
      Integer integer0 = new Integer(1);
      
      //Call method: setPeriod
      Project project1 = project0.setPeriod(integer0);
      
      //Test Result Assert
      assertEquals(1, (int)project1.getPeriod());
  }

  @Test(timeout = 9000)
  public void test_setProjectNo_16()  throws Throwable  {
      //caseID:4a9d2317aca7e7aa0d9153f8620b8fc0
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: (E3Y>
      //Assert: assertNull(method_result.getUserNo());
      
      Project project0 = new Project();
      
      //Call method: setProjectNo
      Project project1 = project0.setProjectNo("(E3Y>");
      
      //Test Result Assert
      assertNull(project1.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setProjectStatus_17()  throws Throwable  {
      //caseID:eaf99373fa7cbd6545549f50c4ec261d
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: 1.0
      //Assert: assertEquals("1.0", method_result.getProjectStatus());
      
      Project project0 = new Project();
      
      //Call method: setProjectStatus
      Project project1 = project0.setProjectStatus("1.0");
      
      //Test Result Assert
      assertEquals("1.0", project1.getProjectStatus());
  }

  @Test(timeout = 9000)
  public void test_setRepaymentWay_18()  throws Throwable  {
      //caseID:d0431626a39f7fd834e64c74d49b781d
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: 1
      //Assert: assertNull(method_result.getStatus());
      
      Project project0 = new Project();
      
      //Call method: setRepaymentWay
      Project project1 = project0.setRepaymentWay("1");
      
      //Test Result Assert
      assertNull(project1.getStatus());
  }

  @Test(timeout = 9000)
  public void test_setRequestNo_19()  throws Throwable  {
      //caseID:485c4d6dc001f885c1ff3be7eda41667
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: , description=
      //Assert: assertNull(method_result.getType());
      
      Project project0 = new Project();
      
      //Call method: setRequestNo
      Project project1 = project0.setRequestNo(", description=");
      
      //Test Result Assert
      assertNull(project1.getType());
  }

  @Test(timeout = 9000)
  public void test_setStatus_20()  throws Throwable  {
      //caseID:b149090624ed72cb37e2d0c7a4adf92b
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_Integer: 2406
      //Assert: assertNull(method_result.getPeriod());
      
      Project project0 = new Project();
      Integer integer0 = new Integer(2406);
      
      //Call method: setStatus
      Project project1 = project0.setStatus(integer0);
      
      //Test Result Assert
      assertNull(project1.getPeriod());
  }

  @Test(timeout = 9000)
  public void test_setType_21()  throws Throwable  {
      //caseID:b474455d243589f342bbe73ef0ef0d8f
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: 
      //Assert: assertNull(method_result.getName());
      
      Project project0 = new Project();
      
      //Call method: setType
      Project project1 = project0.setType("");
      
      //Test Result Assert
      assertNull(project1.getName());
  }

  @Test(timeout = 9000)
  public void test_setUserNo_22()  throws Throwable  {
      //caseID:43dfcf667516c8420fa3659994bcf6bd
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]
      //Input_0_String: 0
      //Assert: assertSame(project0, method_result);
      
      Project project0 = new Project();
      
      //Call method: setUserNo
      Project project1 = project0.setUserNo("0");
      
      //Test Result Assert
      assertSame(project0, project1);
  }

  @Test(timeout = 9000)
  public void test_toString_23()  throws Throwable  {
      //caseID:e4559c59c5f7e2627a00ea6875541f5a
      //CoveredLines: [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101, 107, 118, 125, 131, 137, 143, 149]
      //Assert: assertEquals("Project(id=null, consumerId=null, userNo=null, projectNo=null, name=null, description=null, type=null, period=null, annualRate=null, borrowerAnnualRate=null, commissionAnnualRate=null, repaymentWay=null, amount=null, projectStatus=null, createDate=null, status=null, isAssignment=null, requestNo=null, modifyDate=null)", method_result);
      
      Project project0 = new Project();
      
      //Call method: toString
      String string0 = project0.toString();
      
      //Test Result Assert
      assertEquals("Project(id=null, consumerId=null, userNo=null, projectNo=null, name=null, description=null, type=null, period=null, annualRate=null, borrowerAnnualRate=null, commissionAnnualRate=null, repaymentWay=null, amount=null, projectStatus=null, createDate=null, status=null, isAssignment=null, requestNo=null, modifyDate=null)", string0);
  }
}
