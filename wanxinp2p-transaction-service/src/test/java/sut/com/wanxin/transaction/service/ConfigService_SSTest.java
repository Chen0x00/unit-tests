/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.transaction.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.ctrip.framework.apollo.Config;
import com.wanxin.transaction.service.ConfigService;
import java.math.BigDecimal;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ConfigService_SSTest extends ConfigService_SSTest_scaffolding {
// allCoveredLines:[21, 29, 36, 43, 52, 61, 70, 80]

  @Test(timeout = 9000)
  public void test_getAnnualRate_0()  throws Throwable  {
      //caseID:eaa2cbfcc31083435e013d2b9f0451d4
      //CoveredLines: [21, 36, 43, 52, 61, 70]
      //Assert: assertEquals((byte) (-1), method_result.byteValue());
      
      ConfigService configService0 = new ConfigService();
      //mock config0
      Config config0 = mock(Config.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(config0).getProperty(nullable(java.lang.String.class) , nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) ConfigService.class, configService0, "config", (Object) config0);
      
      //Call method: getAnnualRate
      BigDecimal bigDecimal0 = configService0.getAnnualRate();
      
      //Test Result Assert
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 9000)
  public void test_getMiniInvestmentAmount_1()  throws Throwable  {
      //caseID:4f8f2811dbb22620060cecd00aa7c29c
      //CoveredLines: [21, 80]
      //Assert: assertEquals((short)1, method_result.shortValue());
      
      ConfigService configService0 = new ConfigService();
      //mock config0
      Config config0 = mock(Config.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(config0).getProperty(anyString() , anyString());
      
      PrivateAccess.setVariable((Class<?>) ConfigService.class, configService0, "config", (Object) config0);
      
      //Call method: getMiniInvestmentAmount
      BigDecimal bigDecimal0 = configService0.getMiniInvestmentAmount();
      
      //Test Result Assert
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 9000)
  public void test_getMiscarryDays_2()  throws Throwable  {
      //caseID:254e696f929e71ffd6f7744d3e9572ea
      //CoveredLines: [21, 29]
      //Assert: assertEquals(1, (int)method_result);
      
      ConfigService configService0 = new ConfigService();
      //mock config0
      Config config0 = mock(Config.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(config0).getProperty(anyString() , anyString());
      
      PrivateAccess.setVariable((Class<?>) ConfigService.class, configService0, "config", (Object) config0);
      
      //Call method: getMiscarryDays
      Integer integer0 = configService0.getMiscarryDays();
      
      //Test Result Assert
      assertEquals(1, (int)integer0);
  }
}
