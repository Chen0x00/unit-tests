/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.transaction.message;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.wanxin.transaction.entity.Project;
import com.wanxin.transaction.message.TransactionListenerImpl;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.messaging.Message;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class TransactionListenerImpl_SSTest extends TransactionListenerImpl_SSTest_scaffolding {
// allCoveredLines:[23, 39, 62]

  @Test(timeout = 9000)
  public void test_checkLocalTransaction_0()  throws Throwable  {
      //caseID:6b27e08207280a9dd685ca915b529323
      //CoveredLines: [23, 62]
      //Input_0_Message: {getPayload=1}
      
      TransactionListenerImpl transactionListenerImpl0 = new TransactionListenerImpl();
      Integer integer0 = new Integer(1);
      //mock message0
      Message<Integer> message0 = (Message<Integer>) mock(Message.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(message0).getPayload();
      
      //Call method: checkLocalTransaction
      // Undeclared exception!
      try { 
        transactionListenerImpl0.checkLocalTransaction(message0);
      } catch(Throwable e) {
         verifyException("com.wanxin.transaction.message.TransactionListenerImpl", e);
         assertEquals("java.lang.ClassCastException", e.getClass().getName());
         assertEquals("java.lang.Integer cannot be cast to [B", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_executeLocalTransaction_1()  throws Throwable  {
      //caseID:a7b0232b4e66a2e3e3ef47ef8e9263fe
      //CoveredLines: [23, 39]
      //Input_0_Message: {getPayload=project0}
      //Input_1_Object: {getPayload=project0}
      
      TransactionListenerImpl transactionListenerImpl0 = new TransactionListenerImpl();
      //mock project0
      Project project0 = mock(Project.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock message0
      Message<Project> message0 = (Message<Project>) mock(Message.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(project0).when(message0).getPayload();
      
      //Call method: executeLocalTransaction
      // Undeclared exception!
      try { 
        transactionListenerImpl0.executeLocalTransaction(message0, message0);
      } catch(Throwable e) {
         verifyException("com.wanxin.transaction.message.TransactionListenerImpl", e);
         assertEquals("java.lang.ClassCastException", e.getClass().getName());
      }
  }
}
