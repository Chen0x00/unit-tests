/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.config;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.wanxin.uaa.config.AuthorizationServer;
import javax.sql.DataSource;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.ClientDetailsService;
import org.springframework.security.oauth2.provider.code.AuthorizationCodeServices;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class AuthorizationServer_SSTest extends AuthorizationServer_SSTest_scaffolding {
// allCoveredLines:[41, 63, 68, 69, 70, 75, 76, 77, 78, 80, 81, 82, 85, 87, 88, 93, 99, 100, 104, 109, 110, 111, 112, 113, 114, 119, 122, 123, 124, 125, 126, 127, 128, 133, 163, 164, 165, 167, 169]

  @Test(timeout = 9000)
  public void test_authorizationCodeServices_0()  throws Throwable  {
      //caseID:262a3122eefcecbfa5040c9a763dbd3a
      //CoveredLines: [41, 93]
      //Input_0_DataSource: {}
      //Assert: assertNotNull(method_result);
      
      AuthorizationServer authorizationServer0 = new AuthorizationServer();
      //mock dataSource0
      DataSource dataSource0 = mock(DataSource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: authorizationCodeServices
      AuthorizationCodeServices authorizationCodeServices0 = authorizationServer0.authorizationCodeServices(dataSource0);
      
      //Test Result Assert
      assertNotNull(authorizationCodeServices0);
  }

  @Test(timeout = 9000)
  public void test_clientDetailsService_1()  throws Throwable  {
      //caseID:f1bc45bed39029147ad4136fe2761d29
      //CoveredLines: [41, 63, 68, 69, 70]
      //Input_0_DataSource: {}
      //Assert: assertNotNull(method_result);
      
      AuthorizationServer authorizationServer0 = new AuthorizationServer();
      //mock dataSource0
      DataSource dataSource0 = mock(DataSource.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: clientDetailsService
      ClientDetailsService clientDetailsService0 = authorizationServer0.clientDetailsService(dataSource0);
      
      //Test Result Assert
      assertNotNull(clientDetailsService0);
  }

  @Test(timeout = 9000)
  public void test_configure_2()  throws Throwable  {
      //caseID:7289d6251fde4d68d9baa9dcc9bf7e7a
      //CoveredLines: [41, 75, 76, 77, 78, 80, 81, 82, 85, 87, 88, 104, 109, 110, 111, 112, 113, 114, 119, 122, 123, 124, 125, 126, 127, 128, 133]
      //Input_0_AuthorizationServerEndpointsConfigurer: {authenticationManager=authorizationServerEndpointsConfigurer6}
      
      AuthorizationServer authorizationServer0 = new AuthorizationServer();
      //mock authorizationServerEndpointsConfigurer0
      AuthorizationServerEndpointsConfigurer authorizationServerEndpointsConfigurer0 = mock(AuthorizationServerEndpointsConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock authorizationServerEndpointsConfigurer1
      AuthorizationServerEndpointsConfigurer authorizationServerEndpointsConfigurer1 = mock(AuthorizationServerEndpointsConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(authorizationServerEndpointsConfigurer0).when(authorizationServerEndpointsConfigurer1).allowedTokenEndpointRequestMethods(any(org.springframework.http.HttpMethod[].class));
      //mock authorizationServerEndpointsConfigurer2
      AuthorizationServerEndpointsConfigurer authorizationServerEndpointsConfigurer2 = mock(AuthorizationServerEndpointsConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(authorizationServerEndpointsConfigurer1).when(authorizationServerEndpointsConfigurer2).pathMapping(anyString() , anyString());
      //mock authorizationServerEndpointsConfigurer3
      AuthorizationServerEndpointsConfigurer authorizationServerEndpointsConfigurer3 = mock(AuthorizationServerEndpointsConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(authorizationServerEndpointsConfigurer2).when(authorizationServerEndpointsConfigurer3).pathMapping(anyString() , anyString());
      //mock authorizationServerEndpointsConfigurer4
      AuthorizationServerEndpointsConfigurer authorizationServerEndpointsConfigurer4 = mock(AuthorizationServerEndpointsConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(authorizationServerEndpointsConfigurer3).when(authorizationServerEndpointsConfigurer4).tokenServices(any(org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices.class));
      //mock authorizationServerEndpointsConfigurer5
      AuthorizationServerEndpointsConfigurer authorizationServerEndpointsConfigurer5 = mock(AuthorizationServerEndpointsConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(authorizationServerEndpointsConfigurer4).when(authorizationServerEndpointsConfigurer5).userApprovalHandler(any(org.springframework.security.oauth2.provider.approval.UserApprovalHandler.class));
      //mock authorizationServerEndpointsConfigurer6
      AuthorizationServerEndpointsConfigurer authorizationServerEndpointsConfigurer6 = mock(AuthorizationServerEndpointsConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(authorizationServerEndpointsConfigurer5).when(authorizationServerEndpointsConfigurer6).authorizationCodeServices(any(org.springframework.security.oauth2.provider.code.AuthorizationCodeServices.class));
      //mock authorizationServerEndpointsConfigurer7
      AuthorizationServerEndpointsConfigurer authorizationServerEndpointsConfigurer7 = mock(AuthorizationServerEndpointsConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(authorizationServerEndpointsConfigurer6).when(authorizationServerEndpointsConfigurer7).authenticationManager(any(org.springframework.security.authentication.AuthenticationManager.class));
      
      //Call method: configure
      // Undeclared exception!
      try { 
        authorizationServer0.configure(authorizationServerEndpointsConfigurer7);
      } catch(Throwable e) {
         verifyException("com.wanxin.uaa.config.AuthorizationServer", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_configure_3()  throws Throwable  {
      //caseID:c1967b5dc58b9f31e9f2594b1853e182
      //CoveredLines: [41, 99, 100]
      //Input_0_ClientDetailsServiceConfigurer: {}
      
      AuthorizationServer authorizationServer0 = new AuthorizationServer();
      //mock clientDetailsServiceConfigurer0
      ClientDetailsServiceConfigurer clientDetailsServiceConfigurer0 = mock(ClientDetailsServiceConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: configure
      authorizationServer0.configure(clientDetailsServiceConfigurer0);
  }

  @Test(timeout = 9000)
  public void test_configure_4()  throws Throwable  {
      //caseID:dca9de5c17123a464569aeea4e02b6f9
      //CoveredLines: [41, 163, 164, 165, 167, 169]
      //Input_0_AuthorizationServerSecurityConfigurer: {tokenKeyAccess=authorizationServerSecurityConfigurer1}
      
      AuthorizationServer authorizationServer0 = new AuthorizationServer();
      //mock authorizationServerSecurityConfigurer0
      AuthorizationServerSecurityConfigurer authorizationServerSecurityConfigurer0 = mock(AuthorizationServerSecurityConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock authorizationServerSecurityConfigurer1
      AuthorizationServerSecurityConfigurer authorizationServerSecurityConfigurer1 = mock(AuthorizationServerSecurityConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(authorizationServerSecurityConfigurer0).when(authorizationServerSecurityConfigurer1).checkTokenAccess(anyString());
      //mock authorizationServerSecurityConfigurer2
      AuthorizationServerSecurityConfigurer authorizationServerSecurityConfigurer2 = mock(AuthorizationServerSecurityConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(authorizationServerSecurityConfigurer1).when(authorizationServerSecurityConfigurer2).tokenKeyAccess(anyString());
      
      //Call method: configure
      authorizationServer0.configure(authorizationServerSecurityConfigurer2);
  }
}
