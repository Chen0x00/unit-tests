/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.common.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.uaa.common.utils.WebUtils;
import javax.servlet.http.HttpServletRequest;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class WebUtils_SSTest extends WebUtils_SSTest_scaffolding {
// allCoveredLines:[24, 28, 29, 38, 39, 40, 42, 43, 45, 46, 48, 52]

  @Test(timeout = 9000)
  public void test_getIp_0()  throws Throwable  {
      //caseID:ad38bdb0b047675c4719142f60bb11ff
      //CoveredLines: [24]
      //Assert: assertNull(method_result);
      
      
      //Call method: getIp
      String string0 = WebUtils.getIp();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_retrieveClientIp_1()  throws Throwable  {
      //caseID:d59a6a2a551024dd054e14289473ccf6
      //CoveredLines: [38, 39, 42, 45, 48, 52]
      //Input_0_HttpServletRequest: {getHeader=\" but most recen opening is \"}
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals(" but most recen opening is ", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(" but most recen opening is ").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: retrieveClientIp
      String string0 = WebUtils.retrieveClientIp(httpServletRequest0);
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals(" but most recen opening is ", string0);
  }

  @Test(timeout = 9000)
  public void test_retrieveClientIp_2()  throws Throwable  {
      //caseID:a681d9595f02ab5c1e7432564f09a611
      //CoveredLines: [38, 39, 40, 42, 45, 48, 52]
      //Input_0_HttpServletRequest: {getHeader=\"unknown\" \"ConditionalOnBean\"}
      //Assert: assertEquals("ConditionalOnBean", method_result);
      //Assert: assertNotNull(method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("unknown", "ConditionalOnBean").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: retrieveClientIp
      String string0 = WebUtils.retrieveClientIp(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("ConditionalOnBean", string0);
      
      //Test Result Assert
      assertNotNull(string0);
  }

  @Test(timeout = 9000)
  public void test_retrieveClientIp_3()  throws Throwable  {
      //caseID:b9a6083245094c247c96a8c85f66345c
      //CoveredLines: [38, 39, 40, 42, 43, 45, 46, 48, 52]
      //Input_0_HttpServletRequest: {}
      //Assert: assertNull(method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: retrieveClientIp
      String string0 = WebUtils.retrieveClientIp(httpServletRequest0);
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_setIp_4()  throws Throwable  {
      //caseID:5c5a026c22eeb9d174cd7f8d3f0de11b
      //CoveredLines: [28, 29]
      //Input_0_String: Could not find an init method named '
      
      
      //Call method: setIp
      WebUtils.setIp("Could not find an init method named '");
  }
}
