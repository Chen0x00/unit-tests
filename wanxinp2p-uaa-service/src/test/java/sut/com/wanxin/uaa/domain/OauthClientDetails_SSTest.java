/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.uaa.domain.OauthClientDetails;
import java.time.LocalDateTime;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.mock.java.time.MockLocalDateTime;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OauthClientDetails_SSTest extends OauthClientDetails_SSTest_scaffolding {
// allCoveredLines:[16, 17, 33, 67, 74, 75, 78, 82, 83, 87, 91, 95, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 171, 172, 176, 177, 181, 182, 186, 187, 191, 192, 196, 197, 201, 202, 206, 207, 211, 212, 216, 217, 221, 222]

  @Test(timeout = 9000)
  public void test_accessTokenValidity_00()  throws Throwable  {
      //caseID:53820ba903d73c89bced7a636c67917d
      //CoveredLines: [16, 17, 33, 67, 74, 75, 132]
      //Assert: assertFalse(oauthClientDetails0.archived());
      //Assert: assertFalse(oauthClientDetails0.trusted());
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: accessTokenValidity
      oauthClientDetails0.accessTokenValidity();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
  }

  @Test(timeout = 9000)
  public void test_accessTokenValidity_01()  throws Throwable  {
      //caseID:fcf6e520e1cd2985b2c9285cf761c845
      //CoveredLines: [16, 17, 33, 67, 74, 75, 201, 202]
      //Input_0_Integer: 0
      //Assert: assertFalse(method_result.archived());
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      //Assert: assertFalse(method_result.trusted());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      Integer integer0 = new Integer(0);
      
      //Call method: accessTokenValidity
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.accessTokenValidity(integer0);
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
  }

  @Test(timeout = 9000)
  public void test_additionalInformation_02()  throws Throwable  {
      //caseID:ac3566070cb4548c480bf16d16c06117
      //CoveredLines: [16, 17, 33, 67, 74, 75, 140]
      //Assert: assertFalse(oauthClientDetails0.archived());
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      //Assert: assertFalse(oauthClientDetails0.trusted());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: additionalInformation
      oauthClientDetails0.additionalInformation();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
  }

  @Test(timeout = 9000)
  public void test_additionalInformation_03()  throws Throwable  {
      //caseID:bc8a0a71ebccb8a37addeca00ca876c8
      //CoveredLines: [16, 17, 33, 67, 74, 75, 216, 217]
      //Input_0_String: 
      //Assert: assertFalse(method_result.trusted());
      //Assert: assertFalse(method_result.archived());
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: additionalInformation
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.additionalInformation("");
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
  }

  @Test(timeout = 9000)
  public void test_archived_04()  throws Throwable  {
      //caseID:30ffc19b8e3550cfeed86a5d0101cd6a
      //CoveredLines: [16, 17, 33, 67, 74, 75, 100]
      //Assert: assertFalse(method_result);
      //Assert: assertFalse(oauthClientDetails0.trusted());
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: archived
      boolean boolean0 = oauthClientDetails0.archived();
      
      //Test Result Assert
      assertFalse(boolean0);
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
  }

  @Test(timeout = 9000)
  public void test_archived_05()  throws Throwable  {
      //caseID:85fe397683c0947407c82cb4f9402e53
      //CoveredLines: [16, 17, 33, 67, 74, 75, 221, 222]
      //Input_0_boolean: false
      //Assert: assertFalse(method_result.trusted());
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
      
      
      //Call method: archived
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.archived(false);
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
  }

  @Test(timeout = 9000)
  public void test_authorities_06()  throws Throwable  {
      //caseID:a7b40115c419edce4028843823c24393
      //CoveredLines: [16, 17, 33, 67, 74, 75, 128]
      //Assert: assertFalse(oauthClientDetails0.archived());
      //Assert: assertFalse(oauthClientDetails0.trusted());
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: authorities
      oauthClientDetails0.authorities();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
  }

  @Test(timeout = 9000)
  public void test_authorities_07()  throws Throwable  {
      //caseID:b2798783dff16aa22c1e4a5095c4f531
      //CoveredLines: [16, 17, 33, 67, 74, 75, 196, 197]
      //Input_0_String: 'n
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      //Assert: assertFalse(method_result.trusted());
      //Assert: assertFalse(method_result.archived());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: authorities
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.authorities("'n");
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
  }

  @Test(timeout = 9000)
  public void test_authorizedGrantTypes_08()  throws Throwable  {
      //caseID:c5e991a29421eb4b2ef36b06accc0c92
      //CoveredLines: [16, 17, 33, 67, 74, 75, 120]
      //Assert: assertFalse(oauthClientDetails0.archived());
      //Assert: assertFalse(oauthClientDetails0.trusted());
      //Assert: assertEquals("authorization_code,refresh_token", method_result);
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: authorizedGrantTypes
      String string0 = oauthClientDetails0.authorizedGrantTypes();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", string0);
  }

  @Test(timeout = 9000)
  public void test_authorizedGrantTypes_09()  throws Throwable  {
      //caseID:784953edbc754f45652a7cad00e72e5d
      //CoveredLines: [16, 17, 33, 67, 74, 75, 181, 182]
      //Input_0_String: 1.0
      //Assert: assertFalse(method_result.trusted());
      //Assert: assertFalse(method_result.archived());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      
      //Call method: authorizedGrantTypes
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.authorizedGrantTypes("1.0");
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
  }

  @Test(timeout = 9000)
  public void test_autoApprove_10()  throws Throwable  {
      //caseID:95c7bb94df15c9da2acc1ef21b93bb7e
      //CoveredLines: [16, 17, 33, 67, 74, 75, 78]
      //Assert: assertFalse(oauthClientDetails0.trusted());
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      //Assert: assertFalse(oauthClientDetails0.archived());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: autoApprove
      oauthClientDetails0.autoApprove();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
  }

  @Test(timeout = 9000)
  public void test_autoApprove_11()  throws Throwable  {
      //caseID:f17268604e141c90ce660c5fb710562d
      //CoveredLines: [16, 17, 33, 67, 74, 75, 82, 83]
      //Input_0_String: 39
      //Assert: assertFalse(method_result.trusted());
      //Assert: assertFalse(method_result.archived());
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: autoApprove
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.autoApprove("39");
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
  }

  @Test(timeout = 9000)
  public void test_clientId_12()  throws Throwable  {
      //caseID:7089fe7e0f59447281e7df72fe8beb8e
      //CoveredLines: [16, 17, 33, 67, 74, 75, 104]
      //Assert: assertFalse(oauthClientDetails0.trusted());
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      //Assert: assertFalse(oauthClientDetails0.archived());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: clientId
      oauthClientDetails0.clientId();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
  }

  @Test(timeout = 9000)
  public void test_clientId_13()  throws Throwable  {
      //caseID:e198bec6a32dbd462bf2b4cae5f914ff
      //CoveredLines: [16, 17, 33, 67, 74, 75, 166, 167]
      //Input_0_String: X-}
      //Assert: assertFalse(method_result.archived());
      //Assert: assertFalse(method_result.trusted());
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: clientId
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.clientId("X-}");
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
  }

  @Test(timeout = 9000)
  public void test_clientSecret_14()  throws Throwable  {
      //caseID:f93be6901ac534bcf583b533b98bb6b4
      //CoveredLines: [16, 17, 33, 67, 74, 75, 112]
      //Assert: assertFalse(oauthClientDetails0.trusted());
      //Assert: assertFalse(oauthClientDetails0.archived());
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: clientSecret
      oauthClientDetails0.clientSecret();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
  }

  @Test(timeout = 9000)
  public void test_clientSecret_15()  throws Throwable  {
      //caseID:68159c274ea71835c8d82906eb4219b4
      //CoveredLines: [16, 17, 33, 67, 74, 75, 171, 172]
      //Input_0_String: , resourceIds='
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      //Assert: assertFalse(method_result.archived());
      //Assert: assertFalse(method_result.trusted());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: clientSecret
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.clientSecret(", resourceIds='");
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
  }

  @Test(timeout = 9000)
  public void test_createTime_16()  throws Throwable  {
      //caseID:99a60385aba9b68fcee82d7dd6cdd2a0
      //CoveredLines: [16, 17, 33, 67, 74, 75, 91]
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      //Assert: assertFalse(oauthClientDetails0.trusted());
      //Assert: assertFalse(oauthClientDetails0.archived());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: createTime
      oauthClientDetails0.createTime();
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
  }

  @Test(timeout = 9000)
  public void test_createTime_17()  throws Throwable  {
      //caseID:fc0b76319d167325765f1e186f683c03
      //CoveredLines: [16, 17, 33, 67, 74, 75, 95, 96]
      //Input_0_LocalDateTime: localDateTime0
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      //Assert: assertFalse(method_result.trusted());
      //Assert: assertFalse(method_result.archived());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      
      //Call method: createTime
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.createTime(localDateTime0);
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
  }

  @Test(timeout = 9000)
  public void test_refreshTokenValidity_18()  throws Throwable  {
      //caseID:2ca45a978ff158604728e374ae9739d8
      //CoveredLines: [16, 17, 33, 67, 74, 75, 136]
      //Assert: assertFalse(oauthClientDetails0.archived());
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      //Assert: assertFalse(oauthClientDetails0.trusted());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: refreshTokenValidity
      oauthClientDetails0.refreshTokenValidity();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
  }

  @Test(timeout = 9000)
  public void test_refreshTokenValidity_19()  throws Throwable  {
      //caseID:6085ed6b35f2c194f8412d30c7004177
      //CoveredLines: [16, 17, 33, 67, 74, 75, 206, 207]
      //Input_0_Integer: 1024
      //Assert: assertFalse(method_result.trusted());
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      //Assert: assertFalse(method_result.archived());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      Integer integer0 = new Integer(1024);
      
      //Call method: refreshTokenValidity
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.refreshTokenValidity(integer0);
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
  }

  @Test(timeout = 9000)
  public void test_resourceIds_20()  throws Throwable  {
      //caseID:9f306f433af1f7577aa020fd54d3b322
      //CoveredLines: [16, 17, 33, 67, 74, 75, 108]
      //Assert: assertFalse(oauthClientDetails0.archived());
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      //Assert: assertFalse(oauthClientDetails0.trusted());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: resourceIds
      oauthClientDetails0.resourceIds();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
  }

  @Test(timeout = 9000)
  public void test_resourceIds_21()  throws Throwable  {
      //caseID:44eae1b47cc6377ad39f3c8e0191cd7f
      //CoveredLines: [16, 17, 33, 67, 74, 75, 176, 177]
      //Input_0_String: 1
      //Assert: assertFalse(method_result.archived());
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      //Assert: assertFalse(method_result.trusted());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: resourceIds
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.resourceIds("1");
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
  }

  @Test(timeout = 9000)
  public void test_scope_22()  throws Throwable  {
      //caseID:ea23cedb02483be3f3e99a36a6c440f8
      //CoveredLines: [16, 17, 33, 67, 74, 75, 116]
      //Assert: assertFalse(oauthClientDetails0.trusted());
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      //Assert: assertFalse(oauthClientDetails0.archived());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: scope
      oauthClientDetails0.scope();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
  }

  @Test(timeout = 9000)
  public void test_scope_23()  throws Throwable  {
      //caseID:5aecec37422c265324d8e49459853eb7
      //CoveredLines: [16, 17, 33, 67, 74, 75, 186, 187]
      //Input_0_String: , accessTokenValidity=
      //Assert: assertFalse(method_result.trusted());
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      //Assert: assertFalse(method_result.archived());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: scope
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.scope(", accessTokenValidity=");
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
  }

  @Test(timeout = 9000)
  public void test_toString_24()  throws Throwable  {
      //caseID:149046ca24eee74020af3e799451e9a8
      //CoveredLines: [16, 17, 33, 67, 74, 75, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162]
      //Assert: assertEquals("OauthClientDetails{createTime=2014-02-14T20:21:21.320, archived=false, clientId='null', resourceIds='null', clientSecret='null', scope='null', authorizedGrantTypes='authorization_code,refresh_token', webServerRedirectUri='null', authorities='null', accessTokenValidity=null, refreshTokenValidity=null, additionalInformation='null', trusted=false}", method_result);
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: toString
      String string0 = oauthClientDetails0.toString();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("OauthClientDetails{createTime=2014-02-14T20:21:21.320, archived=false, clientId='null', resourceIds='null', clientSecret='null', scope='null', authorizedGrantTypes='authorization_code,refresh_token', webServerRedirectUri='null', authorities='null', accessTokenValidity=null, refreshTokenValidity=null, additionalInformation='null', trusted=false}", string0);
  }

  @Test(timeout = 9000)
  public void test_trusted_25()  throws Throwable  {
      //caseID:fd74cf29469099b4671f01b6a3ae5338
      //CoveredLines: [16, 17, 33, 67, 74, 75, 87]
      //Assert: assertFalse(oauthClientDetails0.archived());
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      //Assert: assertFalse(method_result);
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: trusted
      boolean boolean0 = oauthClientDetails0.trusted();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_trusted_26()  throws Throwable  {
      //caseID:4abc7bcf6da76033e034640a8a71901a
      //CoveredLines: [16, 17, 33, 67, 74, 75, 211, 212]
      //Input_0_boolean: false
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      //Assert: assertFalse(method_result.archived());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
      
      
      //Call method: trusted
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.trusted(false);
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
  }

  @Test(timeout = 9000)
  public void test_webServerRedirectUri_27()  throws Throwable  {
      //caseID:03d5a9a53e3f71ce32ff5f14510a1a31
      //CoveredLines: [16, 17, 33, 67, 74, 75, 124]
      //Assert: assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      //Assert: assertFalse(oauthClientDetails0.archived());
      //Assert: assertFalse(oauthClientDetails0.trusted());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: webServerRedirectUri
      oauthClientDetails0.webServerRedirectUri();
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails0.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.archived());
      
      //Test Result Assert
      assertFalse(oauthClientDetails0.trusted());
  }

  @Test(timeout = 9000)
  public void test_webServerRedirectUri_28()  throws Throwable  {
      //caseID:8d57300e094042ad00885a74b043f064
      //CoveredLines: [16, 17, 33, 67, 74, 75, 191, 192]
      //Input_0_String: U!BQ!~
      //Assert: assertFalse(method_result.archived());
      //Assert: assertEquals("authorization_code,refresh_token", method_result.authorizedGrantTypes());
      //Assert: assertFalse(method_result.trusted());
      
      OauthClientDetails oauthClientDetails0 = new OauthClientDetails();
      
      //Call method: webServerRedirectUri
      OauthClientDetails oauthClientDetails1 = oauthClientDetails0.webServerRedirectUri("U!BQ!~");
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.archived());
      
      //Test Result Assert
      assertEquals("authorization_code,refresh_token", oauthClientDetails1.authorizedGrantTypes());
      
      //Test Result Assert
      assertFalse(oauthClientDetails1.trusted());
  }
}
