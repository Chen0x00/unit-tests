/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.wanxin.uaa.domain.IntegrationUserDetailsAuthenticationHandler;
import com.wanxin.uaa.domain.IntegrationUserDetailsAuthenticationProvider;
import com.wanxin.uaa.domain.IntegrationWebAuthenticationDetails;
import java.util.HashMap;
import java.util.Map;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class IntegrationUserDetailsAuthenticationProvider_SSTest extends IntegrationUserDetailsAuthenticationProvider_SSTest_scaffolding {
// allCoveredLines:[22, 24, 25, 26, 32, 39, 46, 47, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 75, 76, 78]

  @Test(timeout = 9000)
  public void test_additionalAuthenticationChecks_0()  throws Throwable  {
      //caseID:1f88c5a061e3255bbf5883507173f65e
      //CoveredLines: [22, 24, 25, 26, 32]
      //Input_0_org.springframework.security.core.userdetails.UserDetails: {}
      //Input_1_org.springframework.security.authentication.UsernamePasswordAuthenticationToken: {}
      
      //mock integrationUserDetailsAuthenticationHandler0
      IntegrationUserDetailsAuthenticationHandler integrationUserDetailsAuthenticationHandler0 = mock(IntegrationUserDetailsAuthenticationHandler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      IntegrationUserDetailsAuthenticationProvider integrationUserDetailsAuthenticationProvider0 = new IntegrationUserDetailsAuthenticationProvider(integrationUserDetailsAuthenticationHandler0);
      //mock userDetails0
      UserDetails userDetails0 = mock(UserDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock usernamePasswordAuthenticationToken0
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = mock(UsernamePasswordAuthenticationToken.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: additionalAuthenticationChecks
      PrivateAccess.callMethod((Class<IntegrationUserDetailsAuthenticationProvider>) IntegrationUserDetailsAuthenticationProvider.class, integrationUserDetailsAuthenticationProvider0, "additionalAuthenticationChecks", (Object) userDetails0, (Class<?>) UserDetails.class, (Object) usernamePasswordAuthenticationToken0, (Class<?>) UsernamePasswordAuthenticationToken.class);
      
      //Test Result Assert
      assertTrue(integrationUserDetailsAuthenticationProvider0.isHideUserNotFoundExceptions());
  }

  @Test(timeout = 9000)
  public void test_authenticationUser_1()  throws Throwable  {
      //caseID:52d6b3dfb8ec73c1d9b0d268a4fcf66c
      //CoveredLines: [22, 24, 25, 26, 55, 56, 57, 59, 64, 65, 66, 67, 71, 72]
      //Input_0_org.springframework.security.authentication.UsernamePasswordAuthenticationToken: {getDetails=map0}
      
      //mock integrationUserDetailsAuthenticationHandler0
      IntegrationUserDetailsAuthenticationHandler integrationUserDetailsAuthenticationHandler0 = mock(IntegrationUserDetailsAuthenticationHandler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      IntegrationUserDetailsAuthenticationProvider integrationUserDetailsAuthenticationProvider0 = new IntegrationUserDetailsAuthenticationProvider(integrationUserDetailsAuthenticationHandler0);
      //mock map0
      Map<HashMap<String, IntegrationWebAuthenticationDetails>, String> map0 = (Map<HashMap<String, IntegrationWebAuthenticationDetails>, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock usernamePasswordAuthenticationToken0
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = mock(UsernamePasswordAuthenticationToken.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(map0).when(usernamePasswordAuthenticationToken0).getDetails();
      
      //Call method: authenticationUser
      try { 
        PrivateAccess.callMethod((Class<IntegrationUserDetailsAuthenticationProvider>) IntegrationUserDetailsAuthenticationProvider.class, integrationUserDetailsAuthenticationProvider0, "authenticationUser", (Object) usernamePasswordAuthenticationToken0, (Class<?>) UsernamePasswordAuthenticationToken.class);
      } catch(Throwable e) {
         verifyException("com.wanxin.uaa.domain.IntegrationUserDetailsAuthenticationProvider", e);
         assertEquals("org.springframework.security.authentication.InternalAuthenticationServiceException", e.getClass().getName());
         assertEquals("domain is blank", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_authenticationUser_2()  throws Throwable  {
      //caseID:c23d30206a7b445ac96444a272312e6d
      //CoveredLines: [22, 24, 25, 26, 55, 56, 57, 59, 60, 61, 62, 63, 71, 75, 76]
      //Input_0_org.springframework.security.authentication.UsernamePasswordAuthenticationToken: {getDetails=integrationWebAuthenticationDetails0}
      
      //mock integrationUserDetailsAuthenticationHandler0
      IntegrationUserDetailsAuthenticationHandler integrationUserDetailsAuthenticationHandler0 = mock(IntegrationUserDetailsAuthenticationHandler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      IntegrationUserDetailsAuthenticationProvider integrationUserDetailsAuthenticationProvider0 = new IntegrationUserDetailsAuthenticationProvider(integrationUserDetailsAuthenticationHandler0);
      //mock integrationWebAuthenticationDetails0
      IntegrationWebAuthenticationDetails integrationWebAuthenticationDetails0 = mock(IntegrationWebAuthenticationDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(integrationWebAuthenticationDetails0).getAuthenticationType();
      doReturn("rx.internal.util.InternalObservableUtils$ReplaySupplierTime").when(integrationWebAuthenticationDetails0).getDomain();
      //mock usernamePasswordAuthenticationToken0
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = mock(UsernamePasswordAuthenticationToken.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integrationWebAuthenticationDetails0).when(usernamePasswordAuthenticationToken0).getDetails();
      
      //Call method: authenticationUser
      try { 
        PrivateAccess.callMethod((Class<IntegrationUserDetailsAuthenticationProvider>) IntegrationUserDetailsAuthenticationProvider.class, integrationUserDetailsAuthenticationProvider0, "authenticationUser", (Object) usernamePasswordAuthenticationToken0, (Class<?>) UsernamePasswordAuthenticationToken.class);
      } catch(Throwable e) {
         verifyException("com.wanxin.uaa.domain.IntegrationUserDetailsAuthenticationProvider", e);
         assertEquals("org.springframework.security.authentication.InternalAuthenticationServiceException", e.getClass().getName());
         assertEquals("authenticationType is blank", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_authenticationUser_3()  throws Throwable  {
      //caseID:be202b308124db8eebdb681e8c15735e
      //CoveredLines: [22, 24, 25, 26, 55, 56, 57, 59, 60, 61, 62, 63, 71, 75, 78]
      //Input_0_org.springframework.security.authentication.UsernamePasswordAuthenticationToken: {getDetails=integrationWebAuthenticationDetails0}
      //Assert: assertNull(method_result);
      
      //mock integrationUserDetailsAuthenticationHandler0
      IntegrationUserDetailsAuthenticationHandler integrationUserDetailsAuthenticationHandler0 = mock(IntegrationUserDetailsAuthenticationHandler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      IntegrationUserDetailsAuthenticationProvider integrationUserDetailsAuthenticationProvider0 = new IntegrationUserDetailsAuthenticationProvider(integrationUserDetailsAuthenticationHandler0);
      //mock integrationWebAuthenticationDetails0
      IntegrationWebAuthenticationDetails integrationWebAuthenticationDetails0 = mock(IntegrationWebAuthenticationDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("authenticationType is blank").when(integrationWebAuthenticationDetails0).getAuthenticationType();
      doReturn("WebAuthenticationDetails type is not support").when(integrationWebAuthenticationDetails0).getDomain();
      //mock usernamePasswordAuthenticationToken0
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = mock(UsernamePasswordAuthenticationToken.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integrationWebAuthenticationDetails0).when(usernamePasswordAuthenticationToken0).getDetails();
      
      //Call method: authenticationUser
      Object object0 = PrivateAccess.callMethod((Class<IntegrationUserDetailsAuthenticationProvider>) IntegrationUserDetailsAuthenticationProvider.class, integrationUserDetailsAuthenticationProvider0, "authenticationUser", (Object) usernamePasswordAuthenticationToken0, (Class<?>) UsernamePasswordAuthenticationToken.class);
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 9000)
  public void test_retrieveUser_4()  throws Throwable  {
      //caseID:66a169d1e43151dd170367e9dc1abbaa
      //CoveredLines: [22, 24, 25, 26, 39, 46, 47, 55, 56, 57, 59, 68]
      //Input_0_String: authenticationType is blank
      //Input_1_org.springframework.security.authentication.UsernamePasswordAuthenticationToken: {}
      
      //mock integrationUserDetailsAuthenticationHandler0
      IntegrationUserDetailsAuthenticationHandler integrationUserDetailsAuthenticationHandler0 = mock(IntegrationUserDetailsAuthenticationHandler.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      IntegrationUserDetailsAuthenticationProvider integrationUserDetailsAuthenticationProvider0 = new IntegrationUserDetailsAuthenticationProvider(integrationUserDetailsAuthenticationHandler0);
      //mock usernamePasswordAuthenticationToken0
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = mock(UsernamePasswordAuthenticationToken.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: retrieveUser
      try { 
        PrivateAccess.callMethod((Class<IntegrationUserDetailsAuthenticationProvider>) IntegrationUserDetailsAuthenticationProvider.class, integrationUserDetailsAuthenticationProvider0, "retrieveUser", (Object) "authenticationType is blank", (Class<?>) String.class, (Object) usernamePasswordAuthenticationToken0, (Class<?>) UsernamePasswordAuthenticationToken.class);
      } catch(Throwable e) {
         verifyException("com.wanxin.uaa.domain.IntegrationUserDetailsAuthenticationProvider", e);
         assertEquals("org.springframework.security.authentication.InternalAuthenticationServiceException", e.getClass().getName());
         assertEquals("WebAuthenticationDetails type is not support", e.getMessage());
      }
  }
}
