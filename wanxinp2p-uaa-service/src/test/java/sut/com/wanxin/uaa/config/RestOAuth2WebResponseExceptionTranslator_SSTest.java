/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.config;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.uaa.config.RestOAuth2WebResponseExceptionTranslator;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.common.exceptions.InsufficientScopeException;
import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
import org.springframework.security.web.util.ThrowableAnalyzer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class RestOAuth2WebResponseExceptionTranslator_SSTest extends RestOAuth2WebResponseExceptionTranslator_SSTest_scaffolding {
// allCoveredLines:[22, 24, 28, 29, 30, 33, 34, 37, 38, 42, 43, 48, 49, 50, 51, 52, 53, 56, 58, 59, 63, 64, 100, 101, 110]

  @Test(timeout = 9000)
  public void test_handleOAuth2Exception_0()  throws Throwable  {
      //caseID:94528363b82000aed78da65368f9b016
      //CoveredLines: [22, 24, 48, 49, 50, 51, 52, 53, 56, 58, 59]
      //Input_0_org.springframework.security.oauth2.common.exceptions.OAuth2Exception: oAuth2Exception0
      //Assert: assertEquals(401, method_result.getStatusCodeValue());
      
      RestOAuth2WebResponseExceptionTranslator restOAuth2WebResponseExceptionTranslator0 = new RestOAuth2WebResponseExceptionTranslator();
      
      OAuth2Exception oAuth2Exception0 = OAuth2Exception.create("invalid_token", "invalid_token");
      
      //Call method: handleOAuth2Exception
      ResponseEntity<OAuth2Exception> responseEntity0 = (ResponseEntity<OAuth2Exception>)PrivateAccess.callMethod((Class<RestOAuth2WebResponseExceptionTranslator>) RestOAuth2WebResponseExceptionTranslator.class, restOAuth2WebResponseExceptionTranslator0, "handleOAuth2Exception", (Object) oAuth2Exception0, (Class<?>) OAuth2Exception.class);
      
      //Test Result Assert
      assertEquals(401, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 9000)
  public void test_handleOAuth2Exception_1()  throws Throwable  {
      //caseID:9008aaef59f6da6ee5f3da1335035b5b
      //CoveredLines: [22, 24, 48, 49, 50, 51, 52, 53, 56, 58, 59]
      //Input_0_org.springframework.security.oauth2.common.exceptions.OAuth2Exception: \"\"
      //Assert: assertEquals(403, method_result.getStatusCodeValue());
      
      RestOAuth2WebResponseExceptionTranslator restOAuth2WebResponseExceptionTranslator0 = new RestOAuth2WebResponseExceptionTranslator();
      InsufficientScopeException insufficientScopeException0 = new InsufficientScopeException("");
      
      //Call method: handleOAuth2Exception
      ResponseEntity<OAuth2Exception> responseEntity0 = (ResponseEntity<OAuth2Exception>)PrivateAccess.callMethod((Class<RestOAuth2WebResponseExceptionTranslator>) RestOAuth2WebResponseExceptionTranslator.class, restOAuth2WebResponseExceptionTranslator0, "handleOAuth2Exception", (Object) insufficientScopeException0, (Class<?>) OAuth2Exception.class);
      
      //Test Result Assert
      assertEquals(403, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 9000)
  public void test_setThrowableAnalyzer_2()  throws Throwable  {
      //caseID:e2c22cdaf9c6ed681a4f8fb5833a4b52
      //CoveredLines: [22, 24, 63, 64]
      //Input_0_ThrowableAnalyzer: {}
      
      RestOAuth2WebResponseExceptionTranslator restOAuth2WebResponseExceptionTranslator0 = new RestOAuth2WebResponseExceptionTranslator();
      //mock throwableAnalyzer0
      ThrowableAnalyzer throwableAnalyzer0 = mock(ThrowableAnalyzer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setThrowableAnalyzer
      restOAuth2WebResponseExceptionTranslator0.setThrowableAnalyzer(throwableAnalyzer0);
  }

  @Test(timeout = 9000)
  public void test_translate_3()  throws Throwable  {
      //caseID:80e87aaf89164a0b4550e7b71b242807
      //CoveredLines: [22, 24, 28, 29, 30, 33, 34, 37, 38, 42, 43, 48, 49, 50, 51, 52, 56, 58, 59, 100, 101, 110]
      //Input_0_Exception: {}
      //Assert: assertEquals(500, method_result.getStatusCodeValue());
      
      RestOAuth2WebResponseExceptionTranslator restOAuth2WebResponseExceptionTranslator0 = new RestOAuth2WebResponseExceptionTranslator();
      //mock exception0
      Exception exception0 = mock(Exception.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: translate
      ResponseEntity<OAuth2Exception> responseEntity0 = restOAuth2WebResponseExceptionTranslator0.translate(exception0);
      
      //Test Result Assert
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }
}
