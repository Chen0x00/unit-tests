/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.config;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.wanxin.uaa.config.RestOAuth2Exception;
import com.wanxin.uaa.config.RestOAuthExceptionJacksonSerializer;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class RestOAuthExceptionJacksonSerializer_SSTest extends RestOAuthExceptionJacksonSerializer_SSTest_scaffolding {
// allCoveredLines:[24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42]

  @Test(timeout = 9000)
  public void test_serialize_0()  throws Throwable  {
      //caseID:03dbfac63278874ee2d75bcf167d08d1
      //CoveredLines: [24, 25, 26, 27, 28, 30, 31, 32, 34, 41, 42]
      //Input_0_RestOAuth2Exception: \"1.0\"
      //Input_1_JsonGenerator: {}
      //Input_2_SerializerProvider: {}
      
      //mock restOAuthExceptionJacksonSerializer0
      RestOAuthExceptionJacksonSerializer restOAuthExceptionJacksonSerializer0 = mock(RestOAuthExceptionJacksonSerializer.class, CALLS_REAL_METHODS);
      RestOAuth2Exception restOAuth2Exception0 = new RestOAuth2Exception("1.0");
      //mock jsonGenerator0
      JsonGenerator jsonGenerator0 = mock(JsonGenerator.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock serializerProvider0
      SerializerProvider serializerProvider0 = mock(SerializerProvider.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: serialize
      restOAuthExceptionJacksonSerializer0.serialize(restOAuth2Exception0, jsonGenerator0, serializerProvider0);
      
      //Test Result Assert
      assertEquals(400, restOAuth2Exception0.getHttpErrorCode());
  }

  @Test(timeout = 9000)
  public void test_serialize_1()  throws Throwable  {
      //caseID:712cd06094d85c24563af1fcb832edc9
      //CoveredLines: [24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42]
      //Input_0_RestOAuth2Exception: \"3+q'fGz~Cvu%}_twa\\\"+\"
      //Input_1_JsonGenerator: {}
      //Input_2_SerializerProvider: {}
      
      //mock restOAuthExceptionJacksonSerializer0
      RestOAuthExceptionJacksonSerializer restOAuthExceptionJacksonSerializer0 = mock(RestOAuthExceptionJacksonSerializer.class, CALLS_REAL_METHODS);
      RestOAuth2Exception restOAuth2Exception0 = new RestOAuth2Exception("3+q'fGz~Cvu%}_twa\"+");
      //mock jsonGenerator0
      JsonGenerator jsonGenerator0 = mock(JsonGenerator.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      restOAuth2Exception0.addAdditionalInformation("error_description", "unsupported_response_type");
      //mock serializerProvider0
      SerializerProvider serializerProvider0 = mock(SerializerProvider.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: serialize
      restOAuthExceptionJacksonSerializer0.serialize(restOAuth2Exception0, jsonGenerator0, serializerProvider0);
      
      //Test Result Assert
      assertEquals("invalid_request", restOAuth2Exception0.getOAuth2ErrorCode());
  }
}
