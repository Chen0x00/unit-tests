/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.wanxin.api.account.model.AccountDTO;
import com.wanxin.api.account.model.AccountLoginDTO;
import com.wanxin.common.domain.RestResponse;
import com.wanxin.uaa.agent.AccountApiAgent;
import com.wanxin.uaa.common.utils.ApplicationContextHelper;
import com.wanxin.uaa.domain.IntegrationUserDetailsAuthenticationHandler;
import com.wanxin.uaa.domain.UnifiedUserDetails;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.context.ApplicationContext;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class IntegrationUserDetailsAuthenticationHandler_SSTest extends IntegrationUserDetailsAuthenticationHandler_SSTest_scaffolding {
// allCoveredLines:[20, 33, 34, 35, 37, 38, 40, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 58, 59, 60]

  @Test(timeout = 9000)
  public void test_authentication_0()  throws Throwable  {
      //caseID:54a618f438d968fd175da532db9f2b8d
      //CoveredLines: [20, 33, 34, 35]
      //Input_0_String: g\"J
      //Input_1_String: \u5BC6\u7801\u4E3A\u7A7A
      //Input_2_UsernamePasswordAuthenticationToken: {}
      
      IntegrationUserDetailsAuthenticationHandler integrationUserDetailsAuthenticationHandler0 = new IntegrationUserDetailsAuthenticationHandler();
      //mock usernamePasswordAuthenticationToken0
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = mock(UsernamePasswordAuthenticationToken.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: authentication
      // Undeclared exception!
      try { 
        integrationUserDetailsAuthenticationHandler0.authentication("g\"J", "\u5BC6\u7801\u4E3A\u7A7A", usernamePasswordAuthenticationToken0);
      } catch(Throwable e) {
         verifyException("com.wanxin.uaa.domain.IntegrationUserDetailsAuthenticationHandler", e);
         assertEquals("org.springframework.security.authentication.BadCredentialsException", e.getClass().getName());
         assertEquals("\u8D26\u6237\u4E3A\u7A7A", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_authentication_1()  throws Throwable  {
      //caseID:f68ae09fada37965565a76e566f630fd
      //CoveredLines: [20, 33, 34, 37, 38]
      //Input_0_String: \u8D26\u6237\u4E3A\u7A7A
      //Input_1_String: 1.0
      //Input_2_UsernamePasswordAuthenticationToken: {getName=\"\\u8D26\\u6237\\u4E3A\\u7A7A\"}
      
      IntegrationUserDetailsAuthenticationHandler integrationUserDetailsAuthenticationHandler0 = new IntegrationUserDetailsAuthenticationHandler();
      //mock usernamePasswordAuthenticationToken0
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = mock(UsernamePasswordAuthenticationToken.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u8D26\u6237\u4E3A\u7A7A").when(usernamePasswordAuthenticationToken0).getName();
      
      //Call method: authentication
      // Undeclared exception!
      try { 
        integrationUserDetailsAuthenticationHandler0.authentication("\u8D26\u6237\u4E3A\u7A7A", "1.0", usernamePasswordAuthenticationToken0);
      } catch(Throwable e) {
         verifyException("com.wanxin.uaa.domain.IntegrationUserDetailsAuthenticationHandler", e);
         assertEquals("org.springframework.security.authentication.BadCredentialsException", e.getClass().getName());
         assertEquals("\u5BC6\u7801\u4E3A\u7A7A", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_authentication_2()  throws Throwable  {
      //caseID:89475abd1905aaa908b0ebfb5046a739
      //CoveredLines: [20, 33, 34, 37, 40, 43, 44, 45, 46, 47, 48, 49]
      //Input_0_String: com.wanxin.uaa.domain.IntegrationUserDetailsAuthenticationHandler
      //Input_1_String: 0
      //Input_2_UsernamePasswordAuthenticationToken: {getName=\"0\", getCredentials=accountLoginDTO0}
      
      IntegrationUserDetailsAuthenticationHandler integrationUserDetailsAuthenticationHandler0 = new IntegrationUserDetailsAuthenticationHandler();
      //mock accountLoginDTO0
      AccountLoginDTO accountLoginDTO0 = mock(AccountLoginDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock usernamePasswordAuthenticationToken0
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = mock(UsernamePasswordAuthenticationToken.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(usernamePasswordAuthenticationToken0).getName();
      doReturn(accountLoginDTO0).when(usernamePasswordAuthenticationToken0).getCredentials();
      
      //Call method: authentication
      // Undeclared exception!
      try { 
        integrationUserDetailsAuthenticationHandler0.authentication("com.wanxin.uaa.domain.IntegrationUserDetailsAuthenticationHandler", "0", usernamePasswordAuthenticationToken0);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_authentication_3()  throws Throwable  {
      //caseID:585c29c419ba1e32ec4a9e6d37394789
      //CoveredLines: [20, 33, 34, 37, 40, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54]
      //Input_0_String: rKU8*MocDgHT6
      //Input_1_String: \u767B\u5F55\u5931\u8D25
      //Input_2_UsernamePasswordAuthenticationToken: {getName=\"0\", getCredentials=\"1\" accountLoginDTO0}
      
      IntegrationUserDetailsAuthenticationHandler integrationUserDetailsAuthenticationHandler0 = new IntegrationUserDetailsAuthenticationHandler();
      ApplicationContextHelper applicationContextHelper0 = new ApplicationContextHelper();
      //mock accountDTO0
      AccountDTO accountDTO0 = mock(AccountDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock restResponse0
      RestResponse<AccountDTO> restResponse0 = (RestResponse<AccountDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(restResponse0).getCode();
      doReturn(accountDTO0).when(restResponse0).getResult();
      //mock accountApiAgent0
      AccountApiAgent accountApiAgent0 = mock(AccountApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(accountApiAgent0).login(any(com.wanxin.api.account.model.AccountLoginDTO.class));
      //mock applicationContext0
      ApplicationContext applicationContext0 = mock(ApplicationContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(accountApiAgent0).when(applicationContext0).getBean(any(java.lang.Class.class));
      
      applicationContextHelper0.setApplicationContext(applicationContext0);
      //mock accountLoginDTO0
      AccountLoginDTO accountLoginDTO0 = mock(AccountLoginDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock usernamePasswordAuthenticationToken0
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = mock(UsernamePasswordAuthenticationToken.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(usernamePasswordAuthenticationToken0).getName();
      doReturn("1", accountLoginDTO0).when(usernamePasswordAuthenticationToken0).getCredentials();
      
      //Call method: authentication
      // Undeclared exception!
      try { 
        integrationUserDetailsAuthenticationHandler0.authentication("rKU8*MocDgHT6", "\u767B\u5F55\u5931\u8D25", usernamePasswordAuthenticationToken0);
      } catch(Throwable e) {
         verifyException("com.wanxin.uaa.domain.IntegrationUserDetailsAuthenticationHandler", e);
         assertEquals("org.springframework.security.authentication.BadCredentialsException", e.getClass().getName());
         assertEquals("\u767B\u5F55\u5931\u8D25", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_authentication_4()  throws Throwable  {
      //caseID:eb6f7c77bea1c80d00eb623a949e03e4
      //CoveredLines: [20, 33, 34, 37, 40, 43, 44, 45, 46, 47, 48, 49, 50, 53, 58, 59, 60]
      //Input_0_String: rKU8*MocDgHT6
      //Input_1_String: \u767B\u5F55\u5931\u8D25
      //Input_2_UsernamePasswordAuthenticationToken: {getName=\"0\", getCredentials=\"\\u5BC6\\u7801\\u4E3A\\u7A7A\" accountLoginDTO0}
      //Assert: assertTrue(method_result.isCredentialsNonExpired());
      
      IntegrationUserDetailsAuthenticationHandler integrationUserDetailsAuthenticationHandler0 = new IntegrationUserDetailsAuthenticationHandler();
      ApplicationContextHelper applicationContextHelper0 = new ApplicationContextHelper();
      //mock accountDTO0
      AccountDTO accountDTO0 = mock(AccountDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock restResponse0
      RestResponse<AccountDTO> restResponse0 = (RestResponse<AccountDTO>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(restResponse0).getCode();
      doReturn(accountDTO0).when(restResponse0).getResult();
      //mock accountApiAgent0
      AccountApiAgent accountApiAgent0 = mock(AccountApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(accountApiAgent0).login(any(com.wanxin.api.account.model.AccountLoginDTO.class));
      //mock applicationContext0
      ApplicationContext applicationContext0 = mock(ApplicationContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(accountApiAgent0).when(applicationContext0).getBean(any(java.lang.Class.class));
      
      applicationContextHelper0.setApplicationContext(applicationContext0);
      //mock accountLoginDTO0
      AccountLoginDTO accountLoginDTO0 = mock(AccountLoginDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock usernamePasswordAuthenticationToken0
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = mock(UsernamePasswordAuthenticationToken.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(usernamePasswordAuthenticationToken0).getName();
      doReturn("\u5BC6\u7801\u4E3A\u7A7A", accountLoginDTO0).when(usernamePasswordAuthenticationToken0).getCredentials();
      
      //Call method: authentication
      UnifiedUserDetails unifiedUserDetails0 = integrationUserDetailsAuthenticationHandler0.authentication("rKU8*MocDgHT6", "\u767B\u5F55\u5931\u8D25", usernamePasswordAuthenticationToken0);
      
      //Test Result Assert
      assertTrue(unifiedUserDetails0.isCredentialsNonExpired());
  }
}
