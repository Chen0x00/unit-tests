/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.netflix.loadbalancer.Server;
import com.wanxin.uaa.domain.UnifiedUserAuthenticationConverter;
import com.wanxin.uaa.domain.UnifiedUserDetails;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.concurrent.LinkedBlockingQueue;
import javax.swing.table.DefaultTableModel;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.core.convert.support.DefaultConversionService;
import org.springframework.security.authentication.RememberMeAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetailsService;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UnifiedUserAuthenticationConverter_SSTest extends UnifiedUserAuthenticationConverter_SSTest_scaffolding {
// allCoveredLines:[22, 34, 35, 45, 46, 47, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 68, 69, 70, 71, 72, 73, 74, 78, 80, 81, 82, 84, 86, 88, 92, 93, 95, 96, 97, 99, 103]

  @Test(timeout = 9000)
  public void test_convertUserAuthentication_00()  throws Throwable  {
      //caseID:4bc0a587aa2e42f854d8529fb162e404
      //CoveredLines: [22, 50, 51, 52, 56, 64]
      //Input_0_Authentication: {getName=\"oBCU5 *8\", getPrincipal=authentication0, getAuthorities=priorityQueue0 priorityQueue0 priorityQueue0}
      //Assert: assertEquals(1, method_result.size());
      
      UnifiedUserAuthenticationConverter unifiedUserAuthenticationConverter0 = new UnifiedUserAuthenticationConverter();
      PriorityQueue<SimpleGrantedAuthority> priorityQueue0 = new PriorityQueue<SimpleGrantedAuthority>();
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock authentication1
      Authentication authentication1 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("oBCU5 *8").when(authentication1).getName();
      doReturn(priorityQueue0, priorityQueue0, priorityQueue0).when(authentication1).getAuthorities();
      doReturn(authentication0).when(authentication1).getPrincipal();
      
      //Call method: convertUserAuthentication
      Map<String, ?> map0 = unifiedUserAuthenticationConverter0.convertUserAuthentication(authentication1);
      
      //Test Result Assert
      assertEquals(1, map0.size());
  }

  @Test(timeout = 9000)
  public void test_convertUserAuthentication_01()  throws Throwable  {
      //caseID:41be2472da2dd5e920d05d2a0e65662b
      //CoveredLines: [22, 50, 51, 52, 56, 64]
      //Input_0_Authentication: {}
      //Assert: assertFalse(method_result.isEmpty());
      
      UnifiedUserAuthenticationConverter unifiedUserAuthenticationConverter0 = new UnifiedUserAuthenticationConverter();
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: convertUserAuthentication
      Map<String, ?> map0 = unifiedUserAuthenticationConverter0.convertUserAuthentication(authentication0);
      
      //Test Result Assert
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 9000)
  public void test_convertUserAuthentication_02()  throws Throwable  {
      //caseID:6c029b67b0c082b4e4d987171e2bcc17
      //CoveredLines: [22, 50, 51, 52, 53, 56, 64]
      //Input_0_Authentication: {getName=\"mobile\", getPrincipal=\"1\", getAuthorities=priorityQueue0}
      //Assert: assertEquals(2, method_result.size());
      
      UnifiedUserAuthenticationConverter unifiedUserAuthenticationConverter0 = new UnifiedUserAuthenticationConverter();
      PriorityQueue<SimpleGrantedAuthority> priorityQueue0 = new PriorityQueue<SimpleGrantedAuthority>();
      //mock simpleGrantedAuthority0
      SimpleGrantedAuthority simpleGrantedAuthority0 = mock(SimpleGrantedAuthority.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      priorityQueue0.add(simpleGrantedAuthority0);
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("mobile").when(authentication0).getName();
      doReturn(priorityQueue0).when(authentication0).getAuthorities();
      doReturn("1").when(authentication0).getPrincipal();
      
      //Call method: convertUserAuthentication
      Map<String, ?> map0 = unifiedUserAuthenticationConverter0.convertUserAuthentication(authentication0);
      
      //Test Result Assert
      assertEquals(2, map0.size());
  }

  @Test(timeout = 9000)
  public void test_convertUserAuthentication_03()  throws Throwable  {
      //caseID:0a2bf215036d559fef576bd461822d89
      //CoveredLines: [22, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64]
      //Input_0_Authentication: {getName=\"authorities\", getPrincipal=unifiedUserDetails0, getAuthorities=priorityQueue0 priorityQueue0 priorityQueue0}
      //Assert: assertEquals(7, method_result.size());
      
      UnifiedUserAuthenticationConverter unifiedUserAuthenticationConverter0 = new UnifiedUserAuthenticationConverter();
      PriorityQueue<SimpleGrantedAuthority> priorityQueue0 = new PriorityQueue<SimpleGrantedAuthority>();
      //mock simpleGrantedAuthority0
      SimpleGrantedAuthority simpleGrantedAuthority0 = mock(SimpleGrantedAuthority.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-1").when(simpleGrantedAuthority0).getAuthority();
      
      priorityQueue0.add(simpleGrantedAuthority0);
      //mock unifiedUserDetails0
      UnifiedUserDetails unifiedUserDetails0 = mock(UnifiedUserDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("authorities").when(authentication0).getName();
      doReturn(priorityQueue0, priorityQueue0, priorityQueue0).when(authentication0).getAuthorities();
      doReturn(unifiedUserDetails0).when(authentication0).getPrincipal();
      
      //Call method: convertUserAuthentication
      Map<String, ?> map0 = unifiedUserAuthenticationConverter0.convertUserAuthentication(authentication0);
      
      //Test Result Assert
      assertEquals(7, map0.size());
  }

  @Test(timeout = 9000)
  public void test_extractAuthentication_04()  throws Throwable  {
      //caseID:7b1edaedac6022e185aa8c01f8904b8c
      //CoveredLines: [22, 68, 88]
      //Input_0_Map<String, ?>: hashMap0
      //Assert: assertNull(method_result);
      
      UnifiedUserAuthenticationConverter unifiedUserAuthenticationConverter0 = new UnifiedUserAuthenticationConverter();
      HashMap<String, RememberMeAuthenticationToken> hashMap0 = new HashMap<String, RememberMeAuthenticationToken>();
      
      //Call method: extractAuthentication
      Authentication authentication0 = unifiedUserAuthenticationConverter0.extractAuthentication(hashMap0);
      
      //Test Result Assert
      assertNull(authentication0);
  }

  @Test(timeout = 9000)
  public void test_extractAuthentication_05()  throws Throwable  {
      //caseID:9b6cdb6bbedc17f398732b7ac14a5410
      //CoveredLines: [22, 68, 69, 70, 92, 95, 96, 99, 103]
      //Input_0_Map<String, ?>: {containsKey=true}
      
      UnifiedUserAuthenticationConverter unifiedUserAuthenticationConverter0 = new UnifiedUserAuthenticationConverter();
      //mock map0
      Map<String, RememberMeAuthenticationToken> map0 = (Map<String, RememberMeAuthenticationToken>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(map0).containsKey(any());
      
      //Call method: extractAuthentication
      // Undeclared exception!
      try { 
        unifiedUserAuthenticationConverter0.extractAuthentication(map0);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_extractAuthentication_06()  throws Throwable  {
      //caseID:2505683dfa4d21d056a1dacf08b9f282
      //CoveredLines: [22, 68, 69, 70, 71, 78, 80, 81, 82, 84, 86, 92, 93]
      //Input_0_Map<String, ?>: {containsKey=true false, get=\"7:c'kf\" \"Guice injected null into {0} (a {1}), please mark it @Nullable. Use -Dguice_check_nullable_provides_params=ERROR to turn this into an error.\" \"department_id\" \"Overriding bean definition for bean '\" \"1.0\" map0}
      //Assert: assertNotNull(method_result);
      //Assert: assertTrue(method_result.isAuthenticated());
      
      UnifiedUserAuthenticationConverter unifiedUserAuthenticationConverter0 = new UnifiedUserAuthenticationConverter();
      //mock map0
      Map<Server, RememberMeAuthenticationToken> map0 = (Map<Server, RememberMeAuthenticationToken>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock map1
      Map<String, Object> map1 = (Map<String, Object>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true, false).when(map1).containsKey(any());
      doReturn("7:c'kf", "Guice injected null into {0} (a {1}), please mark it @Nullable. Use -Dguice_check_nullable_provides_params=ERROR to turn this into an error.", "department_id", "Overriding bean definition for bean '", "1.0", map0).when(map1).get(any());
      
      //Call method: extractAuthentication
      Authentication authentication0 = unifiedUserAuthenticationConverter0.extractAuthentication(map1);
      
      //Test Result Assert
      assertNotNull(authentication0);
      
      //Test Result Assert
      assertTrue(authentication0.isAuthenticated());
  }

  @Test(timeout = 9000)
  public void test_extractAuthentication_07()  throws Throwable  {
      //caseID:82c87dcda7c40c09efbbac73de324b9c
      //CoveredLines: [22, 68, 69, 70, 71, 72, 73, 74, 78, 80, 81, 82, 84, 86, 92, 93]
      //Input_0_Map<String, ?>: {containsKey=true false, get=map1 \"7Sd@NqRUF@ObO2s6\" \"t\\\"ND5\" \"-3\" \"payload\" \"0\" map0}
      //Assert: assertNotNull(method_result);
      //Assert: assertTrue(method_result.isAuthenticated());
      
      UnifiedUserAuthenticationConverter unifiedUserAuthenticationConverter0 = new UnifiedUserAuthenticationConverter();
      LinkedBlockingQueue<GrantedAuthority> linkedBlockingQueue0 = new LinkedBlockingQueue<GrantedAuthority>();
      //mock unifiedUserDetails0
      UnifiedUserDetails unifiedUserDetails0 = mock(UnifiedUserDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedBlockingQueue0).when(unifiedUserDetails0).getAuthorities();
      //mock userDetailsService0
      UserDetailsService userDetailsService0 = mock(UserDetailsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(unifiedUserDetails0).when(userDetailsService0).loadUserByUsername(anyString());
      
      PrivateAccess.setVariable((Class<?>) UnifiedUserAuthenticationConverter.class, unifiedUserAuthenticationConverter0, "userDetailsService", (Object) userDetailsService0);
      //mock map0
      Map<HashMap<String, DefaultTableModel>, UnifiedUserDetails> map0 = (Map<HashMap<String, DefaultTableModel>, UnifiedUserDetails>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock map1
      Map<DefaultConversionService, SimpleGrantedAuthority> map1 = (Map<DefaultConversionService, SimpleGrantedAuthority>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock map2
      Map<String, Object> map2 = (Map<String, Object>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true, false).when(map2).containsKey(any());
      doReturn(map1, "7Sd@NqRUF@ObO2s6", "t\"ND5", "-3", "payload", "0", map0).when(map2).get(any());
      
      //Call method: extractAuthentication
      Authentication authentication0 = unifiedUserAuthenticationConverter0.extractAuthentication(map2);
      
      //Test Result Assert
      assertNotNull(authentication0);
      
      //Test Result Assert
      assertTrue(authentication0.isAuthenticated());
  }

  @Test(timeout = 9000)
  public void test_getAuthorities_08()  throws Throwable  {
      //caseID:524b6bc846244add2d43b25a32d5224c
      //CoveredLines: [22, 92, 95, 96, 97]
      //Input_0_Map<String, ?>: {containsKey=true, get=\"user_name\"}
      //Assert: assertNotNull(method_result);
      
      UnifiedUserAuthenticationConverter unifiedUserAuthenticationConverter0 = new UnifiedUserAuthenticationConverter();
      //mock map0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(map0).containsKey(any());
      doReturn("user_name").when(map0).get(any());
      
      //Call method: getAuthorities
      Object object0 = PrivateAccess.callMethod((Class<UnifiedUserAuthenticationConverter>) UnifiedUserAuthenticationConverter.class, unifiedUserAuthenticationConverter0, "getAuthorities", (Object) map0, (Class<?>) Map.class);
      
      //Test Result Assert
      assertNotNull(object0);
  }

  @Test(timeout = 9000)
  public void test_setDefaultAuthorities_09()  throws Throwable  {
      //caseID:6f6e82ca0283082f8942b87b62e1912c
      //CoveredLines: [22, 45, 46, 47]
      //Input_0_String[]: stringArray0
      
      UnifiedUserAuthenticationConverter unifiedUserAuthenticationConverter0 = new UnifiedUserAuthenticationConverter();
      String[] stringArray0 = new String[0];
      
      //Call method: setDefaultAuthorities
      unifiedUserAuthenticationConverter0.setDefaultAuthorities(stringArray0);
      
      //Test Result Assert
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 9000)
  public void test_setUserDetailsService_10()  throws Throwable  {
      //caseID:d0af994284d84d887f95dfae3a69414c
      //CoveredLines: [22, 34, 35]
      //Input_0_UserDetailsService: {}
      
      UnifiedUserAuthenticationConverter unifiedUserAuthenticationConverter0 = new UnifiedUserAuthenticationConverter();
      //mock userDetailsService0
      UserDetailsService userDetailsService0 = mock(UserDetailsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setUserDetailsService
      unifiedUserAuthenticationConverter0.setUserDetailsService(userDetailsService0);
  }
}
