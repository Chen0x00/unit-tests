/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.wanxin.common.domain.RestResponse;
import com.wanxin.uaa.controller.UUAController;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;
import org.springframework.ui.Model;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UUAController_SSTest extends UUAController_SSTest_scaffolding {
// allCoveredLines:[26, 36, 37, 43, 48, 53, 59]

  @Test(timeout = 9000)
  public void test_checkToken_0()  throws Throwable  {
      //caseID:9fb1168dba94ce42f3115604a881ac04
      //CoveredLines: [26, 59]
      //Input_0_String: Token was not recognised
      
      UUAController uUAController0 = new UUAController();
      //mock authorizationServerTokenServices0
      AuthorizationServerTokenServices authorizationServerTokenServices0 = mock(AuthorizationServerTokenServices.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UUAController.class, uUAController0, "tokenService", (Object) authorizationServerTokenServices0);
      
      //Call method: checkToken
      // Undeclared exception!
      try { 
        uUAController0.checkToken("Token was not recognised");
      } catch(Throwable e) {
         verifyException("com.wanxin.uaa.controller.UUAController", e);
         assertEquals("java.lang.ClassCastException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmAccess_1()  throws Throwable  {
      //caseID:8abdaaf08e6b8454aabd2c11f742b38e
      //CoveredLines: [26, 48]
      //Assert: assertEquals("oauth_approval", method_result);
      
      UUAController uUAController0 = new UUAController();
      
      //Call method: confirmAccess
      String string0 = uUAController0.confirmAccess();
      
      //Test Result Assert
      assertEquals("oauth_approval", string0);
  }

  @Test(timeout = 9000)
  public void test_login_2()  throws Throwable  {
      //caseID:c5fde2e672058b50de6c2f4ae653fa74
      //CoveredLines: [26, 36, 37]
      //Input_0_Model: {}
      //Assert: assertEquals("login", method_result);
      
      UUAController uUAController0 = new UUAController();
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: login
      String string0 = uUAController0.login(model0);
      
      //Test Result Assert
      assertEquals("login", string0);
  }

  @Test(timeout = 9000)
  public void test_logout_3()  throws Throwable  {
      //caseID:f66ec400873101df42f260e0b73af5a2
      //CoveredLines: [26, 43]
      //Assert: assertTrue(method_result.isSuccessful());
      
      UUAController uUAController0 = new UUAController();
      
      //Call method: logout
      RestResponse restResponse0 = uUAController0.logout();
      
      //Test Result Assert
      assertTrue(restResponse0.isSuccessful());
  }

  @Test(timeout = 9000)
  public void test_oauthError_4()  throws Throwable  {
      //caseID:0d01a08dd6a547922e894f2403db51bc
      //CoveredLines: [26, 53]
      //Assert: assertEquals("oauth_error", method_result);
      
      UUAController uUAController0 = new UUAController();
      
      //Call method: oauthError
      String string0 = uUAController0.oauthError();
      
      //Test Result Assert
      assertEquals("oauth_error", string0);
  }
}
