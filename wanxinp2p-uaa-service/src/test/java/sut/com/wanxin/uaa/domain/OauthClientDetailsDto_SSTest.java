/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.uaa.domain.OauthClientDetails;
import com.wanxin.uaa.domain.OauthClientDetailsDto;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.smartunit.runtime.mock.java.time.MockInstant;
import org.smartunit.runtime.mock.java.time.MockLocalDateTime;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OauthClientDetailsDto_SSTest extends OauthClientDetailsDto_SSTest_scaffolding {
// allCoveredLines:[21, 24, 43, 44, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 67, 68, 69, 70, 71, 75, 79, 80, 83, 87, 88, 91, 95, 96, 99, 103, 104, 107, 111, 112, 115, 119, 120, 123, 126, 130, 134, 135, 138, 142, 143, 146, 150, 151, 154, 158, 159, 162, 166, 167, 170, 174, 175, 178, 182, 183, 186, 190, 194, 198, 202, 207, 208, 210, 211, 212, 213, 215, 216, 219, 220, 223, 224, 225, 227, 228, 231]

  @Test(timeout = 9000)
  public void test_createDomain_00()  throws Throwable  {
      //caseID:e1e6b6d858be6c634c7746661f049b20
      //CoveredLines: [21, 21, 24, 24, 43, 44, 207, 208, 210, 211, 212, 213, 215, 219, 223, 224, 225, 227, 231]
      //Assert: assertEquals("55cb5795e45349f295c94260d9ec8c64", method_result.clientId());
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: createDomain
      OauthClientDetails oauthClientDetails0 = oauthClientDetailsDto0.createDomain();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("55cb5795e45349f295c94260d9ec8c64", oauthClientDetails0.clientId());
  }

  @Test(timeout = 9000)
  public void test_createDomain_01()  throws Throwable  {
      //caseID:c6dc925e5b82d5538172ef87392c8cbe
      //CoveredLines: [21, 21, 24, 24, 43, 44, 207, 208, 210, 211, 212, 213, 215, 219, 220, 223, 224, 225, 227, 228, 231]
      //Assert: assertEquals("a725fdc970324ecd9e57beacfc573a51", method_result.clientId());
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "authorities", (Object) "authorization_code");
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "additionalInformation", (Object) "io.lettuce.core.dynamic.ReactiveTypeAdapters$PublisherToRxJava2ObservableAdapter");
      
      //Call method: createDomain
      OauthClientDetails oauthClientDetails0 = oauthClientDetailsDto0.createDomain();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("a725fdc970324ecd9e57beacfc573a51", oauthClientDetails0.clientId());
  }

  @Test(timeout = 9000)
  public void test_createDomain_02()  throws Throwable  {
      //caseID:9ce0e44ca549217775fcc4df46416841
      //CoveredLines: [21, 21, 24, 24, 43, 44, 207, 208, 210, 211, 212, 213, 215, 216, 219, 220, 223, 224, 225, 227, 231]
      //Assert: assertEquals("10a676f8e5b54ba6a7d28eabac559728", method_result.clientId());
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "webServerRedirectUri", (Object) "1");
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "authorities", (Object) "0");
      
      //Call method: createDomain
      OauthClientDetails oauthClientDetails0 = oauthClientDetailsDto0.createDomain();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("10a676f8e5b54ba6a7d28eabac559728", oauthClientDetails0.clientId());
  }

  @Test(timeout = 9000)
  public void test_createDomain_03()  throws Throwable  {
      //caseID:b7a174facedc5552a04cb41bd092c892
      //CoveredLines: [21, 21, 24, 24, 43, 44, 207, 208, 210, 211, 212, 213, 215, 216, 219, 220, 223, 224, 225, 227, 228, 231]
      //Assert: assertEquals("f78a1829ce2b40f189cc1dfdf2733277", method_result.clientId());
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "webServerRedirectUri", (Object) "1");
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "authorities", (Object) "authorization_code");
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "additionalInformation", (Object) "io.lettuce.core.dynamic.ReactiveTypeAdapters$PublisherToRxJava2ObservableAdapter");
      
      //Call method: createDomain
      OauthClientDetails oauthClientDetails0 = oauthClientDetailsDto0.createDomain();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("f78a1829ce2b40f189cc1dfdf2733277", oauthClientDetails0.clientId());
  }

  @Test(timeout = 9000)
  public void test_getAccessTokenValidity_04()  throws Throwable  {
      //caseID:cfa2e72ff4c3a5cd5bdddaa035536ce1
      //CoveredLines: [21, 21, 24, 24, 43, 44, 154]
      //Assert: assertNull(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: getAccessTokenValidity
      Integer integer0 = oauthClientDetailsDto0.getAccessTokenValidity();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 9000)
  public void test_getAdditionalInformation_05()  throws Throwable  {
      //caseID:40803be716b1d9409b6f74912b699bc7
      //CoveredLines: [21, 21, 24, 24, 43, 44, 170]
      //Assert: assertNull(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: getAdditionalInformation
      String string0 = oauthClientDetailsDto0.getAdditionalInformation();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getAuthorities_06()  throws Throwable  {
      //caseID:717de4faba90d6a94891b7cd058483fb
      //CoveredLines: [21, 21, 24, 24, 43, 44, 146]
      //Assert: assertNull(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: getAuthorities
      String string0 = oauthClientDetailsDto0.getAuthorities();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getAuthorizedGrantTypes_07()  throws Throwable  {
      //caseID:d61b55b7ab440a1b5a9a5fb5a824d034
      //CoveredLines: [21, 21, 24, 24, 43, 44, 130]
      //Assert: assertNull(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: getAuthorizedGrantTypes
      String string0 = oauthClientDetailsDto0.getAuthorizedGrantTypes();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getClientId_08()  throws Throwable  {
      //caseID:6fd215a12301b4fdbc9c2582bee3f1df
      //CoveredLines: [21, 21, 24, 24, 43, 44, 91]
      //Assert: assertEquals("1a74b1fac92548d5ab59ece2f9853388", method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: getClientId
      String string0 = oauthClientDetailsDto0.getClientId();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("1a74b1fac92548d5ab59ece2f9853388", string0);
  }

  @Test(timeout = 9000)
  public void test_getClientSecret_09()  throws Throwable  {
      //caseID:3f16e6790720c087bcd6fb73d4a7d61f
      //CoveredLines: [21, 21, 24, 24, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 107]
      //Assert: assertEquals("YKJ[\"DkX;\"~^", method_result);
      
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      //mock oauthClientDetails0
      OauthClientDetails oauthClientDetails0 = mock(OauthClientDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Lo1D@Q`G@3.9r3j^Q").when(oauthClientDetails0).clientId();
      doReturn("YKJ[\"DkX;\"~^").when(oauthClientDetails0).clientSecret();
      doReturn(localDateTime0).when(oauthClientDetails0).createTime();
      doReturn("com.wanxin.uaa.domain.OauthClientDetailsDto").when(oauthClientDetails0).scope();
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto(oauthClientDetails0);
      
      //Call method: getClientSecret
      String string0 = oauthClientDetailsDto0.getClientSecret();
      
      //Test Result Assert
      assertEquals("YKJ[\"DkX;\"~^", string0);
  }

  @Test(timeout = 9000)
  public void test_getCreateTime_10()  throws Throwable  {
      //caseID:6dea8a455dee2a2c752ad6f14f2d6067
      //CoveredLines: [21, 21, 24, 24, 43, 44, 75]
      //Assert: assertNull(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: getCreateTime
      String string0 = oauthClientDetailsDto0.getCreateTime();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getRefreshTokenValidity_11()  throws Throwable  {
      //caseID:b6a5ad25df9c6f07a738052f1da2380c
      //CoveredLines: [21, 21, 24, 24, 43, 44, 162]
      //Assert: assertNull(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: getRefreshTokenValidity
      Integer integer0 = oauthClientDetailsDto0.getRefreshTokenValidity();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 9000)
  public void test_getResourceIds_12()  throws Throwable  {
      //caseID:f6c2664c71f11c669ea0ce08076dc10d
      //CoveredLines: [21, 21, 24, 24, 43, 44, 99]
      //Assert: assertNull(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: getResourceIds
      String string0 = oauthClientDetailsDto0.getResourceIds();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getScope_13()  throws Throwable  {
      //caseID:8521f9f82d971c2796a6fb96005a7294
      //CoveredLines: [21, 21, 24, 24, 43, 44, 115]
      //Assert: assertNull(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: getScope
      String string0 = oauthClientDetailsDto0.getScope();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getScopeWithBlank_14()  throws Throwable  {
      //caseID:ab312f4c8efd08f4eabb86efec0d77a0
      //CoveredLines: [21, 21, 24, 24, 43, 44, 123, 126]
      //Assert: assertEquals("7f1d136731ee418d8d1a20738d93c059", oauthClientDetailsDto0.getClientId());
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "scope", (Object) "&4");
      
      //Call method: getScopeWithBlank
      oauthClientDetailsDto0.getScopeWithBlank();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("7f1d136731ee418d8d1a20738d93c059", oauthClientDetailsDto0.getClientId());
  }

  @Test(timeout = 9000)
  public void test_getScopeWithBlank_15()  throws Throwable  {
      //caseID:7f69b707119e1d892e4729f018c807cc
      //CoveredLines: [21, 21, 24, 24, 43, 44, 123, 126]
      //Assert: assertNull(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("591af78b25d342c791d55ed470964dd0", oauthClientDetailsDto0.getClientId());
      
      
      //Call method: getScopeWithBlank
      String string0 = oauthClientDetailsDto0.getScopeWithBlank();
      
      //Test Result Assert
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getWebServerRedirectUri_16()  throws Throwable  {
      //caseID:14d5e1e79166424104777ace01ed5ba6
      //CoveredLines: [21, 21, 24, 24, 43, 44, 138]
      //Assert: assertNull(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: getWebServerRedirectUri
      String string0 = oauthClientDetailsDto0.getWebServerRedirectUri();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_isArchived_17()  throws Throwable  {
      //caseID:18e280b268cd961cda85d0a7b179024d
      //CoveredLines: [21, 21, 24, 24, 43, 44, 83]
      //Assert: assertFalse(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: isArchived
      boolean boolean0 = oauthClientDetailsDto0.isArchived();
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isContainsAuthorizationCode_18()  throws Throwable  {
      //caseID:5b8a0f83c217e97cadf2d3a5fe18bb9c
      //CoveredLines: [21, 21, 24, 24, 43, 44, 186]
      //Assert: assertFalse(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "authorizedGrantTypes", (Object) "Single::takeUntil(Single) - Stream was canceled before emitting a terminal event.");
      
      //Call method: isContainsAuthorizationCode
      boolean boolean0 = oauthClientDetailsDto0.isContainsAuthorizationCode();
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isContainsClientCredentials_19()  throws Throwable  {
      //caseID:7a3ffc71b432c826155e0eca2e75f845
      //CoveredLines: [21, 21, 24, 24, 43, 44, 198]
      //Assert: assertFalse(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "authorizedGrantTypes", (Object) "1.0");
      
      //Call method: isContainsClientCredentials
      boolean boolean0 = oauthClientDetailsDto0.isContainsClientCredentials();
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isContainsImplicit_20()  throws Throwable  {
      //caseID:a0e7c04e64b955b6d07928ad22ab8992
      //CoveredLines: [21, 21, 24, 24, 43, 44, 194]
      //Assert: assertFalse(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "authorizedGrantTypes", (Object) "1");
      
      //Call method: isContainsImplicit
      boolean boolean0 = oauthClientDetailsDto0.isContainsImplicit();
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isContainsPassword_21()  throws Throwable  {
      //caseID:5db3e88a294ca872bf1ff7ac06b88a57
      //CoveredLines: [21, 21, 24, 24, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 190]
      //Assert: assertFalse(method_result);
      
      
      Instant instant0 = MockInstant.ofEpochSecond(831L);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(171);
      //mock clock0
      Clock clock0 = mock(Clock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(zoneOffset0).when(clock0).getZone();
      doReturn(instant0).when(clock0).instant();
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Integer integer0 = new Integer((-1967506245));
      //mock oauthClientDetails0
      OauthClientDetails oauthClientDetails0 = mock(OauthClientDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(oauthClientDetails0).accessTokenValidity();
      doReturn("1.0").when(oauthClientDetails0).additionalInformation();
      doReturn(false).when(oauthClientDetails0).archived();
      doReturn("refresh_token").when(oauthClientDetails0).authorities();
      doReturn("V!f'\"D4]4@fW").when(oauthClientDetails0).authorizedGrantTypes();
      doReturn(" ").when(oauthClientDetails0).clientId();
      doReturn("implicit").when(oauthClientDetails0).clientSecret();
      doReturn(localDateTime0).when(oauthClientDetails0).createTime();
      doReturn(integer0).when(oauthClientDetails0).refreshTokenValidity();
      doReturn("Z[kiY(_{*zD/LtA").when(oauthClientDetails0).resourceIds();
      doReturn("pMbha0PAfi").when(oauthClientDetails0).scope();
      doReturn(true).when(oauthClientDetails0).trusted();
      doReturn("1").when(oauthClientDetails0).webServerRedirectUri();
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto(oauthClientDetails0);
      
      //Call method: isContainsPassword
      boolean boolean0 = oauthClientDetailsDto0.isContainsPassword();
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isContainsRefreshToken_22()  throws Throwable  {
      //caseID:4fca8b87e22ef009d99c98d46b1c4fe8
      //CoveredLines: [21, 21, 24, 24, 43, 44, 202]
      //Assert: assertFalse(method_result);
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      PrivateAccess.setVariable((Class<?>) OauthClientDetailsDto.class, oauthClientDetailsDto0, "authorizedGrantTypes", (Object) "implicit");
      
      //Call method: isContainsRefreshToken
      boolean boolean0 = oauthClientDetailsDto0.isContainsRefreshToken();
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isTrusted_23()  throws Throwable  {
      //caseID:b8c2c916bf40b2faf6772e671526e698
      //CoveredLines: [21, 21, 24, 24, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 178]
      //Assert: assertFalse(method_result);
      
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      //mock oauthClientDetails0
      OauthClientDetails oauthClientDetails0 = mock(OauthClientDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("client_credentials").when(oauthClientDetails0).clientId();
      doReturn("*").when(oauthClientDetails0).clientSecret();
      doReturn(localDateTime0).when(oauthClientDetails0).createTime();
      doReturn("onError(null)").when(oauthClientDetails0).scope();
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto(oauthClientDetails0);
      
      //Call method: isTrusted
      boolean boolean0 = oauthClientDetailsDto0.isTrusted();
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_setAccessTokenValidity_24()  throws Throwable  {
      //caseID:fe9088a7dbfaab9c043849a6ea77de2c
      //CoveredLines: [21, 21, 24, 24, 43, 44, 158, 159]
      //Input_0_Integer: 1
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      Integer integer0 = new Integer(1);
      
      //Call method: setAccessTokenValidity
      oauthClientDetailsDto0.setAccessTokenValidity(integer0);
      
      //Test Result Assert
      assertNull(oauthClientDetailsDto0.getRefreshTokenValidity());
  }

  @Test(timeout = 9000)
  public void test_setAdditionalInformation_25()  throws Throwable  {
      //caseID:70374b7c606ca4f49204d0bb480963ac
      //CoveredLines: [21, 21, 24, 24, 43, 44, 174, 175]
      //Input_0_String: $62dt0Oq&G(`
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: setAdditionalInformation
      oauthClientDetailsDto0.setAdditionalInformation("$62dt0Oq&G(`");
      
      //Test Result Assert
      assertFalse(oauthClientDetailsDto0.isTrusted());
  }

  @Test(timeout = 9000)
  public void test_setArchived_26()  throws Throwable  {
      //caseID:2fa5262f1821d6e6b3fd78191d9582b3
      //CoveredLines: [21, 21, 24, 24, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 87, 88]
      //Input_0_boolean: true
      
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Integer integer0 = new Integer(1);
      //mock oauthClientDetails0
      OauthClientDetails oauthClientDetails0 = mock(OauthClientDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(oauthClientDetails0).accessTokenValidity();
      doReturn("1").when(oauthClientDetails0).additionalInformation();
      doReturn(true).when(oauthClientDetails0).archived();
      doReturn("authorization_code").when(oauthClientDetails0).authorities();
      doReturn("1").when(oauthClientDetails0).authorizedGrantTypes();
      doReturn("1").when(oauthClientDetails0).clientId();
      doReturn("1").when(oauthClientDetails0).clientSecret();
      doReturn(localDateTime0).when(oauthClientDetails0).createTime();
      doReturn(integer0).when(oauthClientDetails0).refreshTokenValidity();
      doReturn("1").when(oauthClientDetails0).resourceIds();
      doReturn("1").when(oauthClientDetails0).scope();
      doReturn(true).when(oauthClientDetails0).trusted();
      doReturn("1").when(oauthClientDetails0).webServerRedirectUri();
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto(oauthClientDetails0);
      
      //Call method: setArchived
      oauthClientDetailsDto0.setArchived(true);
      
      //Test Result Assert
      assertTrue(oauthClientDetailsDto0.isArchived());
  }

  @Test(timeout = 9000)
  public void test_setAuthorities_27()  throws Throwable  {
      //caseID:f5c8c29dba5c9e27104114a96a85c0ef
      //CoveredLines: [21, 21, 24, 24, 43, 44, 150, 151]
      //Input_0_String: null
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: setAuthorities
      oauthClientDetailsDto0.setAuthorities((String) null);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("11112111311141115111611171118111", oauthClientDetailsDto0.getClientSecret());
  }

  @Test(timeout = 9000)
  public void test_setAuthorizedGrantTypes_28()  throws Throwable  {
      //caseID:82e9dabe7c8c6d9bc7bd33d5dd67e539
      //CoveredLines: [21, 21, 24, 24, 43, 44, 134, 135]
      //Input_0_String: 
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: setAuthorizedGrantTypes
      oauthClientDetailsDto0.setAuthorizedGrantTypes("");
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("e2d9ead6208a48c9b20c5730af6407a5", oauthClientDetailsDto0.getClientId());
  }

  @Test(timeout = 9000)
  public void test_setClientId_29()  throws Throwable  {
      //caseID:82905ac2caca91c1cfaedd6a27935ef6
      //CoveredLines: [21, 21, 24, 24, 43, 44, 95, 96]
      //Input_0_String: 1.0
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: setClientId
      oauthClientDetailsDto0.setClientId("1.0");
      
      //Test Result Assert
      assertNull(oauthClientDetailsDto0.getWebServerRedirectUri());
  }

  @Test(timeout = 9000)
  public void test_setClientSecret_30()  throws Throwable  {
      //caseID:cf9e12dd1a514c7d6613dc51258dc86a
      //CoveredLines: [21, 21, 24, 24, 43, 44, 111, 112]
      //Input_0_String: 1
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: setClientSecret
      oauthClientDetailsDto0.setClientSecret("1");
      
      //Test Result Assert
      assertNull(oauthClientDetailsDto0.getRefreshTokenValidity());
  }

  @Test(timeout = 9000)
  public void test_setCreateTime_31()  throws Throwable  {
      //caseID:a9b211c92aa0652ee06f66a67e7d67f3
      //CoveredLines: [21, 21, 24, 24, 43, 44, 79, 80]
      //Input_0_String: r6txPu4b
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: setCreateTime
      oauthClientDetailsDto0.setCreateTime("r6txPu4b");
      
      //Test Result Assert
      assertNull(oauthClientDetailsDto0.getAuthorizedGrantTypes());
  }

  @Test(timeout = 9000)
  public void test_setRefreshTokenValidity_32()  throws Throwable  {
      //caseID:a6e566c5a9e26446b6272dc8c88461c7
      //CoveredLines: [21, 21, 24, 24, 43, 44, 166, 167]
      //Input_0_Integer: 0
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      Integer integer0 = new Integer(0);
      
      //Call method: setRefreshTokenValidity
      oauthClientDetailsDto0.setRefreshTokenValidity(integer0);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("5f2e3dc01feb45b9a3d100d2c27077cf", oauthClientDetailsDto0.getClientId());
  }

  @Test(timeout = 9000)
  public void test_setResourceIds_33()  throws Throwable  {
      //caseID:674e4f16bb3beafa4466fdffe2142363
      //CoveredLines: [21, 21, 24, 24, 43, 44, 103, 104]
      //Input_0_String: jYY[e^
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: setResourceIds
      oauthClientDetailsDto0.setResourceIds("jYY[e^");
      
      //Test Result Assert
      assertNull(oauthClientDetailsDto0.getCreateTime());
  }

  @Test(timeout = 9000)
  public void test_setScope_34()  throws Throwable  {
      //caseID:7c2cbdebe151c79952acfd9f4148e41f
      //CoveredLines: [21, 21, 24, 24, 43, 44, 119, 120]
      //Input_0_String: null
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: setScope
      oauthClientDetailsDto0.setScope((String) null);
      
      //Test Result Assert
      assertNull(oauthClientDetailsDto0.getResourceIds());
  }

  @Test(timeout = 9000)
  public void test_setTrusted_35()  throws Throwable  {
      //caseID:59f707bdeb51ad43e60b9182b5ab36f7
      //CoveredLines: [21, 21, 24, 24, 43, 44, 182, 183]
      //Input_0_boolean: true
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: setTrusted
      oauthClientDetailsDto0.setTrusted(true);
      
      //Test Result Assert
      assertNull(oauthClientDetailsDto0.getResourceIds());
  }

  @Test(timeout = 9000)
  public void test_setWebServerRedirectUri_36()  throws Throwable  {
      //caseID:0d49fa0d359b54afe05674b3c389a0b4
      //CoveredLines: [21, 21, 24, 24, 43, 44, 142, 143]
      //Input_0_String: Did not receive enough values in time. Expected: 
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      
      //Call method: setWebServerRedirectUri
      oauthClientDetailsDto0.setWebServerRedirectUri("Did not receive enough values in time. Expected: ");
      
      //Test Result Assert
      assertFalse(oauthClientDetailsDto0.isTrusted());
  }

  @Test(timeout = 9000)
  public void test_toDtos_37()  throws Throwable  {
      //caseID:fdf82eabde06cac6ac87dbd21325f3e6
      //CoveredLines: [21, 21, 24, 24, 43, 44, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 67, 68, 69, 70, 71]
      //Input_0_List<OauthClientDetails>: arrayList0
      //Assert: assertFalse(method_result.isEmpty());
      
      OauthClientDetailsDto oauthClientDetailsDto0 = new OauthClientDetailsDto();
      ArrayList<OauthClientDetails> arrayList0 = new ArrayList<OauthClientDetails>();
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      //mock oauthClientDetails0
      OauthClientDetails oauthClientDetails0 = mock(OauthClientDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("http://").when(oauthClientDetails0).clientId();
      doReturn("HF").when(oauthClientDetails0).clientSecret();
      doReturn(localDateTime0).when(oauthClientDetails0).createTime();
      doReturn(" ").when(oauthClientDetails0).scope();
      
      arrayList0.add(oauthClientDetails0);
      
      //Call method: toDtos
      List<OauthClientDetailsDto> list0 = OauthClientDetailsDto.toDtos(arrayList0);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }
}
