/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.common.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.uaa.common.cache.RedisCache;
import groovyjarjarasm.asm.Opcodes;
import java.util.Set;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.StringRedisTemplate;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class RedisCache_SSTest extends RedisCache_SSTest_scaffolding {
// allCoveredLines:[18, 19, 20, 24, 29, 34, 39, 40, 44, 45, 49, 50, 54, 59, 60, 64, 65, 69, 74, 79]

  @Test(timeout = 9000)
  public void test_append_00()  throws Throwable  {
      //caseID:761ef8f367efa01a5fc3ad46672cb2f3
      //CoveredLines: [18, 19, 20, 64, 65]
      //Input_0_String: 
      //Input_1_String: 1.0
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: append
      redisCache0.append("", "1.0");
  }

  @Test(timeout = 9000)
  public void test_del_01()  throws Throwable  {
      //caseID:c73030b4511036d5d63cca88cdbe97e0
      //CoveredLines: [18, 19, 20, 39, 40]
      //Input_0_String: 1.0
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: del
      redisCache0.del("1.0");
  }

  @Test(timeout = 9000)
  public void test_exists_02()  throws Throwable  {
      //caseID:58f39f67c4e37f2e7d0c616ec7609537
      //CoveredLines: [18, 19, 20, 34]
      //Input_0_String: V^FzsEtgg:=
      //Assert: assertNull(method_result);
      
      Boolean boolean0 = Boolean.FALSE;
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false, true).when(redisConnection0).isPipelined();
      doReturn(false).when(redisConnection0).isQueueing();
      doReturn(boolean0).when(redisConnection0).exists(any(byte[].class));
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: exists
      Boolean boolean1 = redisCache0.exists("V^FzsEtgg:=");
      
      //Test Result Assert
      assertNull(boolean1);
  }

  @Test(timeout = 9000)
  public void test_expire_03()  throws Throwable  {
      //caseID:00a40962fff36968e9a84172c524163d
      //CoveredLines: [18, 19, 20, 59, 60]
      //Input_0_String: *
      //Input_1_int: 0
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: expire
      redisCache0.expire("*", 0);
  }

  @Test(timeout = 9000)
  public void test_get_04()  throws Throwable  {
      //caseID:ab2b7766caca7fbdc87f4019fa1d1fca
      //CoveredLines: [18, 19, 20, 54]
      //Input_0_String: getConverterFromItemType
      //Assert: assertNull(method_result);
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: get
      String string0 = redisCache0.get("getConverterFromItemType");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getKeys_05()  throws Throwable  {
      //caseID:4fb0494ecb36e077e95744d784ec1cb2
      //CoveredLines: [18, 19, 20, 24, 29]
      //Assert: assertTrue(method_result.isEmpty());
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: getKeys
      Set<String> set0 = redisCache0.getKeys();
      
      //Test Result Assert
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 9000)
  public void test_getset_06()  throws Throwable  {
      //caseID:34aa30f1ffc6b88c3acbad87ad7d9f77
      //CoveredLines: [18, 19, 20, 69]
      //Input_0_String: 5
      //Input_1_String: *
      //Assert: assertNull(method_result);
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: getset
      String string0 = redisCache0.getset("5", "*");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_incrBy_07()  throws Throwable  {
      //caseID:9c990fea6f0ada5d7b84c456db355f44
      //CoveredLines: [18, 19, 20, 79]
      //Input_0_String: 
      //Input_1_Long: (-1L)
      //Assert: assertEquals((-1L), (long)method_result);
      
      Long long0 = new Long((-1L));
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false, false).when(redisConnection0).isPipelined();
      doReturn(false).when(redisConnection0).isQueueing();
      doReturn(long0).when(redisConnection0).incrBy(any(byte[].class) , anyLong());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: incrBy
      Long long1 = redisCache0.incrBy("", long0);
      
      //Test Result Assert
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 9000)
  public void test_set_08()  throws Throwable  {
      //caseID:693408037824b1fcb29744c1e1118c09
      //CoveredLines: [18, 19, 20, 49, 50]
      //Input_0_String: *
      //Input_1_String: Vb^:@:RQurN\"g
      //Input_2_Integer: Opcodes.UNINITIALIZED_THIS
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      Integer integer0 = Opcodes.UNINITIALIZED_THIS;
      
      //Call method: set
      redisCache0.set("*", "Vb^:@:RQurN\"g", integer0);
  }

  @Test(timeout = 9000)
  public void test_set_09()  throws Throwable  {
      //caseID:7cd9ba8112b77c064cb771e98984eafe
      //CoveredLines: [18, 19, 20, 44, 45]
      //Input_0_String: D2;]
      //Input_1_String: Ht5a1,G
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: set
      redisCache0.set("D2;]", "Ht5a1,G");
  }

  @Test(timeout = 9000)
  public void test_setnx_10()  throws Throwable  {
      //caseID:4db2f8018c40298281018e685b819937
      //CoveredLines: [18, 19, 20, 74]
      //Input_0_String: *
      //Input_1_String: 1.0
      //Assert: assertTrue(method_result);
      
      Boolean boolean0 = Boolean.TRUE;
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true, false).when(redisConnection0).isPipelined();
      doReturn(false).when(redisConnection0).isQueueing();
      doReturn(boolean0).when(redisConnection0).setNX(any(byte[].class) , any(byte[].class));
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: setnx
      boolean boolean1 = redisCache0.setnx("*", "1.0");
      
      //Test Result Assert
      assertTrue(boolean1);
  }
}
