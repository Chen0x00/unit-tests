/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.uaa.domain.OauthClientDetails;
import com.wanxin.uaa.domain.OauthClientDetailsDto;
import com.wanxin.uaa.repository.OauthRepository;
import com.wanxin.uaa.service.OauthServiceImpl;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.smartunit.runtime.mock.java.time.MockLocalDateTime;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OauthServiceImpl_SSTest extends OauthServiceImpl_SSTest_scaffolding {
// allCoveredLines:[22, 31, 37, 38, 44, 45, 46, 51, 52, 58, 59, 60, 61]

  @Test(timeout = 9000)
  public void test_archiveOauthClientDetails_0()  throws Throwable  {
      //caseID:cd6b09ec304500ba850278cb279cec67
      //CoveredLines: [22, 44, 45, 46]
      //Input_0_String: com.wanxin.uaa.service.OauthServiceImpl
      
      OauthServiceImpl oauthServiceImpl0 = new OauthServiceImpl();
      //mock oauthRepository0
      OauthRepository oauthRepository0 = mock(OauthRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OauthServiceImpl.class, oauthServiceImpl0, "oauthRepository", (Object) oauthRepository0);
      
      //Call method: archiveOauthClientDetails
      oauthServiceImpl0.archiveOauthClientDetails("com.wanxin.uaa.service.OauthServiceImpl");
  }

  @Test(timeout = 9000)
  public void test_loadAllOauthClientDetailsDtos_1()  throws Throwable  {
      //caseID:269d1b2073f99b546b96fba064449968
      //CoveredLines: [22, 37, 38]
      //Assert: assertEquals(0, method_result.size());
      
      OauthServiceImpl oauthServiceImpl0 = new OauthServiceImpl();
      ArrayList<OauthClientDetails> arrayList0 = new ArrayList<OauthClientDetails>();
      //mock oauthRepository0
      OauthRepository oauthRepository0 = mock(OauthRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(oauthRepository0).findAllOauthClientDetails();
      
      PrivateAccess.setVariable((Class<?>) OauthServiceImpl.class, oauthServiceImpl0, "oauthRepository", (Object) oauthRepository0);
      
      //Call method: loadAllOauthClientDetailsDtos
      List<OauthClientDetailsDto> list0 = oauthServiceImpl0.loadAllOauthClientDetailsDtos();
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 9000)
  public void test_loadOauthClientDetails_2()  throws Throwable  {
      //caseID:f6a1227a3a95f2876bfb813c12c89360
      //CoveredLines: [22, 31]
      //Input_0_String: 1
      //Assert: assertNull(method_result);
      
      OauthServiceImpl oauthServiceImpl0 = new OauthServiceImpl();
      //mock oauthRepository0
      OauthRepository oauthRepository0 = mock(OauthRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OauthServiceImpl.class, oauthServiceImpl0, "oauthRepository", (Object) oauthRepository0);
      
      //Call method: loadOauthClientDetails
      OauthClientDetails oauthClientDetails0 = oauthServiceImpl0.loadOauthClientDetails("1");
      
      //Test Result Assert
      assertNull(oauthClientDetails0);
  }

  @Test(timeout = 9000)
  public void test_loadOauthClientDetailsDto_3()  throws Throwable  {
      //caseID:f69b43f91af7f3a173d8c045728f741e
      //CoveredLines: [22, 51, 52]
      //Input_0_String: {}|Save OauthClientDetails: {}
      //Assert: assertNull(method_result.getResourceIds());
      
      OauthServiceImpl oauthServiceImpl0 = new OauthServiceImpl();
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      //mock oauthClientDetails0
      OauthClientDetails oauthClientDetails0 = mock(OauthClientDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(oauthClientDetails0).clientId();
      doReturn("").when(oauthClientDetails0).clientSecret();
      doReturn(localDateTime0).when(oauthClientDetails0).createTime();
      doReturn("com.wanxin.uaa.service.OauthServiceImpl").when(oauthClientDetails0).scope();
      //mock oauthRepository0
      OauthRepository oauthRepository0 = mock(OauthRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(oauthClientDetails0).when(oauthRepository0).findOauthClientDetails(anyString());
      
      PrivateAccess.setVariable((Class<?>) OauthServiceImpl.class, oauthServiceImpl0, "oauthRepository", (Object) oauthRepository0);
      
      //Call method: loadOauthClientDetailsDto
      OauthClientDetailsDto oauthClientDetailsDto0 = oauthServiceImpl0.loadOauthClientDetailsDto("{}|Save OauthClientDetails: {}");
      
      //Test Result Assert
      assertNull(oauthClientDetailsDto0.getResourceIds());
  }

  @Test(timeout = 9000)
  public void test_loadOauthClientDetailsDto_4()  throws Throwable  {
      //caseID:98407c237b437e8e71a217d5e768d4a1
      //CoveredLines: [22, 51, 52]
      //Input_0_String: +qV1LH
      //Assert: assertNull(method_result);
      
      OauthServiceImpl oauthServiceImpl0 = new OauthServiceImpl();
      //mock oauthRepository0
      OauthRepository oauthRepository0 = mock(OauthRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OauthServiceImpl.class, oauthServiceImpl0, "oauthRepository", (Object) oauthRepository0);
      
      //Call method: loadOauthClientDetailsDto
      OauthClientDetailsDto oauthClientDetailsDto0 = oauthServiceImpl0.loadOauthClientDetailsDto("+qV1LH");
      
      //Test Result Assert
      assertNull(oauthClientDetailsDto0);
  }

  @Test(timeout = 9000)
  public void test_registerClientDetails_5()  throws Throwable  {
      //caseID:da926ca543c3e2d7a8627606376da10e
      //CoveredLines: [22, 58, 59, 60, 61]
      //Input_0_OauthClientDetailsDto: {}
      
      OauthServiceImpl oauthServiceImpl0 = new OauthServiceImpl();
      //mock oauthRepository0
      OauthRepository oauthRepository0 = mock(OauthRepository.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OauthServiceImpl.class, oauthServiceImpl0, "oauthRepository", (Object) oauthRepository0);
      //mock oauthClientDetailsDto0
      OauthClientDetailsDto oauthClientDetailsDto0 = mock(OauthClientDetailsDto.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: registerClientDetails
      oauthServiceImpl0.registerClientDetails(oauthClientDetailsDto0);
  }
}
