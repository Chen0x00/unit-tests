/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.uaa.config;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.uaa.config.OauthUserApprovalHandler;
import com.wanxin.uaa.domain.OauthClientDetails;
import com.wanxin.uaa.service.OauthService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.provider.AuthorizationRequest;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OauthUserApprovalHandler_SSTest extends OauthUserApprovalHandler_SSTest_scaffolding {
// allCoveredLines:[18, 19, 23, 24, 26, 27, 30, 31, 36, 37]

  @Test(timeout = 9000)
  public void test_isApproved_0()  throws Throwable  {
      //caseID:5cc03f144bd9b13513595f02fabf41b5
      //CoveredLines: [18, 19, 23, 24]
      //Input_0_AuthorizationRequest: {isApproved=true}
      //Input_1_Authentication: {}
      //Assert: assertTrue(method_result);
      
      OauthUserApprovalHandler oauthUserApprovalHandler0 = new OauthUserApprovalHandler();
      //mock authorizationRequest0
      AuthorizationRequest authorizationRequest0 = mock(AuthorizationRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(authorizationRequest0).isApproved();
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: isApproved
      boolean boolean0 = oauthUserApprovalHandler0.isApproved(authorizationRequest0, authentication0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isApproved_1()  throws Throwable  {
      //caseID:24e332d90c07ad641402d0446181f8cd
      //CoveredLines: [18, 19, 23, 26, 27]
      //Input_0_AuthorizationRequest: {}
      //Input_1_Authentication: {}
      //Assert: assertFalse(method_result);
      
      OauthUserApprovalHandler oauthUserApprovalHandler0 = new OauthUserApprovalHandler();
      //mock authorizationRequest0
      AuthorizationRequest authorizationRequest0 = mock(AuthorizationRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: isApproved
      boolean boolean0 = oauthUserApprovalHandler0.isApproved(authorizationRequest0, authentication0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isApproved_2()  throws Throwable  {
      //caseID:5a718102e5172c63a7e1fab18a43478d
      //CoveredLines: [18, 19, 23, 26, 30, 31]
      //Input_0_AuthorizationRequest: {getClientId=\"wY\", isApproved=false}
      //Input_1_Authentication: {isAuthenticated=true}
      //Assert: assertTrue(method_result);
      
      OauthUserApprovalHandler oauthUserApprovalHandler0 = new OauthUserApprovalHandler();
      //mock oauthClientDetails0
      OauthClientDetails oauthClientDetails0 = mock(OauthClientDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(oauthClientDetails0).trusted();
      //mock oauthService0
      OauthService oauthService0 = mock(OauthService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(oauthClientDetails0).when(oauthService0).loadOauthClientDetails(nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) OauthUserApprovalHandler.class, oauthUserApprovalHandler0, "oauthService", (Object) oauthService0);
      //mock authorizationRequest0
      AuthorizationRequest authorizationRequest0 = mock(AuthorizationRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(authorizationRequest0).isApproved();
      doReturn("wY").when(authorizationRequest0).getClientId();
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(authentication0).isAuthenticated();
      
      //Call method: isApproved
      boolean boolean0 = oauthUserApprovalHandler0.isApproved(authorizationRequest0, authentication0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isApproved_3()  throws Throwable  {
      //caseID:6646892f59d69007cd9013093218f852
      //CoveredLines: [18, 19, 23, 26, 30, 31]
      //Input_0_AuthorizationRequest: {getClientId=\"wY\", isApproved=false}
      //Input_1_Authentication: {isAuthenticated=true}
      //Assert: assertFalse(method_result);
      
      OauthUserApprovalHandler oauthUserApprovalHandler0 = new OauthUserApprovalHandler();
      //mock oauthClientDetails0
      OauthClientDetails oauthClientDetails0 = mock(OauthClientDetails.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock oauthService0
      OauthService oauthService0 = mock(OauthService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(oauthClientDetails0).when(oauthService0).loadOauthClientDetails(nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) OauthUserApprovalHandler.class, oauthUserApprovalHandler0, "oauthService", (Object) oauthService0);
      //mock authorizationRequest0
      AuthorizationRequest authorizationRequest0 = mock(AuthorizationRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(authorizationRequest0).isApproved();
      doReturn("wY").when(authorizationRequest0).getClientId();
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(authentication0).isAuthenticated();
      
      //Call method: isApproved
      boolean boolean0 = oauthUserApprovalHandler0.isApproved(authorizationRequest0, authentication0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isApproved_4()  throws Throwable  {
      //caseID:77649d1138d7b341336113e9d03f05de
      //CoveredLines: [18, 19, 23, 26, 30, 31]
      //Input_0_AuthorizationRequest: {isApproved=false}
      //Input_1_Authentication: {isAuthenticated=true}
      //Assert: assertFalse(method_result);
      
      OauthUserApprovalHandler oauthUserApprovalHandler0 = new OauthUserApprovalHandler();
      //mock oauthService0
      OauthService oauthService0 = mock(OauthService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OauthUserApprovalHandler.class, oauthUserApprovalHandler0, "oauthService", (Object) oauthService0);
      //mock authorizationRequest0
      AuthorizationRequest authorizationRequest0 = mock(AuthorizationRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(authorizationRequest0).isApproved();
      //mock authentication0
      Authentication authentication0 = mock(Authentication.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(authentication0).isAuthenticated();
      
      //Call method: isApproved
      boolean boolean0 = oauthUserApprovalHandler0.isApproved(authorizationRequest0, authentication0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_setOauthService_5()  throws Throwable  {
      //caseID:84929269df607279e75486ad76b77676
      //CoveredLines: [18, 19, 36, 37]
      //Input_0_OauthService: {}
      
      OauthUserApprovalHandler oauthUserApprovalHandler0 = new OauthUserApprovalHandler();
      //mock oauthService0
      OauthService oauthService0 = mock(OauthService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setOauthService
      oauthUserApprovalHandler0.setOauthService(oauthService0);
  }
}
