/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.transaction.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.api.transaction.model.ProjectDTO;
import com.wanxin.api.transaction.model.ProjectWithTendersDTO;
import com.wanxin.api.transaction.model.TenderDTO;
import java.math.BigDecimal;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ProjectWithTendersDTO_SSTest extends ProjectWithTendersDTO_SSTest_scaffolding {
// allCoveredLines:[17, 22, 27, 32, 37]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:bd742fc0a246d4b67f5a25c6c91314b3
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Object: BigDecimal.ONE
      //Assert: assertFalse(method_result);
      
      ProjectWithTendersDTO projectWithTendersDTO0 = new ProjectWithTendersDTO();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: equals
      boolean boolean0 = projectWithTendersDTO0.equals(bigDecimal0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:ba14e3352ce9a3dbac7339e70e38a948
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Object: projectWithTendersDTO0
      //Assert: assertTrue(method_result);
      
      ProjectWithTendersDTO projectWithTendersDTO0 = new ProjectWithTendersDTO();
      
      //Call method: equals
      boolean boolean0 = projectWithTendersDTO0.equals(projectWithTendersDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:f888631d23848fe811f35eece4d2b752
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 27, 32, 37]
      //Input_0_Object: projectWithTendersDTO0
      //Assert: assertTrue(method_result);
      
      ProjectWithTendersDTO projectWithTendersDTO0 = new ProjectWithTendersDTO();
      ProjectWithTendersDTO projectWithTendersDTO1 = new ProjectWithTendersDTO();
      
      //Call method: equals
      boolean boolean0 = projectWithTendersDTO1.equals(projectWithTendersDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:ebd57b4dd102cb87c02de475979998a6
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 27, 32, 37]
      //Input_0_Object: projectWithTendersDTO1
      //Assert: assertTrue(method_result);
      
      ProjectWithTendersDTO projectWithTendersDTO0 = new ProjectWithTendersDTO();
      ProjectWithTendersDTO projectWithTendersDTO1 = new ProjectWithTendersDTO();
      
      //Call method: equals
      boolean boolean0 = projectWithTendersDTO0.equals(projectWithTendersDTO1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:0fc7a615e07adae6236dea2d76f2b2bb
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 27, 32, 37]
      
      ProjectWithTendersDTO projectWithTendersDTO0 = new ProjectWithTendersDTO();
      
      //Call method: hashCode
      projectWithTendersDTO0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setCommissionBorrowerAnnualRate_5()  throws Throwable  {
      //caseID:ae5cc2cedca9b38c4dfa41363787e2e7
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_BigDecimal: BigDecimal.ONE
      
      ProjectWithTendersDTO projectWithTendersDTO0 = new ProjectWithTendersDTO();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setCommissionBorrowerAnnualRate
      projectWithTendersDTO0.setCommissionBorrowerAnnualRate(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 9000)
  public void test_setCommissionInvestorAnnualRate_6()  throws Throwable  {
      //caseID:1f8bf3199dcf82b28294f23dc999a663
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_BigDecimal: BigDecimal.ZERO
      
      ProjectWithTendersDTO projectWithTendersDTO0 = new ProjectWithTendersDTO();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      //Call method: setCommissionInvestorAnnualRate
      projectWithTendersDTO0.setCommissionInvestorAnnualRate(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 9000)
  public void test_setProject_7()  throws Throwable  {
      //caseID:fea773be636b45e6fd1ce20a4b9fd60d
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_ProjectDTO: {}
      
      ProjectWithTendersDTO projectWithTendersDTO0 = new ProjectWithTendersDTO();
      //mock projectDTO0
      ProjectDTO projectDTO0 = mock(ProjectDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setProject
      projectWithTendersDTO0.setProject(projectDTO0);
  }

  @Test(timeout = 9000)
  public void test_setTenders_8()  throws Throwable  {
      //caseID:cf480c3ba364655896e7c950a3e8af7a
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_List<TenderDTO>: vector0
      
      ProjectWithTendersDTO projectWithTendersDTO0 = new ProjectWithTendersDTO();
      Vector<TenderDTO> vector0 = new Vector<TenderDTO>();
      
      //Call method: setTenders
      projectWithTendersDTO0.setTenders(vector0);
      
      //Test Result Assert
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 9000)
  public void test_toString_9()  throws Throwable  {
      //caseID:aa32d2ba1db46cb06b3596dfaa092b3a
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 27, 32, 37]
      //Assert: assertEquals("ProjectWithTendersDTO(project=null, tenders=null, commissionInvestorAnnualRate=null, commissionBorrowerAnnualRate=null)", method_result);
      
      ProjectWithTendersDTO projectWithTendersDTO0 = new ProjectWithTendersDTO();
      
      //Call method: toString
      String string0 = projectWithTendersDTO0.toString();
      
      //Test Result Assert
      assertEquals("ProjectWithTendersDTO(project=null, tenders=null, commissionInvestorAnnualRate=null, commissionBorrowerAnnualRate=null)", string0);
  }
}
