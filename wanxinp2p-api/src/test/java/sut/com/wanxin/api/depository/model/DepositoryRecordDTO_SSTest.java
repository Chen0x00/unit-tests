/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.depository.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.api.depository.model.DepositoryRecordDTO;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.smartunit.runtime.mock.java.time.MockInstant;
import org.smartunit.runtime.mock.java.time.MockLocalDateTime;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class DepositoryRecordDTO_SSTest extends DepositoryRecordDTO_SSTest_scaffolding {
// allCoveredLines:[19, 20, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:4e044664641d350f94ff61949b47132a
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 48]
      //Input_0_Object: depositoryRecordDTO0
      //Assert: assertTrue(method_result);
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      
      depositoryRecordDTO0.getConfirmDate();
      
      //Call method: equals
      boolean boolean0 = depositoryRecordDTO0.equals(depositoryRecordDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:d52aa3167d934d93cf7d80e6ba7acee0
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 48]
      //Input_0_Object: 0
      //Assert: assertFalse(method_result);
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      
      depositoryRecordDTO0.getConfirmDate();
      
      //Call method: equals
      boolean boolean0 = depositoryRecordDTO0.equals("0");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:75410a9818d4ca723b81d85aed2865d2
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 24, 48]
      //Input_0_Object: depositoryRecordDTO0
      //Assert: assertFalse(method_result);
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      Long long0 = new Long(43);
      
      depositoryRecordDTO0.getConfirmDate();
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordDTO.class, depositoryRecordDTO0, "id", (Object) long0);
      DepositoryRecordDTO depositoryRecordDTO1 = new DepositoryRecordDTO();
      
      //Call method: equals
      boolean boolean0 = depositoryRecordDTO1.equals(depositoryRecordDTO0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:21520c5420ed16917a16ba30e81ad409
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 24, 48]
      //Input_0_Object: depositoryRecordDTO1
      //Assert: assertFalse(method_result);
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      Long long0 = new Long(59);
      
      depositoryRecordDTO0.getConfirmDate();
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordDTO.class, depositoryRecordDTO0, "id", (Object) long0);
      DepositoryRecordDTO depositoryRecordDTO1 = new DepositoryRecordDTO();
      
      //Call method: equals
      boolean boolean0 = depositoryRecordDTO0.equals(depositoryRecordDTO1);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:9ca8b0f990d1ee39b3edc372d9a2fce0
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51]
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      
      depositoryRecordDTO0.getConfirmDate();
      
      //Call method: hashCode
      depositoryRecordDTO0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_hashCode_05()  throws Throwable  {
      //caseID:286c7c5e8b83880781881beb38a96bf6
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51]
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      
      //Call method: hashCode
      depositoryRecordDTO0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setConfirmDate_06()  throws Throwable  {
      //caseID:336ee715abc10b4a82b3c1978c10bfdd
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_LocalDateTime: localDateTime0
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      
      //Call method: setConfirmDate
      depositoryRecordDTO0.setConfirmDate(localDateTime0);
      
      //Test Result Assert
      assertNull(depositoryRecordDTO0.getObjectId());
  }

  @Test(timeout = 9000)
  public void test_setCreateDate_07()  throws Throwable  {
      //caseID:d7925ea1d1d5068fb3a9c460118706f5
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_LocalDateTime: localDateTime0
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      
      Instant instant0 = MockInstant.ofEpochSecond((long) 0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      //mock clock0
      Clock clock0 = mock(Clock.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(zoneOffset0, zoneOffset0).when(clock0).getZone();
      doReturn(instant0, instant0).when(clock0).instant();
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      
      //Call method: setCreateDate
      depositoryRecordDTO0.setCreateDate(localDateTime0);
      
      //Test Result Assert
      assertNull(depositoryRecordDTO0.getObjectType());
  }

  @Test(timeout = 9000)
  public void test_setId_08()  throws Throwable  {
      //caseID:9d026308fcf263518fc4139190121f91
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_Long: 2295L
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      Long long0 = new Long(2295L);
      
      //Call method: setId
      depositoryRecordDTO0.setId(long0);
      
      //Test Result Assert
      assertNull(depositoryRecordDTO0.getObjectId());
  }

  @Test(timeout = 9000)
  public void test_setIsSyn_09()  throws Throwable  {
      //caseID:d4db5f23b60711375fef010678b94fe7
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 48]
      //Input_0_Integer: 144
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      Integer integer0 = new Integer(144);
      
      depositoryRecordDTO0.getConfirmDate();
      
      //Call method: setIsSyn
      depositoryRecordDTO0.setIsSyn(integer0);
      
      //Test Result Assert
      assertNull(depositoryRecordDTO0.getResponseData());
  }

  @Test(timeout = 9000)
  public void test_setObjectId_10()  throws Throwable  {
      //caseID:bc1329faa80f226306e1506882389055
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 39]
      //Input_0_Long: 0L
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      Long long0 = new Long(0L);
      
      depositoryRecordDTO0.getCreateDate();
      
      //Call method: setObjectId
      depositoryRecordDTO0.setObjectId(long0);
      
      //Test Result Assert
      assertNull(depositoryRecordDTO0.getRequestStatus());
  }

  @Test(timeout = 9000)
  public void test_setObjectType_11()  throws Throwable  {
      //caseID:38c0aa9b0ee27768aa215503a168ee26
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 48]
      //Input_0_String: , objectType=
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      
      depositoryRecordDTO0.getConfirmDate();
      
      //Call method: setObjectType
      depositoryRecordDTO0.setObjectType(", objectType=");
      
      //Test Result Assert
      assertNull(depositoryRecordDTO0.getRequestNo());
  }

  @Test(timeout = 9000)
  public void test_setRequestNo_12()  throws Throwable  {
      //caseID:cf722ebacbff77bbfaff97480222ce08
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_String: org.springframework.data.util.ParameterizedTypeInformation
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      
      //Call method: setRequestNo
      depositoryRecordDTO0.setRequestNo("org.springframework.data.util.ParameterizedTypeInformation");
      
      //Test Result Assert
      assertNull(depositoryRecordDTO0.getIsSyn());
  }

  @Test(timeout = 9000)
  public void test_setRequestStatus_13()  throws Throwable  {
      //caseID:71cf76db53c03c6f98d23fb9116e4c0b
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_Integer: 36
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      Integer integer0 = new Integer(36);
      
      //Call method: setRequestStatus
      depositoryRecordDTO0.setRequestStatus(integer0);
      
      //Test Result Assert
      assertNull(depositoryRecordDTO0.getObjectType());
  }

  @Test(timeout = 9000)
  public void test_setRequestType_14()  throws Throwable  {
      //caseID:c7ab7e0c9f21c6849ddc0fbd4c1cb9da
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 48]
      //Input_0_String: Floats.stringConverter()
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      
      depositoryRecordDTO0.getConfirmDate();
      
      //Call method: setRequestType
      depositoryRecordDTO0.setRequestType("Floats.stringConverter()");
      
      //Test Result Assert
      assertEquals("Floats.stringConverter()", depositoryRecordDTO0.getRequestType());
  }

  @Test(timeout = 9000)
  public void test_setResponseData_15()  throws Throwable  {
      //caseID:61b7d106c443eb6f0c16a6a90bc9efea
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 39]
      //Input_0_String: DepositoryRecordDTO(id=
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      
      depositoryRecordDTO0.getCreateDate();
      
      //Call method: setResponseData
      depositoryRecordDTO0.setResponseData("DepositoryRecordDTO(id=");
      
      //Test Result Assert
      assertNull(depositoryRecordDTO0.getId());
  }

  @Test(timeout = 9000)
  public void test_toString_16()  throws Throwable  {
      //caseID:03913e4a6b17ae6e2ab35fa2aa027c78
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51]
      //Assert: assertEquals("DepositoryRecordDTO(id=null, requestNo=null, requestType=null, objectType=null, objectId=null, createDate=null, isSyn=null, requestStatus=null, confirmDate=null, responseData=null)", method_result);
      
      DepositoryRecordDTO depositoryRecordDTO0 = new DepositoryRecordDTO();
      
      depositoryRecordDTO0.getConfirmDate();
      
      //Call method: toString
      String string0 = depositoryRecordDTO0.toString();
      
      //Test Result Assert
      assertEquals("DepositoryRecordDTO(id=null, requestNo=null, requestType=null, objectType=null, objectId=null, createDate=null, isSyn=null, requestStatus=null, confirmDate=null, responseData=null)", string0);
  }
}
