/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.consumer.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.api.consumer.model.FileTokenDTO;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class FileTokenDTO_SSTest extends FileTokenDTO_SSTest_scaffolding {
// allCoveredLines:[12, 16, 19, 22]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:3687be4e05446401d935bc8a5006ac02
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_Object: 59
      //Assert: assertFalse(method_result);
      
      FileTokenDTO fileTokenDTO0 = new FileTokenDTO();
      
      //Call method: equals
      boolean boolean0 = fileTokenDTO0.equals("59");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:eb1d96bfab41258b20a570945b614a98
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_Object: fileTokenDTO0
      //Assert: assertTrue(method_result);
      
      FileTokenDTO fileTokenDTO0 = new FileTokenDTO();
      
      //Call method: equals
      boolean boolean0 = fileTokenDTO0.equals(fileTokenDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:ae619a7530e82897b3ac5963386a5395
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 16, 19, 22]
      //Input_0_Object: fileTokenDTO0
      //Assert: assertTrue(method_result);
      
      FileTokenDTO fileTokenDTO0 = new FileTokenDTO();
      FileTokenDTO fileTokenDTO1 = new FileTokenDTO();
      
      //Call method: equals
      boolean boolean0 = fileTokenDTO1.equals(fileTokenDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:e1bd373ec33eb302d79ecf71d8b0674b
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 16, 19, 22]
      //Input_0_Object: fileTokenDTO1
      //Assert: assertTrue(method_result);
      
      FileTokenDTO fileTokenDTO0 = new FileTokenDTO();
      FileTokenDTO fileTokenDTO1 = new FileTokenDTO();
      
      //Call method: equals
      boolean boolean0 = fileTokenDTO0.equals(fileTokenDTO1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:fff696a7d524641644efc86ecb258ade
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 16, 19, 22]
      
      FileTokenDTO fileTokenDTO0 = new FileTokenDTO();
      
      //Call method: hashCode
      fileTokenDTO0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAccessKey_5()  throws Throwable  {
      //caseID:dd505c6b047c467566ee96f16ab2337f
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: 1.0
      
      FileTokenDTO fileTokenDTO0 = new FileTokenDTO();
      
      //Call method: setAccessKey
      fileTokenDTO0.setAccessKey("1.0");
      
      //Test Result Assert
      assertNull(fileTokenDTO0.getAppId());
  }

  @Test(timeout = 9000)
  public void test_setAppId_6()  throws Throwable  {
      //caseID:b35be5f62d2b111d05e3f5e19fa63065
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: eF_>16epJuRFkEQvJ
      
      FileTokenDTO fileTokenDTO0 = new FileTokenDTO();
      
      //Call method: setAppId
      fileTokenDTO0.setAppId("eF_>16epJuRFkEQvJ");
      
      //Test Result Assert
      assertEquals("eF_>16epJuRFkEQvJ", fileTokenDTO0.getAppId());
  }

  @Test(timeout = 9000)
  public void test_setSecretKey_7()  throws Throwable  {
      //caseID:b52f80762320a8eee72f91cecb778662
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: , secretKey=
      
      FileTokenDTO fileTokenDTO0 = new FileTokenDTO();
      
      //Call method: setSecretKey
      fileTokenDTO0.setSecretKey(", secretKey=");
      
      //Test Result Assert
      assertNull(fileTokenDTO0.getAccessKey());
  }

  @Test(timeout = 9000)
  public void test_toString_8()  throws Throwable  {
      //caseID:f6d029dea95d20023b1f35babe921aaf
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 16, 19, 22]
      //Assert: assertEquals("FileTokenDTO(appId=null, accessKey=null, secretKey=null)", method_result);
      
      FileTokenDTO fileTokenDTO0 = new FileTokenDTO();
      
      //Call method: toString
      String string0 = fileTokenDTO0.toString();
      
      //Test Result Assert
      assertEquals("FileTokenDTO(appId=null, accessKey=null, secretKey=null)", string0);
  }
}
