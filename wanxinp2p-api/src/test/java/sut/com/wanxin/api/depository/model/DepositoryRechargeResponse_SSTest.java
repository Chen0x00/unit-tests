/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.depository.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.api.depository.model.DepositoryRechargeResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class DepositoryRechargeResponse_SSTest extends DepositoryRechargeResponse_SSTest_scaffolding {
// allCoveredLines:[15, 20]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:15bf6208f2ac2434b3017a6009fc08d0
      //CoveredLines: [15, 15, 15, 15, 15, 15]
      //Input_0_Object: depositoryRechargeResponse0
      //Assert: assertTrue(method_result);
      
      DepositoryRechargeResponse depositoryRechargeResponse0 = new DepositoryRechargeResponse();
      
      //Call method: equals
      boolean boolean0 = depositoryRechargeResponse0.equals(depositoryRechargeResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:cf6c38a42ba8045e6a9c6fa1d5181884
      //CoveredLines: [15, 15, 15, 15, 15, 15]
      //Input_0_Object: READ_ONLY
      //Assert: assertFalse(method_result);
      
      DepositoryRechargeResponse depositoryRechargeResponse0 = new DepositoryRechargeResponse();
      
      //Call method: equals
      boolean boolean0 = depositoryRechargeResponse0.equals("READ_ONLY");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:1013cb8fc9d015d7054a1b8f523c4281
      //CoveredLines: [15, 15, 15, 15, 15, 15, 20]
      //Input_0_Object: depositoryRechargeResponse0
      //Assert: assertTrue(method_result);
      
      DepositoryRechargeResponse depositoryRechargeResponse0 = new DepositoryRechargeResponse();
      DepositoryRechargeResponse depositoryRechargeResponse1 = new DepositoryRechargeResponse();
      
      //Call method: equals
      boolean boolean0 = depositoryRechargeResponse1.equals(depositoryRechargeResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:dc927d2e6a324a3fed4e1f71d137a3fb
      //CoveredLines: [15, 15, 15, 15, 15, 15, 20]
      //Input_0_Object: depositoryRechargeResponse1
      //Assert: assertTrue(method_result);
      
      DepositoryRechargeResponse depositoryRechargeResponse0 = new DepositoryRechargeResponse();
      DepositoryRechargeResponse depositoryRechargeResponse1 = new DepositoryRechargeResponse();
      
      //Call method: equals
      boolean boolean0 = depositoryRechargeResponse0.equals(depositoryRechargeResponse1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_getTransactionStatus_4()  throws Throwable  {
      //caseID:5eeb6b2d071d9c63365642e6197d212a
      //CoveredLines: [15, 15, 15, 15, 15, 15, 20]
      //Assert: assertNull(method_result);
      
      DepositoryRechargeResponse depositoryRechargeResponse0 = new DepositoryRechargeResponse();
      
      //Call method: getTransactionStatus
      String string0 = depositoryRechargeResponse0.getTransactionStatus();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_5()  throws Throwable  {
      //caseID:0fcb511da789d5d19992e3ce569af4da
      //CoveredLines: [15, 15, 15, 15, 15, 15, 20]
      
      DepositoryRechargeResponse depositoryRechargeResponse0 = new DepositoryRechargeResponse();
      
      //Call method: hashCode
      depositoryRechargeResponse0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setTransactionStatus_6()  throws Throwable  {
      //caseID:31d6594367b805462382ff1ea02a69e1
      //CoveredLines: [15, 15, 15, 15, 15, 15]
      //Input_0_String: Qke!xR!AS>^uToI
      
      DepositoryRechargeResponse depositoryRechargeResponse0 = new DepositoryRechargeResponse();
      
      //Call method: setTransactionStatus
      depositoryRechargeResponse0.setTransactionStatus("Qke!xR!AS>^uToI");
      
      //Test Result Assert
      assertEquals("Qke!xR!AS>^uToI", depositoryRechargeResponse0.getTransactionStatus());
  }

  @Test(timeout = 9000)
  public void test_toString_7()  throws Throwable  {
      //caseID:6ca651ecede0d295fa923a96e3bcdf2f
      //CoveredLines: [15, 15, 15, 15, 15, 15, 20]
      //Assert: assertEquals("DepositoryRechargeResponse(transactionStatus=null)", method_result);
      
      DepositoryRechargeResponse depositoryRechargeResponse0 = new DepositoryRechargeResponse();
      
      //Call method: toString
      String string0 = depositoryRechargeResponse0.toString();
      
      //Test Result Assert
      assertEquals("DepositoryRechargeResponse(transactionStatus=null)", string0);
  }
}
