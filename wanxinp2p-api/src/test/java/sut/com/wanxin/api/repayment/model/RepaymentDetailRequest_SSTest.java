/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.repayment.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.api.repayment.model.RepaymentDetailRequest;
import java.math.BigDecimal;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class RepaymentDetailRequest_SSTest extends RepaymentDetailRequest_SSTest_scaffolding {
// allCoveredLines:[17, 22, 25, 28, 31, 34]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:d0ae26ca8d4c68bd9817299daad5c0d7
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Object: READ_WRITE
      //Assert: assertFalse(method_result);
      
      RepaymentDetailRequest repaymentDetailRequest0 = new RepaymentDetailRequest();
      
      //Call method: equals
      boolean boolean0 = repaymentDetailRequest0.equals("READ_WRITE");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:9264d5ff04760f8b9960cb02c45a0659
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Object: repaymentDetailRequest0
      //Assert: assertTrue(method_result);
      
      RepaymentDetailRequest repaymentDetailRequest0 = new RepaymentDetailRequest();
      
      //Call method: equals
      boolean boolean0 = repaymentDetailRequest0.equals(repaymentDetailRequest0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:54da79c290dcb3980a777654164ecbf9
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 25, 28, 31, 34]
      //Input_0_Object: repaymentDetailRequest0
      //Assert: assertTrue(method_result);
      
      RepaymentDetailRequest repaymentDetailRequest0 = new RepaymentDetailRequest();
      RepaymentDetailRequest repaymentDetailRequest1 = new RepaymentDetailRequest();
      
      //Call method: equals
      boolean boolean0 = repaymentDetailRequest1.equals(repaymentDetailRequest0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:3715fd20b11ba2eccea3cb251175f6e6
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 25, 28, 31, 34]
      //Input_0_Object: repaymentDetailRequest1
      //Assert: assertTrue(method_result);
      
      RepaymentDetailRequest repaymentDetailRequest0 = new RepaymentDetailRequest();
      RepaymentDetailRequest repaymentDetailRequest1 = new RepaymentDetailRequest();
      
      //Call method: equals
      boolean boolean0 = repaymentDetailRequest0.equals(repaymentDetailRequest1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:6dd836106e90ea356a99701b4a02031d
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 25, 28, 31, 34]
      
      RepaymentDetailRequest repaymentDetailRequest0 = new RepaymentDetailRequest();
      
      //Call method: hashCode
      repaymentDetailRequest0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAmount_05()  throws Throwable  {
      //caseID:70ba6fc25e2e020b7a1903ac6fac7175
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_BigDecimal: 1505L
      
      RepaymentDetailRequest repaymentDetailRequest0 = new RepaymentDetailRequest();
      BigDecimal bigDecimal0 = new BigDecimal(1505L);
      
      //Call method: setAmount
      repaymentDetailRequest0.setAmount(bigDecimal0);
      
      //Test Result Assert
      assertEquals((byte) (-31), bigDecimal0.byteValue());
  }

  @Test(timeout = 9000)
  public void test_setCommission_06()  throws Throwable  {
      //caseID:77b7f950cbdd7bef2f0f0d6eced73819
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_BigDecimal: BigDecimal.ZERO
      
      RepaymentDetailRequest repaymentDetailRequest0 = new RepaymentDetailRequest();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      //Call method: setCommission
      repaymentDetailRequest0.setCommission(bigDecimal0);
      
      //Test Result Assert
      assertNull(repaymentDetailRequest0.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setDividend_07()  throws Throwable  {
      //caseID:6328a92cee4b2f20d15eaf89b2c90767
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_BigDecimal: BigDecimal.ZERO
      
      RepaymentDetailRequest repaymentDetailRequest0 = new RepaymentDetailRequest();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      //Call method: setDividend
      repaymentDetailRequest0.setDividend(bigDecimal0);
      
      //Test Result Assert
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 9000)
  public void test_setInterest_08()  throws Throwable  {
      //caseID:311e3e54685a30956783fbbbe902d252
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_BigDecimal: BigDecimal.ONE
      
      RepaymentDetailRequest repaymentDetailRequest0 = new RepaymentDetailRequest();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setInterest
      repaymentDetailRequest0.setInterest(bigDecimal0);
      
      //Test Result Assert
      assertNull(repaymentDetailRequest0.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setUserNo_09()  throws Throwable  {
      //caseID:b33eb173f1fcdde0422794b57efb0836
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_String: D&c^EDF,=={cfGI>%iE
      
      RepaymentDetailRequest repaymentDetailRequest0 = new RepaymentDetailRequest();
      
      //Call method: setUserNo
      repaymentDetailRequest0.setUserNo("D&c^EDF,=={cfGI>%iE");
      
      //Test Result Assert
      assertEquals("D&c^EDF,=={cfGI>%iE", repaymentDetailRequest0.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_toString_10()  throws Throwable  {
      //caseID:6f61a063651020f78401489b037ef3bf
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 25, 28, 31, 34]
      //Assert: assertEquals("RepaymentDetailRequest(userNo=null, commission=null, dividend=null, amount=null, interest=null)", method_result);
      
      RepaymentDetailRequest repaymentDetailRequest0 = new RepaymentDetailRequest();
      
      //Call method: toString
      String string0 = repaymentDetailRequest0.toString();
      
      //Test Result Assert
      assertEquals("RepaymentDetailRequest(userNo=null, commission=null, dividend=null, amount=null, interest=null)", string0);
  }
}
