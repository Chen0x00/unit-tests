/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.account.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.api.account.model.AccountDTO;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class AccountDTO_SSTest extends AccountDTO_SSTest_scaffolding {
// allCoveredLines:[12, 17, 20, 23, 26, 29]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:2a776844a4d29b49235c67c9fdcf845e
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_Object: accountDTO0
      //Assert: assertTrue(method_result);
      
      AccountDTO accountDTO0 = new AccountDTO();
      
      //Call method: equals
      boolean boolean0 = accountDTO0.equals(accountDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:da98c7f893949b75a7a801f2d2a3dd3a
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_Object: 1809
      //Assert: assertFalse(method_result);
      
      AccountDTO accountDTO0 = new AccountDTO();
      Integer integer0 = new Integer(1809);
      
      //Call method: equals
      boolean boolean0 = accountDTO0.equals(integer0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:54f67a52345311910b73c9f2f44d499a
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 20, 23, 26, 29]
      //Input_0_Object: accountDTO0
      //Assert: assertTrue(method_result);
      
      AccountDTO accountDTO0 = new AccountDTO();
      AccountDTO accountDTO1 = new AccountDTO();
      
      //Call method: equals
      boolean boolean0 = accountDTO1.equals(accountDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:79cb6e4dd8dabb68f8651dad1d29a9d9
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 20, 23, 26, 29]
      //Input_0_Object: accountDTO1
      //Assert: assertTrue(method_result);
      
      AccountDTO accountDTO0 = new AccountDTO();
      AccountDTO accountDTO1 = new AccountDTO();
      
      //Call method: equals
      boolean boolean0 = accountDTO0.equals(accountDTO1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:da11a9ed16012a67255a08cef22d330e
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 20, 23, 26, 29]
      
      AccountDTO accountDTO0 = new AccountDTO();
      
      //Call method: hashCode
      accountDTO0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setDomain_05()  throws Throwable  {
      //caseID:198f15f116b4880b6d5aa50a091dac3b
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: READ_ONLY
      
      AccountDTO accountDTO0 = new AccountDTO();
      
      //Call method: setDomain
      accountDTO0.setDomain("READ_ONLY");
      
      //Test Result Assert
      assertNull(accountDTO0.getId());
  }

  @Test(timeout = 9000)
  public void test_setId_06()  throws Throwable  {
      //caseID:097a8950c24b0cd45adc2159d2256b72
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_Long: 393L
      
      AccountDTO accountDTO0 = new AccountDTO();
      Long long0 = new Long(393L);
      
      //Call method: setId
      accountDTO0.setId(long0);
      
      //Test Result Assert
      assertNull(accountDTO0.getMobile());
  }

  @Test(timeout = 9000)
  public void test_setMobile_07()  throws Throwable  {
      //caseID:0aa35fbb59d423707a33edd7d6f91b87
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: 1.0
      
      AccountDTO accountDTO0 = new AccountDTO();
      
      //Call method: setMobile
      accountDTO0.setMobile("1.0");
      
      //Test Result Assert
      assertNull(accountDTO0.getDomain());
  }

  @Test(timeout = 9000)
  public void test_setStatus_08()  throws Throwable  {
      //caseID:f4b4cbb0e4d7876b953630dceca181a4
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_Integer: 59
      
      AccountDTO accountDTO0 = new AccountDTO();
      Integer integer0 = new Integer(59);
      
      //Call method: setStatus
      accountDTO0.setStatus(integer0);
      
      //Test Result Assert
      assertNull(accountDTO0.getMobile());
  }

  @Test(timeout = 9000)
  public void test_setUsername_09()  throws Throwable  {
      //caseID:727d7926d0d748c07ef6185d3f3170e7
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: 
      
      AccountDTO accountDTO0 = new AccountDTO();
      
      //Call method: setUsername
      accountDTO0.setUsername("");
      
      //Test Result Assert
      assertEquals("", accountDTO0.getUsername());
  }

  @Test(timeout = 9000)
  public void test_toString_10()  throws Throwable  {
      //caseID:6a225c5a9ecbdf738a0e217399cf5216
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 20, 23, 26, 29]
      //Assert: assertEquals("AccountDTO(id=null, username=null, mobile=null, status=null, domain=null)", method_result);
      
      AccountDTO accountDTO0 = new AccountDTO();
      
      //Call method: toString
      String string0 = accountDTO0.toString();
      
      //Test Result Assert
      assertEquals("AccountDTO(id=null, username=null, mobile=null, status=null, domain=null)", string0);
  }
}
