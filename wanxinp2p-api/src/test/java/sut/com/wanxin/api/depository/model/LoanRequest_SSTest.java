/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.depository.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.api.depository.model.LoanDetailRequest;
import com.wanxin.api.depository.model.LoanRequest;
import java.math.BigDecimal;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class LoanRequest_SSTest extends LoanRequest_SSTest_scaffolding {
// allCoveredLines:[16, 21, 26, 31, 36, 41]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:87190fca13de0b2234e1205e1557399d
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_Object: loanRequest0
      //Assert: assertTrue(method_result);
      
      LoanRequest loanRequest0 = new LoanRequest();
      
      //Call method: equals
      boolean boolean0 = loanRequest0.equals(loanRequest0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:a5a3d3a1da09979d442f3d2178180f2c
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_Object: 
      //Assert: assertFalse(method_result);
      
      LoanRequest loanRequest0 = new LoanRequest();
      
      //Call method: equals
      boolean boolean0 = loanRequest0.equals("");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:92e7329d50a31d69f7da0d6210b54627
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 26, 31, 36, 41]
      //Input_0_Object: loanRequest1
      //Assert: assertTrue(method_result);
      
      LoanRequest loanRequest0 = new LoanRequest();
      LoanRequest loanRequest1 = new LoanRequest();
      
      //Call method: equals
      boolean boolean0 = loanRequest0.equals(loanRequest1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:6a4f94bb00751bf807f9a1d2e2d6adb4
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 26, 31, 36, 41]
      //Input_0_Object: loanRequest0
      //Assert: assertTrue(method_result);
      
      LoanRequest loanRequest0 = new LoanRequest();
      LoanRequest loanRequest1 = new LoanRequest();
      
      //Call method: equals
      boolean boolean0 = loanRequest1.equals(loanRequest0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:684923f9796ded6b8ba18baebbf94526
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 26, 31, 36, 41]
      
      LoanRequest loanRequest0 = new LoanRequest();
      
      //Call method: hashCode
      loanRequest0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setCommission_05()  throws Throwable  {
      //caseID:1caf2365f9c1cc53636a3055066c2d0a
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_BigDecimal: (-1639.20766)
      
      LoanRequest loanRequest0 = new LoanRequest();
      BigDecimal bigDecimal0 = new BigDecimal((-1639.20766));
      
      //Call method: setCommission
      loanRequest0.setCommission(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short) (-1639), bigDecimal0.shortValue());
  }

  @Test(timeout = 9000)
  public void test_setDetails_06()  throws Throwable  {
      //caseID:892a2ee8cea7430217b5baf49de97801
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_List<LoanDetailRequest>: vector0
      
      LoanRequest loanRequest0 = new LoanRequest();
      Vector<LoanDetailRequest> vector0 = new Vector<LoanDetailRequest>();
      
      //Call method: setDetails
      loanRequest0.setDetails(vector0);
      
      //Test Result Assert
      assertNull(loanRequest0.getId());
  }

  @Test(timeout = 9000)
  public void test_setId_07()  throws Throwable  {
      //caseID:77d4f836249f51f04a7a4ca737d29014
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_Long: 0L
      
      LoanRequest loanRequest0 = new LoanRequest();
      Long long0 = new Long(0L);
      
      //Call method: setId
      loanRequest0.setId(long0);
      
      //Test Result Assert
      assertNull(loanRequest0.getRequestNo());
  }

  @Test(timeout = 9000)
  public void test_setProjectNo_08()  throws Throwable  {
      //caseID:ef4deedf17b0e0b86a16eb9897c26643
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_String: IpHOY
      
      LoanRequest loanRequest0 = new LoanRequest();
      
      //Call method: setProjectNo
      loanRequest0.setProjectNo("IpHOY");
      
      //Test Result Assert
      assertNull(loanRequest0.getRequestNo());
  }

  @Test(timeout = 9000)
  public void test_setRequestNo_09()  throws Throwable  {
      //caseID:d456cbcd36e860afad13e589912cbfef
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_String: , projectNo=
      
      LoanRequest loanRequest0 = new LoanRequest();
      
      //Call method: setRequestNo
      loanRequest0.setRequestNo(", projectNo=");
      
      //Test Result Assert
      assertEquals(", projectNo=", loanRequest0.getRequestNo());
  }

  @Test(timeout = 9000)
  public void test_toString_10()  throws Throwable  {
      //caseID:fd24bc3f32fad71ff8697b9bbdd4c288
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 26, 31, 36, 41]
      //Assert: assertEquals("LoanRequest(details=null, commission=null, projectNo=null, requestNo=null, id=null)", method_result);
      
      LoanRequest loanRequest0 = new LoanRequest();
      
      //Call method: toString
      String string0 = loanRequest0.toString();
      
      //Test Result Assert
      assertEquals("LoanRequest(details=null, commission=null, projectNo=null, requestNo=null, id=null)", string0);
  }
}
