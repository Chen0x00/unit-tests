/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.repayment.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.api.repayment.model.RepaymentPlanDTO;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.mock.java.time.MockLocalDateTime;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class RepaymentPlanDTO_SSTest extends RepaymentPlanDTO_SSTest_scaffolding {
// allCoveredLines:[13, 18, 23, 28, 33, 38, 43, 48, 53, 58, 63, 68, 73, 78]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:deac3edcedd6aa56a077fbcb05e844fa
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 23, 28, 33, 38, 43, 48, 53, 58, 63, 68, 73, 78]
      //Input_0_Object: repaymentPlanDTO1
      //Assert: assertTrue(method_result);
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      RepaymentPlanDTO repaymentPlanDTO1 = new RepaymentPlanDTO();
      
      //Call method: equals
      boolean boolean0 = repaymentPlanDTO0.equals(repaymentPlanDTO1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:7f5ffd222745c06e120a550002c39ce3
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 73]
      //Input_0_Object: systemEnvironment
      //Assert: assertFalse(method_result);
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      
      repaymentPlanDTO0.getCreateDate();
      
      //Call method: equals
      boolean boolean0 = repaymentPlanDTO0.equals("systemEnvironment");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:6ac74d7f39ded5ab2d8d9f284d5f5657
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 63]
      //Input_0_Object: repaymentPlanDTO0
      //Assert: assertTrue(method_result);
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      
      repaymentPlanDTO0.getShouldRepaymentDate();
      
      //Call method: equals
      boolean boolean0 = repaymentPlanDTO0.equals(repaymentPlanDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:8d12db70c317a874766f8cbf241ed1cf
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 73]
      //Input_0_Object: repaymentPlanDTO0
      //Assert: assertFalse(method_result);
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      Long long0 = new Long(2532L);
      
      repaymentPlanDTO0.getCreateDate();
      
      PrivateAccess.setVariable((Class<?>) RepaymentPlanDTO.class, repaymentPlanDTO0, "id", (Object) long0);
      RepaymentPlanDTO repaymentPlanDTO1 = new RepaymentPlanDTO();
      
      //Call method: equals
      boolean boolean0 = repaymentPlanDTO1.equals(repaymentPlanDTO0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:6fe8eb0db8ad9583caea84d57eed6990
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 23, 28, 33, 38, 43, 48, 53, 58, 63, 68, 73, 78]
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      
      //Call method: hashCode
      repaymentPlanDTO0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_hashCode_05()  throws Throwable  {
      //caseID:bd086186ea05a1ffbea2ce4d09d9d1d5
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 23, 28, 33, 38, 43, 48, 53, 58, 63, 68, 73, 78]
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      
      repaymentPlanDTO0.getShouldRepaymentDate();
      
      //Call method: hashCode
      repaymentPlanDTO0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAmount_06()  throws Throwable  {
      //caseID:23498be97f192d2c5057372a1bc2355e
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
      //Input_0_BigDecimal: 512L
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      BigDecimal bigDecimal0 = new BigDecimal(512L);
      
      //Call method: setAmount
      repaymentPlanDTO0.setAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getProjectId());
  }

  @Test(timeout = 9000)
  public void test_setCommission_07()  throws Throwable  {
      //caseID:20640b0bda292f9224ae81dfaec6b17e
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
      //Input_0_BigDecimal: (-752.289603626)
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      BigDecimal bigDecimal0 = new BigDecimal((-752.289603626));
      
      //Call method: setCommission
      repaymentPlanDTO0.setCommission(bigDecimal0);
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getRepaymentStatus());
  }

  @Test(timeout = 9000)
  public void test_setConsumerId_08()  throws Throwable  {
      //caseID:9cc3e44540c0acc090f20976cd0185d4
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
      //Input_0_Long: 1066L
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      Long long0 = new Long(1066L);
      
      //Call method: setConsumerId
      repaymentPlanDTO0.setConsumerId(long0);
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getProjectNo());
  }

  @Test(timeout = 9000)
  public void test_setCreateDate_09()  throws Throwable  {
      //caseID:5c75dfbe6667e6245d7318060a4905d5
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
      //Input_0_LocalDateTime: localDateTime0
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 1713, zoneOffset0);
      
      //Call method: setCreateDate
      repaymentPlanDTO0.setCreateDate(localDateTime0);
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getRepaymentStatus());
  }

  @Test(timeout = 9000)
  public void test_setId_10()  throws Throwable  {
      //caseID:2cf2cb2895c8c89b2b3fa25434220316
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
      //Input_0_Long: 2136L
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      Long long0 = new Long(2136L);
      
      //Call method: setId
      repaymentPlanDTO0.setId(long0);
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getConsumerId());
  }

  @Test(timeout = 9000)
  public void test_setInterest_11()  throws Throwable  {
      //caseID:628756f5ddeb4ddf8dcd9118f7924110
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
      //Input_0_BigDecimal: bigInteger0
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      
      //Call method: setInterest
      repaymentPlanDTO0.setInterest(bigDecimal0);
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getRepaymentStatus());
  }

  @Test(timeout = 9000)
  public void test_setNumberOfPeriods_12()  throws Throwable  {
      //caseID:b54d15c25a5b83247789f24a46a83b0c
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
      //Input_0_Integer: 1
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      Integer integer0 = new Integer(1);
      
      //Call method: setNumberOfPeriods
      repaymentPlanDTO0.setNumberOfPeriods(integer0);
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getProjectNo());
  }

  @Test(timeout = 9000)
  public void test_setPrincipal_13()  throws Throwable  {
      //caseID:aa2e45b48afd5d47750a61eaf3b500e2
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setPrincipal
      repaymentPlanDTO0.setPrincipal(bigDecimal0);
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getId());
  }

  @Test(timeout = 9000)
  public void test_setProjectId_14()  throws Throwable  {
      //caseID:26b15421920666f84a6b5781241a4bae
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
      //Input_0_Long: 505L
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      Long long0 = new Long(505L);
      
      //Call method: setProjectId
      repaymentPlanDTO0.setProjectId(long0);
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getId());
  }

  @Test(timeout = 9000)
  public void test_setProjectNo_15()  throws Throwable  {
      //caseID:1b5e0109d1e531bbe63fe57235b9ecf4
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 73]
      //Input_0_String: , repaymentStatus=
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      
      repaymentPlanDTO0.getCreateDate();
      
      //Call method: setProjectNo
      repaymentPlanDTO0.setProjectNo(", repaymentStatus=");
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getProjectId());
  }

  @Test(timeout = 9000)
  public void test_setRepaymentStatus_16()  throws Throwable  {
      //caseID:3b578d863e5c4ec384df85dac959a4de
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
      //Input_0_String: , repaymentStatus=
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      
      //Call method: setRepaymentStatus
      repaymentPlanDTO0.setRepaymentStatus(", repaymentStatus=");
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getProjectId());
  }

  @Test(timeout = 9000)
  public void test_setShouldRepaymentDate_17()  throws Throwable  {
      //caseID:052aeea317715a7a1ad422a1ed49af01
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 63]
      //Input_0_LocalDateTime: null
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      
      repaymentPlanDTO0.getShouldRepaymentDate();
      
      //Call method: setShouldRepaymentDate
      repaymentPlanDTO0.setShouldRepaymentDate((LocalDateTime) null);
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getId());
  }

  @Test(timeout = 9000)
  public void test_setUserNo_18()  throws Throwable  {
      //caseID:9ed8eecf3f5bc2896e2e5387c9381b53
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
      //Input_0_String: cannot store more than MAX_VALUE elements
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      
      //Call method: setUserNo
      repaymentPlanDTO0.setUserNo("cannot store more than MAX_VALUE elements");
      
      //Test Result Assert
      assertNull(repaymentPlanDTO0.getProjectNo());
  }

  @Test(timeout = 9000)
  public void test_toString_19()  throws Throwable  {
      //caseID:b24e576ffa9167e0922a17309becc00d
      //CoveredLines: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 23, 28, 33, 38, 43, 48, 53, 58, 63, 68, 73, 78]
      //Assert: assertEquals("RepaymentPlanDTO(id=null, consumerId=null, userNo=null, projectId=null, projectNo=null, numberOfPeriods=null, interest=null, principal=null, amount=null, shouldRepaymentDate=null, repaymentStatus=null, createDate=null, commission=null)", method_result);
      
      RepaymentPlanDTO repaymentPlanDTO0 = new RepaymentPlanDTO();
      
      repaymentPlanDTO0.getShouldRepaymentDate();
      
      //Call method: toString
      String string0 = repaymentPlanDTO0.toString();
      
      //Test Result Assert
      assertEquals("RepaymentPlanDTO(id=null, consumerId=null, userNo=null, projectId=null, projectNo=null, numberOfPeriods=null, interest=null, principal=null, amount=null, shouldRepaymentDate=null, repaymentStatus=null, createDate=null, commission=null)", string0);
  }
}
