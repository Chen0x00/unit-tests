/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.consumer.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.api.consumer.model.WithdrawRequest;
import java.math.BigDecimal;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class WithdrawRequest_SSTest extends WithdrawRequest_SSTest_scaffolding {
// allCoveredLines:[19, 25, 28, 31, 34, 37, 40, 43, 46]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:feab596ce6cc99111f9c643efe4014a1
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_Object: withdrawRequest0
      //Assert: assertTrue(method_result);
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      
      //Call method: equals
      boolean boolean0 = withdrawRequest0.equals(withdrawRequest0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:370261d12cebced2fca4f005e44d2c86
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_Object: , mobile=
      //Assert: assertFalse(method_result);
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      
      //Call method: equals
      boolean boolean0 = withdrawRequest0.equals(", mobile=");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:b60217a8635e0749964aed62877c11da
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 25, 28, 31, 34, 37, 40, 43, 46]
      //Input_0_Object: withdrawRequest0
      //Assert: assertTrue(method_result);
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      WithdrawRequest withdrawRequest1 = new WithdrawRequest();
      
      //Call method: equals
      boolean boolean0 = withdrawRequest1.equals(withdrawRequest0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:9501e32097ea572549b3a4ac4c296219
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 25, 28, 31, 34, 37, 40, 43, 46]
      //Input_0_Object: withdrawRequest1
      //Assert: assertTrue(method_result);
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      WithdrawRequest withdrawRequest1 = new WithdrawRequest();
      
      //Call method: equals
      boolean boolean0 = withdrawRequest0.equals(withdrawRequest1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:bc7767c384ab0b8245533220e9275d43
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 25, 28, 31, 34, 37, 40, 43, 46]
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      
      //Call method: hashCode
      withdrawRequest0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAmount_05()  throws Throwable  {
      //caseID:7f15dd86f581b2c875097c4f3287c953
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_BigDecimal: BigDecimal.ZERO
      //Assert: assertNull(method_result.getId());
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      //Call method: setAmount
      WithdrawRequest withdrawRequest1 = withdrawRequest0.setAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(withdrawRequest1.getId());
  }

  @Test(timeout = 9000)
  public void test_setCallbackURL_06()  throws Throwable  {
      //caseID:adc203ed4de521b8afa120bda14dd267
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_String: 0
      //Assert: assertSame(withdrawRequest0, method_result);
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      
      //Call method: setCallbackURL
      WithdrawRequest withdrawRequest1 = withdrawRequest0.setCallbackURL("0");
      
      //Test Result Assert
      assertSame(withdrawRequest0, withdrawRequest1);
  }

  @Test(timeout = 9000)
  public void test_setCardNumber_07()  throws Throwable  {
      //caseID:f9e6975bda20f46d3768d4cc471304be
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_String: 
      //Assert: assertNull(method_result.getCallbackURL());
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      
      //Call method: setCardNumber
      WithdrawRequest withdrawRequest1 = withdrawRequest0.setCardNumber("");
      
      //Test Result Assert
      assertNull(withdrawRequest1.getCallbackURL());
  }

  @Test(timeout = 9000)
  public void test_setCommission_08()  throws Throwable  {
      //caseID:d8800588965a8cef813570d47168d97c
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_BigDecimal: BigDecimal.TEN
      //Assert: assertNull(method_result.getRequestNo());
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setCommission
      WithdrawRequest withdrawRequest1 = withdrawRequest0.setCommission(bigDecimal0);
      
      //Test Result Assert
      assertNull(withdrawRequest1.getRequestNo());
  }

  @Test(timeout = 9000)
  public void test_setId_09()  throws Throwable  {
      //caseID:63a461b57cb2e90bfb802d5df3e3d3e1
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result.getRequestNo());
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      Long long0 = new Long(0L);
      
      //Call method: setId
      WithdrawRequest withdrawRequest1 = withdrawRequest0.setId(long0);
      
      //Test Result Assert
      assertNull(withdrawRequest1.getRequestNo());
  }

  @Test(timeout = 9000)
  public void test_setMobile_10()  throws Throwable  {
      //caseID:6a0264b203c8801d741bfa26e1953c2a
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_String: , commission=
      //Assert: assertNull(method_result.getUserNo());
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      
      //Call method: setMobile
      WithdrawRequest withdrawRequest1 = withdrawRequest0.setMobile(", commission=");
      
      //Test Result Assert
      assertNull(withdrawRequest1.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setRequestNo_11()  throws Throwable  {
      //caseID:702bbb7f650d8656f27ee14546c89389
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_String: READ_ONLY
      //Assert: assertNull(method_result.getCallbackURL());
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      
      //Call method: setRequestNo
      WithdrawRequest withdrawRequest1 = withdrawRequest0.setRequestNo("READ_ONLY");
      
      //Test Result Assert
      assertNull(withdrawRequest1.getCallbackURL());
  }

  @Test(timeout = 9000)
  public void test_setUserNo_12()  throws Throwable  {
      //caseID:e66a969d2031106f40f4de2d4542585a
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_String: , requestNo=
      //Assert: assertNull(method_result.getMobile());
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      
      //Call method: setUserNo
      WithdrawRequest withdrawRequest1 = withdrawRequest0.setUserNo(", requestNo=");
      
      //Test Result Assert
      assertNull(withdrawRequest1.getMobile());
  }

  @Test(timeout = 9000)
  public void test_toString_13()  throws Throwable  {
      //caseID:7048aab4eea84ce6370ea79bc318c893
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 25, 28, 31, 34, 37, 40, 43, 46]
      //Assert: assertEquals("WithdrawRequest(id=null, userNo=null, requestNo=null, amount=null, commission=null, callbackURL=null, cardNumber=null, mobile=null)", method_result);
      
      WithdrawRequest withdrawRequest0 = new WithdrawRequest();
      
      //Call method: toString
      String string0 = withdrawRequest0.toString();
      
      //Test Result Assert
      assertEquals("WithdrawRequest(id=null, userNo=null, requestNo=null, amount=null, commission=null, callbackURL=null, cardNumber=null, mobile=null)", string0);
  }
}
