/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.account.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.api.account.model.LoginUser;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class LoginUser_SSTest extends LoginUser_SSTest_scaffolding {
// allCoveredLines:[12, 14, 15, 16, 17, 18, 19, 20]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:51a8338b5becc62f678c877ca9b957d9
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_Object: 3TX
      //Assert: assertFalse(method_result);
      
      LoginUser loginUser0 = new LoginUser();
      
      //Call method: equals
      boolean boolean0 = loginUser0.equals("3TX");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:28613b652489e9127a918f061288fb6e
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_Object: loginUser0
      //Assert: assertTrue(method_result);
      
      LoginUser loginUser0 = new LoginUser();
      
      //Call method: equals
      boolean boolean0 = loginUser0.equals(loginUser0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:90443d5de04947da6ff8ba182d938189
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 15, 16, 17, 18, 19, 20]
      //Input_0_Object: loginUser0
      //Assert: assertTrue(method_result);
      
      LoginUser loginUser0 = new LoginUser();
      LoginUser loginUser1 = new LoginUser();
      
      //Call method: equals
      boolean boolean0 = loginUser1.equals(loginUser0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:c9c3d5735335698037bbd5c73a73ff9c
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 15, 16, 17, 18, 19, 20]
      //Input_0_Object: loginUser1
      //Assert: assertTrue(method_result);
      
      LoginUser loginUser0 = new LoginUser();
      LoginUser loginUser1 = new LoginUser();
      
      //Call method: equals
      boolean boolean0 = loginUser0.equals(loginUser1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:83518f058ee3433b7b16aff2fcfaaf74
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 15, 16, 17, 18, 19, 20]
      
      LoginUser loginUser0 = new LoginUser();
      
      //Call method: hashCode
      loginUser0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setClientId_05()  throws Throwable  {
      //caseID:dd667d0496e56d996adb10f07cd72e59
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: 1.0
      
      LoginUser loginUser0 = new LoginUser();
      
      //Call method: setClientId
      loginUser0.setClientId("1.0");
      
      //Test Result Assert
      assertNull(loginUser0.getUsername());
  }

  @Test(timeout = 9000)
  public void test_setDepartmentId_06()  throws Throwable  {
      //caseID:3aabf137086860e553f64b21923f2a70
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: 1
      
      LoginUser loginUser0 = new LoginUser();
      
      //Call method: setDepartmentId
      loginUser0.setDepartmentId("1");
      
      //Test Result Assert
      assertNull(loginUser0.getMobile());
  }

  @Test(timeout = 9000)
  public void test_setMobile_07()  throws Throwable  {
      //caseID:9613bb3864b3170764360da9849faac8
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: , departmentId=
      
      LoginUser loginUser0 = new LoginUser();
      
      //Call method: setMobile
      loginUser0.setMobile(", departmentId=");
      
      //Test Result Assert
      assertNull(loginUser0.getTenantId());
  }

  @Test(timeout = 9000)
  public void test_setPayload_08()  throws Throwable  {
      //caseID:5a7e2dac6f8c1220d138998f4ae03122
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: 1.0
      
      LoginUser loginUser0 = new LoginUser();
      
      //Call method: setPayload
      loginUser0.setPayload("1.0");
      
      //Test Result Assert
      assertNull(loginUser0.getUsername());
  }

  @Test(timeout = 9000)
  public void test_setTenantId_09()  throws Throwable  {
      //caseID:7bd3ba8b99d50537af2deea0552402ca
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: 0
      
      LoginUser loginUser0 = new LoginUser();
      
      //Call method: setTenantId
      loginUser0.setTenantId("0");
      
      //Test Result Assert
      assertNull(loginUser0.getPayload());
  }

  @Test(timeout = 9000)
  public void test_setUserAuthorities_10()  throws Throwable  {
      //caseID:bead3d1d53963dd2f3a6f5c3abfe8de3
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: 
      
      LoginUser loginUser0 = new LoginUser();
      
      //Call method: setUserAuthorities
      loginUser0.setUserAuthorities("");
      
      //Test Result Assert
      assertNull(loginUser0.getPayload());
  }

  @Test(timeout = 9000)
  public void test_setUsername_11()  throws Throwable  {
      //caseID:1ec8088a84ab5b36556bab61682712a0
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
      //Input_0_String: com.wanxin.api.account.model.LoginUser
      
      LoginUser loginUser0 = new LoginUser();
      
      //Call method: setUsername
      loginUser0.setUsername("com.wanxin.api.account.model.LoginUser");
      
      //Test Result Assert
      assertNull(loginUser0.getPayload());
  }

  @Test(timeout = 9000)
  public void test_toString_12()  throws Throwable  {
      //caseID:2bb9a87e7c858eb27a0c818da682284c
      //CoveredLines: [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 15, 16, 17, 18, 19, 20]
      //Assert: assertEquals("LoginUser(tenantId=null, departmentId=null, payload=null, username=null, mobile=null, userAuthorities=null, clientId=null)", method_result);
      
      LoginUser loginUser0 = new LoginUser();
      
      //Call method: toString
      String string0 = loginUser0.toString();
      
      //Test Result Assert
      assertEquals("LoginUser(tenantId=null, departmentId=null, payload=null, username=null, mobile=null, userAuthorities=null, clientId=null)", string0);
  }
}
