/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.account.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.api.account.model.AccountLoginDTO;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class AccountLoginDTO_SSTest extends AccountLoginDTO_SSTest_scaffolding {
// allCoveredLines:[16, 21, 24, 27, 30]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:ecd67903517944a27952db55facaa7a4
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_Object: accountLoginDTO0
      //Assert: assertTrue(method_result);
      
      AccountLoginDTO accountLoginDTO0 = new AccountLoginDTO();
      
      //Call method: equals
      boolean boolean0 = accountLoginDTO0.equals(accountLoginDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:c7a72d4e8f481b67c8a705460065b3c8
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_Object: kt;l-&D<H9O'#
      //Assert: assertFalse(method_result);
      
      AccountLoginDTO accountLoginDTO0 = new AccountLoginDTO();
      
      //Call method: equals
      boolean boolean0 = accountLoginDTO0.equals("kt;l-&D<H9O'#");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:e8057423a07888e7b9ecc3c7becd2a41
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 24, 27, 30]
      //Input_0_Object: accountLoginDTO0
      //Assert: assertTrue(method_result);
      
      AccountLoginDTO accountLoginDTO0 = new AccountLoginDTO();
      AccountLoginDTO accountLoginDTO1 = new AccountLoginDTO();
      
      //Call method: equals
      boolean boolean0 = accountLoginDTO1.equals(accountLoginDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:a27a935c01833bcef7341bc66776843d
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 24, 27, 30]
      //Input_0_Object: accountLoginDTO1
      //Assert: assertTrue(method_result);
      
      AccountLoginDTO accountLoginDTO0 = new AccountLoginDTO();
      AccountLoginDTO accountLoginDTO1 = new AccountLoginDTO();
      
      //Call method: equals
      boolean boolean0 = accountLoginDTO0.equals(accountLoginDTO1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:f98432fb8ec296d84ec5fd773b27d820
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 24, 27, 30]
      
      AccountLoginDTO accountLoginDTO0 = new AccountLoginDTO();
      
      //Call method: hashCode
      accountLoginDTO0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setDomain_5()  throws Throwable  {
      //caseID:d62a3c98cfb59a658ecc853b7937c5e1
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_String: 59
      
      AccountLoginDTO accountLoginDTO0 = new AccountLoginDTO();
      
      //Call method: setDomain
      accountLoginDTO0.setDomain("59");
      
      //Test Result Assert
      assertNull(accountLoginDTO0.getMobile());
  }

  @Test(timeout = 9000)
  public void test_setMobile_6()  throws Throwable  {
      //caseID:71c9d4d5eb837716fb6848f178b2a9c8
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_String: 
      
      AccountLoginDTO accountLoginDTO0 = new AccountLoginDTO();
      
      //Call method: setMobile
      accountLoginDTO0.setMobile("");
      
      //Test Result Assert
      assertNull(accountLoginDTO0.getUsername());
  }

  @Test(timeout = 9000)
  public void test_setPassword_7()  throws Throwable  {
      //caseID:da20a9dec30d6987a99070d22bcd636f
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_String: udjQOw5<n
      
      AccountLoginDTO accountLoginDTO0 = new AccountLoginDTO();
      
      //Call method: setPassword
      accountLoginDTO0.setPassword("udjQOw5<n");
      
      //Test Result Assert
      assertNull(accountLoginDTO0.getMobile());
  }

  @Test(timeout = 9000)
  public void test_setUsername_8()  throws Throwable  {
      //caseID:e96b26b2e440249d834bcfee25fa3d05
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16]
      //Input_0_String: READ_WRITE
      
      AccountLoginDTO accountLoginDTO0 = new AccountLoginDTO();
      
      //Call method: setUsername
      accountLoginDTO0.setUsername("READ_WRITE");
      
      //Test Result Assert
      assertNull(accountLoginDTO0.getMobile());
  }

  @Test(timeout = 9000)
  public void test_toString_9()  throws Throwable  {
      //caseID:061d6d75182e2b62e8ab6e1fd1cb2537
      //CoveredLines: [16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 24, 27, 30]
      //Assert: assertEquals("AccountLoginDTO(username=null, mobile=null, password=null, domain=null)", method_result);
      
      AccountLoginDTO accountLoginDTO0 = new AccountLoginDTO();
      
      //Call method: toString
      String string0 = accountLoginDTO0.toString();
      
      //Test Result Assert
      assertEquals("AccountLoginDTO(username=null, mobile=null, password=null, domain=null)", string0);
  }
}
