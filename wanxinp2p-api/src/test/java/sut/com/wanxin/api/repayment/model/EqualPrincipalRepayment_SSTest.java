/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.repayment.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.api.repayment.model.EqualPrincipalRepayment;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Map;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class EqualPrincipalRepayment_SSTest extends EqualPrincipalRepayment_SSTest_scaffolding {
// allCoveredLines:[19, 24, 28, 32, 36, 40, 44]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:ffb91e16996e99061c985e3e038a7608
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_Object: equalPrincipalRepayment0
      //Assert: assertTrue(method_result);
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      
      //Call method: equals
      boolean boolean0 = equalPrincipalRepayment0.equals(equalPrincipalRepayment0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:93b5184c8c2eababe3a083fe7cc73743
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_Object: BigDecimal.ZERO
      //Assert: assertFalse(method_result);
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      //Call method: equals
      boolean boolean0 = equalPrincipalRepayment0.equals(bigDecimal0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:9662c6c51456f8e6606c3be18e287ee9
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 24, 28, 32, 36, 40, 44]
      //Input_0_Object: equalPrincipalRepayment0
      //Assert: assertTrue(method_result);
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      EqualPrincipalRepayment equalPrincipalRepayment1 = new EqualPrincipalRepayment();
      
      //Call method: equals
      boolean boolean0 = equalPrincipalRepayment1.equals(equalPrincipalRepayment0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:9e4aa746f4ea8f3ad27269768f98eb1a
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 24, 28, 32, 36, 40, 44]
      //Input_0_Object: equalPrincipalRepayment1
      //Assert: assertTrue(method_result);
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      EqualPrincipalRepayment equalPrincipalRepayment1 = new EqualPrincipalRepayment();
      
      //Call method: equals
      boolean boolean0 = equalPrincipalRepayment0.equals(equalPrincipalRepayment1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:f7326c0c92d64d0cb35388acf20d90f4
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 24, 28, 32, 36, 40, 44]
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      
      //Call method: hashCode
      equalPrincipalRepayment0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAmountMap_05()  throws Throwable  {
      //caseID:552f78f279e05aa17a149d07037063ce
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_Map<Integer, BigDecimal>: {}
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      //mock map0
      Map<Integer, BigDecimal> map0 = (Map<Integer, BigDecimal>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setAmountMap
      equalPrincipalRepayment0.setAmountMap(map0);
  }

  @Test(timeout = 9000)
  public void test_setCommissionMap_06()  throws Throwable  {
      //caseID:6df21032b302fdff6ca53ba8a92a6f80
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_Map<Integer, BigDecimal>: {}
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      //mock map0
      Map<Integer, BigDecimal> map0 = (Map<Integer, BigDecimal>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCommissionMap
      equalPrincipalRepayment0.setCommissionMap(map0);
  }

  @Test(timeout = 9000)
  public void test_setInterestMap_07()  throws Throwable  {
      //caseID:a19c2bf811851d939b68e45ec20969dc
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_Map<Integer, BigDecimal>: {}
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      //mock map0
      Map<Integer, BigDecimal> map0 = (Map<Integer, BigDecimal>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setInterestMap
      equalPrincipalRepayment0.setInterestMap(map0);
  }

  @Test(timeout = 9000)
  public void test_setPrincipal_08()  throws Throwable  {
      //caseID:2a7a97d73476a9ccea1c23e0bd4ccbeb
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setPrincipal
      equalPrincipalRepayment0.setPrincipal(bigDecimal0);
      
      //Test Result Assert
      assertEquals((byte)10, bigDecimal0.byteValue());
  }

  @Test(timeout = 9000)
  public void test_setTotalAmount_09()  throws Throwable  {
      //caseID:876a5b8689a36917f8f26ebf3adda2d4
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_BigDecimal: bigInteger0
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      byte[] byteArray0 = new byte[5];
      //mock bigInteger0
      BigInteger bigInteger0 = mock(BigInteger.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(byteArray0).when(bigInteger0).toByteArray();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      
      //Call method: setTotalAmount
      equalPrincipalRepayment0.setTotalAmount(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 9000)
  public void test_setTotalInterest_10()  throws Throwable  {
      //caseID:b000e354edf542852f488ed780fffc12
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
      //Input_0_BigDecimal: bigInteger0
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      
      //Call method: setTotalInterest
      equalPrincipalRepayment0.setTotalInterest(bigDecimal0);
      
      //Test Result Assert
      assertEquals((byte)10, bigDecimal0.byteValue());
  }

  @Test(timeout = 9000)
  public void test_toString_11()  throws Throwable  {
      //caseID:36c6688da84798f464967775c8b1a29c
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 24, 28, 32, 36, 40, 44]
      //Assert: assertEquals("EqualPrincipalRepayment(amountMap=null, interestMap=null, principal=null, totalAmount=null, totalInterest=null, commissionMap=null)", method_result);
      
      EqualPrincipalRepayment equalPrincipalRepayment0 = new EqualPrincipalRepayment();
      
      //Call method: toString
      String string0 = equalPrincipalRepayment0.toString();
      
      //Test Result Assert
      assertEquals("EqualPrincipalRepayment(amountMap=null, interestMap=null, principal=null, totalAmount=null, totalInterest=null, commissionMap=null)", string0);
  }
}
