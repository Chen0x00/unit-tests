/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.transaction.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.api.transaction.model.TenderOverviewDTO;
import java.math.BigDecimal;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class TenderOverviewDTO_SSTest extends TenderOverviewDTO_SSTest_scaffolding {
// allCoveredLines:[19, 24, 27, 30, 33, 35, 36, 40]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:42d7c4c8885aa80e183f39f37a6cb0b4
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 35]
      //Input_0_Object: tenderOverviewDTO0
      //Assert: assertTrue(method_result);
      //Assert: assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      
      //Call method: equals
      boolean boolean0 = tenderOverviewDTO0.equals(tenderOverviewDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
      
      //Test Result Assert
      assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:da2dd3e0d1e72ca53f92af4dc16203d6
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 35]
      //Input_0_Object: 0s:f<gjw
      //Assert: assertFalse(method_result);
      //Assert: assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      
      //Call method: equals
      boolean boolean0 = tenderOverviewDTO0.equals("0s:f<gjw");
      
      //Test Result Assert
      assertFalse(boolean0);
      
      //Test Result Assert
      assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:78e86e7c3d04cd9223e45b02fca4c0e2
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 24, 35]
      //Input_0_Object: tenderOverviewDTO0
      //Assert: assertFalse(method_result);
      //Assert: assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO1.getTenderWay());
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      Long long0 = new Long(0L);
      
      PrivateAccess.setVariable((Class<?>) TenderOverviewDTO.class, tenderOverviewDTO0, "id", (Object) long0);
      TenderOverviewDTO tenderOverviewDTO1 = new TenderOverviewDTO();
      
      //Call method: equals
      boolean boolean0 = tenderOverviewDTO1.equals(tenderOverviewDTO0);
      
      //Test Result Assert
      assertFalse(boolean0);
      
      //Test Result Assert
      assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO1.getTenderWay());
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:9cdfcf1b5d818dae70794297b0a7bca1
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 24, 35]
      //Input_0_Object: tenderOverviewDTO1
      //Assert: assertFalse(method_result);
      //Assert: assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO1.getTenderWay());
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      Long long0 = new Long(2L);
      
      PrivateAccess.setVariable((Class<?>) TenderOverviewDTO.class, tenderOverviewDTO0, "id", (Object) long0);
      TenderOverviewDTO tenderOverviewDTO1 = new TenderOverviewDTO();
      
      //Call method: equals
      boolean boolean0 = tenderOverviewDTO0.equals(tenderOverviewDTO1);
      
      //Test Result Assert
      assertFalse(boolean0);
      
      //Test Result Assert
      assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO1.getTenderWay());
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:49f43c674fb627eb6eccf7d16f6216c2
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 24, 27, 30, 33, 35, 36, 40]
      //Assert: assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      
      //Call method: hashCode
      tenderOverviewDTO0.hashCode();
      
      //Test Result Assert
      assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
  }

  @Test(timeout = 9000)
  public void test_setAmount_05()  throws Throwable  {
      //caseID:f72a1c60971c02aaec8fc7b90b6bcbbe
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 35]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setAmount
      tenderOverviewDTO0.setAmount(bigDecimal0);
      
      //Test Result Assert
      assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
  }

  @Test(timeout = 9000)
  public void test_setConsumerId_06()  throws Throwable  {
      //caseID:8a4e4051c5178231816f8f0f9cbe9197
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 35]
      //Input_0_Long: 0L
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      Long long0 = new Long(0L);
      
      //Call method: setConsumerId
      tenderOverviewDTO0.setConsumerId(long0);
      
      //Test Result Assert
      assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
  }

  @Test(timeout = 9000)
  public void test_setConsumerUsername_07()  throws Throwable  {
      //caseID:70d61a110be1d4dc9e8345e4f73ed0f6
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 35]
      //Input_0_String: 1.0
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      
      //Call method: setConsumerUsername
      tenderOverviewDTO0.setConsumerUsername("1.0");
      
      //Test Result Assert
      assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
  }

  @Test(timeout = 9000)
  public void test_setCreateDate_08()  throws Throwable  {
      //caseID:8dd23718629f99675e4e1e3706717b1b
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 35]
      //Input_0_Date: {}
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCreateDate
      tenderOverviewDTO0.setCreateDate(date0);
      
      //Test Result Assert
      assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
  }

  @Test(timeout = 9000)
  public void test_setId_09()  throws Throwable  {
      //caseID:9c4683532d82f769f29c454e748f9915
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 35]
      //Input_0_Long: 0L
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      Long long0 = new Long(0L);
      
      //Call method: setId
      tenderOverviewDTO0.setId(long0);
      
      //Test Result Assert
      assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
  }

  @Test(timeout = 9000)
  public void test_setTenderWay_10()  throws Throwable  {
      //caseID:d6d98f44b764bb7f4fefa8b439fa6bfa
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 35]
      //Input_0_String: , amount=
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      
      //Test Result Assert
      assertEquals("\u624B\u52A8\u51FA\u501F", tenderOverviewDTO0.getTenderWay());
      
      
      //Call method: setTenderWay
      tenderOverviewDTO0.setTenderWay(", amount=");
      
      //Test Result Assert
      assertNull(tenderOverviewDTO0.getConsumerUsername());
  }

  @Test(timeout = 9000)
  public void test_toString_11()  throws Throwable  {
      //caseID:3a2c460f7eaee30fd76538f0aae2787b
      //CoveredLines: [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 24, 27, 30, 33, 35, 36, 40]
      //Assert: assertEquals("TenderOverviewDTO(id=null, consumerId=null, consumerUsername=null, amount=null, tenderWay=\u624B\u52A8\u51FA\u501F, createDate=null)", method_result);
      
      TenderOverviewDTO tenderOverviewDTO0 = new TenderOverviewDTO();
      
      //Call method: toString
      String string0 = tenderOverviewDTO0.toString();
      
      //Test Result Assert
      assertEquals("TenderOverviewDTO(id=null, consumerId=null, consumerUsername=null, amount=null, tenderWay=\u624B\u52A8\u51FA\u501F, createDate=null)", string0);
  }
}
