/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.transaction.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.api.transaction.model.ProjectDTO;
import com.wanxin.api.transaction.model.TenderDTO;
import java.math.BigDecimal;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class TenderDTO_SSTest extends TenderDTO_SSTest_scaffolding {
// allCoveredLines:[17, 22, 27, 32, 37, 42, 47, 52, 57, 63, 68, 73, 78, 83, 88, 93, 98]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:ea4f20d0777205801cf702b85dfba296
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Object: tenderDTO0
      //Assert: assertTrue(method_result);
      
      TenderDTO tenderDTO0 = new TenderDTO();
      
      //Call method: equals
      boolean boolean0 = tenderDTO0.equals(tenderDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:6ca4fbe526edafc7d2be817edf282df7
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Object: 1302
      //Assert: assertFalse(method_result);
      
      TenderDTO tenderDTO0 = new TenderDTO();
      Long long0 = new Long(1302);
      
      //Call method: equals
      boolean boolean0 = tenderDTO0.equals(long0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:c6b29ecc9517869c35b922bb461189c1
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 27, 32, 37, 42, 47, 52, 57, 63, 68, 73, 78, 83, 88, 93, 98]
      //Input_0_Object: tenderDTO0
      //Assert: assertTrue(method_result);
      
      TenderDTO tenderDTO0 = new TenderDTO();
      TenderDTO tenderDTO1 = new TenderDTO();
      
      //Call method: equals
      boolean boolean0 = tenderDTO1.equals(tenderDTO0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:e2e4c1993a5e7828b034fe32c884136c
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 27, 32, 37, 42, 47, 52, 57, 63, 68, 73, 78, 83, 88, 93, 98]
      //Input_0_Object: tenderDTO1
      //Assert: assertTrue(method_result);
      
      TenderDTO tenderDTO0 = new TenderDTO();
      TenderDTO tenderDTO1 = new TenderDTO();
      
      //Call method: equals
      boolean boolean0 = tenderDTO0.equals(tenderDTO1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:1ba6d8a651833ea1df231a1b2d99cf1b
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 27, 32, 37, 42, 47, 52, 57, 63, 68, 73, 78, 83, 88, 93, 98]
      
      TenderDTO tenderDTO0 = new TenderDTO();
      
      //Call method: hashCode
      tenderDTO0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAmount_05()  throws Throwable  {
      //caseID:d95aa9c6b6087ec38829282bbccd46d9
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_BigDecimal: BigDecimal.ZERO
      
      TenderDTO tenderDTO0 = new TenderDTO();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      //Call method: setAmount
      tenderDTO0.setAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(tenderDTO0.getProjectId());
  }

  @Test(timeout = 9000)
  public void test_setConsumerId_06()  throws Throwable  {
      //caseID:2f1fd4f4744a08dfdf4f881efe2b760d
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Long: 3470L
      
      TenderDTO tenderDTO0 = new TenderDTO();
      Long long0 = new Long(3470L);
      
      //Call method: setConsumerId
      tenderDTO0.setConsumerId(long0);
      
      //Test Result Assert
      assertNull(tenderDTO0.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setConsumerUsername_07()  throws Throwable  {
      //caseID:702cf94b2a6858ac40d99147a6f0229f
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_String: , consumerId=
      
      TenderDTO tenderDTO0 = new TenderDTO();
      
      //Call method: setConsumerUsername
      tenderDTO0.setConsumerUsername(", consumerId=");
      
      //Test Result Assert
      assertNull(tenderDTO0.getStatus());
  }

  @Test(timeout = 9000)
  public void test_setCreateDate_08()  throws Throwable  {
      //caseID:f98a46b150afc358a8ee17d6a256b381
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Date: {}
      
      TenderDTO tenderDTO0 = new TenderDTO();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCreateDate
      tenderDTO0.setCreateDate(date0);
      
      //Test Result Assert
      assertNull(tenderDTO0.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setExpectedIncome_09()  throws Throwable  {
      //caseID:e742823ccf59aaefef6aa8084f550cd1
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_BigDecimal: BigDecimal.ONE
      
      TenderDTO tenderDTO0 = new TenderDTO();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setExpectedIncome
      tenderDTO0.setExpectedIncome(bigDecimal0);
      
      //Test Result Assert
      assertNull(tenderDTO0.getProjectPeriod());
  }

  @Test(timeout = 9000)
  public void test_setId_10()  throws Throwable  {
      //caseID:dc2ac077d7ced1779ad7ade96ba1ef55
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Long: (-1L)
      
      TenderDTO tenderDTO0 = new TenderDTO();
      Long long0 = new Long((-1L));
      
      //Call method: setId
      tenderDTO0.setId(long0);
      
      //Test Result Assert
      assertNull(tenderDTO0.getProjectNo());
  }

  @Test(timeout = 9000)
  public void test_setProject_11()  throws Throwable  {
      //caseID:5e44f714d41e8cd21cd8cf8bf055cdd7
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_ProjectDTO: {}
      
      TenderDTO tenderDTO0 = new TenderDTO();
      //mock projectDTO0
      ProjectDTO projectDTO0 = mock(ProjectDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setProject
      tenderDTO0.setProject(projectDTO0);
      
      //Test Result Assert
      assertNull(tenderDTO0.getConsumerId());
  }

  @Test(timeout = 9000)
  public void test_setProjectAnnualRate_12()  throws Throwable  {
      //caseID:d239fa14f0f8a8243deea87c1dbe2b45
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      TenderDTO tenderDTO0 = new TenderDTO();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setProjectAnnualRate
      tenderDTO0.setProjectAnnualRate(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)10, bigDecimal0.shortValue());
  }

  @Test(timeout = 9000)
  public void test_setProjectId_13()  throws Throwable  {
      //caseID:c8741500b93ff877dbb70ad7c5237091
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Long: (-1322L)
      
      TenderDTO tenderDTO0 = new TenderDTO();
      Long long0 = new Long((-1322L));
      
      //Call method: setProjectId
      tenderDTO0.setProjectId(long0);
      
      //Test Result Assert
      assertNull(tenderDTO0.getStatus());
  }

  @Test(timeout = 9000)
  public void test_setProjectName_14()  throws Throwable  {
      //caseID:66ec22cc8fcf9347ff9634790beacf5a
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_String: o5
      
      TenderDTO tenderDTO0 = new TenderDTO();
      
      //Call method: setProjectName
      tenderDTO0.setProjectName("o5");
      
      //Test Result Assert
      assertNull(tenderDTO0.getConsumerId());
  }

  @Test(timeout = 9000)
  public void test_setProjectNo_15()  throws Throwable  {
      //caseID:c0e22d1dbb9476583a5d387b333fe174
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_String: .andThen(
      
      TenderDTO tenderDTO0 = new TenderDTO();
      
      //Call method: setProjectNo
      tenderDTO0.setProjectNo(".andThen(");
      
      //Test Result Assert
      assertNull(tenderDTO0.getConsumerId());
  }

  @Test(timeout = 9000)
  public void test_setProjectPeriod_16()  throws Throwable  {
      //caseID:fd3ca418582ed8df571cf17a40b6d702
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Integer: 64
      
      TenderDTO tenderDTO0 = new TenderDTO();
      Integer integer0 = new Integer(64);
      
      //Call method: setProjectPeriod
      tenderDTO0.setProjectPeriod(integer0);
      
      //Test Result Assert
      assertNull(tenderDTO0.getProjectNo());
  }

  @Test(timeout = 9000)
  public void test_setRequestNo_17()  throws Throwable  {
      //caseID:6aea2405688dc2b094e2bb8392056b0c
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_String: Vu_:W&a9UFl
      
      TenderDTO tenderDTO0 = new TenderDTO();
      
      //Call method: setRequestNo
      tenderDTO0.setRequestNo("Vu_:W&a9UFl");
      
      //Test Result Assert
      assertNull(tenderDTO0.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setStatus_18()  throws Throwable  {
      //caseID:aba4fb940d4d160d973e5b302fe69fca
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_Integer: 718
      
      TenderDTO tenderDTO0 = new TenderDTO();
      Integer integer0 = new Integer(718);
      
      //Call method: setStatus
      tenderDTO0.setStatus(integer0);
      
      //Test Result Assert
      assertNull(tenderDTO0.getConsumerId());
  }

  @Test(timeout = 9000)
  public void test_setTenderStatus_19()  throws Throwable  {
      //caseID:8c80d21d72ad110c8eea602772efdccd
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_String: D!
      
      TenderDTO tenderDTO0 = new TenderDTO();
      
      //Call method: setTenderStatus
      tenderDTO0.setTenderStatus("D!");
      
      //Test Result Assert
      assertNull(tenderDTO0.getId());
  }

  @Test(timeout = 9000)
  public void test_setUserNo_20()  throws Throwable  {
      //caseID:67901f191615ac6608ad920ab9aedc89
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
      //Input_0_String: 6od& h=ZCl\"GSgb2
      
      TenderDTO tenderDTO0 = new TenderDTO();
      
      //Call method: setUserNo
      tenderDTO0.setUserNo("6od& h=ZCl\"GSgb2");
      
      //Test Result Assert
      assertNull(tenderDTO0.getConsumerId());
  }

  @Test(timeout = 9000)
  public void test_toString_21()  throws Throwable  {
      //caseID:326d4ea84881e69d9d3f398d0797a1f3
      //CoveredLines: [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22, 27, 32, 37, 42, 47, 52, 57, 63, 68, 73, 78, 83, 88, 93, 98]
      //Assert: assertEquals("TenderDTO(id=null, consumerId=null, consumerUsername=null, userNo=null, projectId=null, projectNo=null, amount=null, tenderStatus=null, createDate=null, requestNo=null, status=null, projectName=null, projectPeriod=null, projectAnnualRate=null, project=null, expectedIncome=null)", method_result);
      
      TenderDTO tenderDTO0 = new TenderDTO();
      
      //Call method: toString
      String string0 = tenderDTO0.toString();
      
      //Test Result Assert
      assertEquals("TenderDTO(id=null, consumerId=null, consumerUsername=null, userNo=null, projectId=null, projectNo=null, amount=null, tenderStatus=null, createDate=null, requestNo=null, status=null, projectName=null, projectPeriod=null, projectAnnualRate=null, project=null, expectedIncome=null)", string0);
  }
}
