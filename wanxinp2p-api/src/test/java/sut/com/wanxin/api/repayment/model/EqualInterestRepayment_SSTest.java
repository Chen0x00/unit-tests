/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.api.repayment.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.api.repayment.model.EqualInterestRepayment;
import java.math.BigDecimal;
import java.util.Map;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class EqualInterestRepayment_SSTest extends EqualInterestRepayment_SSTest_scaffolding {
// allCoveredLines:[18, 23, 27, 31, 35, 39, 43]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:e3648f774b7da940fd4f52dd6da062ef
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]
      //Input_0_Object: equalInterestRepayment0
      //Assert: assertTrue(method_result);
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      
      //Call method: equals
      boolean boolean0 = equalInterestRepayment0.equals(equalInterestRepayment0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:d66521649241cdfa2988fcb66c96ec58
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]
      //Input_0_Object: BigDecimal.ONE
      //Assert: assertFalse(method_result);
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: equals
      boolean boolean0 = equalInterestRepayment0.equals(bigDecimal0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:6fc137e8f41886bd0db61c9f50c4001c
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 23, 27, 31, 35, 39, 43]
      //Input_0_Object: equalInterestRepayment0
      //Assert: assertTrue(method_result);
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      EqualInterestRepayment equalInterestRepayment1 = new EqualInterestRepayment();
      
      //Call method: equals
      boolean boolean0 = equalInterestRepayment1.equals(equalInterestRepayment0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:47145b452f33b3bec0e389f3f550649b
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 23, 27, 31, 35, 39, 43]
      //Input_0_Object: equalInterestRepayment1
      //Assert: assertTrue(method_result);
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      EqualInterestRepayment equalInterestRepayment1 = new EqualInterestRepayment();
      
      //Call method: equals
      boolean boolean0 = equalInterestRepayment0.equals(equalInterestRepayment1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:4456b8ca2b55a4bb144b4e50555e6d99
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 23, 27, 31, 35, 39, 43]
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      
      //Call method: hashCode
      equalInterestRepayment0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAmount_05()  throws Throwable  {
      //caseID:76dec43c66b76f85dbbb72a31c54d91e
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setAmount
      equalInterestRepayment0.setAmount(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)10, bigDecimal0.shortValue());
  }

  @Test(timeout = 9000)
  public void test_setCommissionMap_06()  throws Throwable  {
      //caseID:a2387dc7f7635a85baa24f8b469c5bd1
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]
      //Input_0_Map<Integer, BigDecimal>: {}
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      //mock map0
      Map<Integer, BigDecimal> map0 = (Map<Integer, BigDecimal>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCommissionMap
      equalInterestRepayment0.setCommissionMap(map0);
  }

  @Test(timeout = 9000)
  public void test_setInterestMap_07()  throws Throwable  {
      //caseID:6fc1277d656addc87c94c7c1f707544f
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]
      //Input_0_Map<Integer, BigDecimal>: {}
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      //mock map0
      Map<Integer, BigDecimal> map0 = (Map<Integer, BigDecimal>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setInterestMap
      equalInterestRepayment0.setInterestMap(map0);
  }

  @Test(timeout = 9000)
  public void test_setPrincipalMap_08()  throws Throwable  {
      //caseID:da669610af026455a57fbe73272c9015
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]
      //Input_0_Map<Integer, BigDecimal>: {}
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      //mock map0
      Map<Integer, BigDecimal> map0 = (Map<Integer, BigDecimal>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setPrincipalMap
      equalInterestRepayment0.setPrincipalMap(map0);
  }

  @Test(timeout = 9000)
  public void test_setTotalAmount_09()  throws Throwable  {
      //caseID:9db4570fa1dea7a674432bfa20ec10b3
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setTotalAmount
      equalInterestRepayment0.setTotalAmount(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)10, bigDecimal0.shortValue());
  }

  @Test(timeout = 9000)
  public void test_setTotalInterest_10()  throws Throwable  {
      //caseID:7fd4d757b07ee71ba68c06011af499dd
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]
      //Input_0_BigDecimal: BigDecimal.ONE
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setTotalInterest
      equalInterestRepayment0.setTotalInterest(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 9000)
  public void test_toString_11()  throws Throwable  {
      //caseID:2f9f1bf3f3225cc84115da3f89f44567
      //CoveredLines: [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 23, 27, 31, 35, 39, 43]
      //Assert: assertEquals("EqualInterestRepayment(amount=null, interestMap=null, principalMap=null, totalAmount=null, totalInterest=null, commissionMap=null)", method_result);
      
      EqualInterestRepayment equalInterestRepayment0 = new EqualInterestRepayment();
      
      //Call method: toString
      String string0 = equalInterestRepayment0.toString();
      
      //Test Result Assert
      assertEquals("EqualInterestRepayment(amount=null, interestMap=null, principalMap=null, totalAmount=null, totalInterest=null, commissionMap=null)", string0);
  }
}
