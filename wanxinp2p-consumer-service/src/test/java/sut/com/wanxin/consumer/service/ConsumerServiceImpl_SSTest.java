/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.consumer.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.wanxin.api.consumer.model.BankCardDTO;
import com.wanxin.api.consumer.model.ConsumerDTO;
import com.wanxin.api.consumer.model.ConsumerRegisterDTO;
import com.wanxin.api.consumer.model.ConsumerRequest;
import com.wanxin.api.depository.model.DepositoryConsumerResponse;
import com.wanxin.api.depository.model.DepositoryRechargeResponse;
import com.wanxin.api.depository.model.DepositoryWithdrawResponse;
import com.wanxin.api.depository.model.GatewayRequest;
import com.wanxin.common.domain.RestResponse;
import com.wanxin.consumer.agent.DepositoryAgentApiAgent;
import com.wanxin.consumer.entity.Consumer;
import com.wanxin.consumer.mapper.BankCardMapper;
import com.wanxin.consumer.mapper.ConsumerMapper;
import com.wanxin.consumer.mapper.RechargeRecordMapper;
import com.wanxin.consumer.mapper.WithdrawRecordMapper;
import com.wanxin.consumer.service.BankCardService;
import com.wanxin.consumer.service.ConsumerServiceImpl;
import java.math.BigDecimal;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ConsumerServiceImpl_SSTest extends ConsumerServiceImpl_SSTest_scaffolding {
// allCoveredLines:[45, 65, 66, 67, 68, 69, 76, 77, 78, 79, 81, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 115, 116, 120, 121, 133, 134, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 159, 160, 164, 165, 189, 196, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 215, 221, 224, 225, 230, 231, 236, 238, 239, 242, 243, 244, 245, 246, 248, 249, 250, 281, 287, 288, 309, 310, 315, 316, 317, 320, 321, 322, 325, 329, 333, 334, 335]

  @Test(timeout = 9000)
  public void test_cancelRegister_00()  throws Throwable  {
      //caseID:2c3578e31a8d07a709f00d19224d4c46
      //CoveredLines: [45, 315, 316, 317]
      //Input_0_ConsumerRegisterDTO: {}
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      //mock consumerRegisterDTO0
      ConsumerRegisterDTO consumerRegisterDTO0 = mock(ConsumerRegisterDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: cancelRegister
      consumerServiceImpl0.cancelRegister(consumerRegisterDTO0);
  }

  @Test(timeout = 9000)
  public void test_confirmRegister_01()  throws Throwable  {
      //caseID:f71cc3402713a6185853a3b50c5869b2
      //CoveredLines: [45, 309, 310]
      //Input_0_ConsumerRegisterDTO: {}
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock consumerRegisterDTO0
      ConsumerRegisterDTO consumerRegisterDTO0 = mock(ConsumerRegisterDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: confirmRegister
      consumerServiceImpl0.confirmRegister(consumerRegisterDTO0);
  }

  @Test(timeout = 9000)
  public void test_createConsumer_02()  throws Throwable  {
      //caseID:28fd365eccf3e58d3acc195ad8b21e2c
      //CoveredLines: [45, 221, 224, 320, 321, 325]
      //Input_0_ConsumerRequest: {}
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      //mock consumerRequest0
      ConsumerRequest consumerRequest0 = mock(ConsumerRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: createConsumer
      // Undeclared exception!
      try { 
        consumerServiceImpl0.createConsumer(consumerRequest0);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_createConsumer_03()  throws Throwable  {
      //caseID:15125c593ea0c84510702691bf6f5b5e
      //CoveredLines: [45, 221, 224, 225, 230, 231, 236, 238, 239, 242, 243, 244, 245, 246, 248, 249, 250, 320, 321, 322, 329, 333, 334, 335]
      //Input_0_ConsumerRequest: {getRequestNo=\"J\", getUserNo=\"J\", getCardNumber=\"J\", getIdNumber=\"J\", getMobile=\"J\", getFullname=\"J\"}
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Long long0 = new Long(3903L);
      //mock consumer0
      Consumer consumer0 = mock(Consumer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("J").when(consumer0).getAuthList();
      doReturn("J").when(consumer0).getFullname();
      doReturn(long0).when(consumer0).getId();
      doReturn("J").when(consumer0).getIdNumber();
      doReturn(integer0).when(consumer0).getIsBindCard();
      doReturn(integer0).when(consumer0).getIsCardAuth();
      doReturn(bigDecimal0).when(consumer0).getLoanAmount();
      doReturn("J").when(consumer0).getMobile();
      doReturn("J").when(consumer0).getRole();
      doReturn(integer0).when(consumer0).getStatus();
      doReturn("J").when(consumer0).getUserNo();
      doReturn("J").when(consumer0).getUserType();
      doReturn("J").when(consumer0).getUsername();
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumer0).when(consumerMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      //mock bankCardDTO0
      BankCardDTO bankCardDTO0 = mock(BankCardDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(bankCardDTO0).getStatus();
      //mock bankCardService0
      BankCardService bankCardService0 = mock(BankCardService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bankCardDTO0).when(bankCardService0).getByCardNumber(nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "bankCardService", (Object) bankCardService0);
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      //mock consumerRequest0
      ConsumerRequest consumerRequest0 = mock(ConsumerRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("J").when(consumerRequest0).getCardNumber();
      doReturn("J").when(consumerRequest0).getFullname();
      doReturn("J").when(consumerRequest0).getIdNumber();
      doReturn("J").when(consumerRequest0).getMobile();
      doReturn("J").when(consumerRequest0).getRequestNo();
      doReturn("J").when(consumerRequest0).getUserNo();
      
      //Call method: createConsumer
      // Undeclared exception!
      try { 
        consumerServiceImpl0.createConsumer(consumerRequest0);
      } catch(Throwable e) {
         verifyException("com.wanxin.consumer.service.ConsumerServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createConsumer_04()  throws Throwable  {
      //caseID:29b04fdfe3cbcb399a93fd53d755d416
      //CoveredLines: [45, 221, 224, 225, 230, 231, 236, 238, 239, 242, 243, 244, 245, 246, 248, 249, 250, 320, 321, 322, 329, 333, 334, 335]
      //Input_0_ConsumerRequest: {getRequestNo=\"{0}\", getUserNo=\"{0}\", getCardNumber=\"{0}\", getIdNumber=\"{0}\", getMobile=\"{0}\", getFullname=\"{0}\"}
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long(1627L);
      //mock consumer0
      Consumer consumer0 = mock(Consumer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("{0}").when(consumer0).getAuthList();
      doReturn("{0}").when(consumer0).getFullname();
      doReturn(long0).when(consumer0).getId();
      doReturn("{0}").when(consumer0).getIdNumber();
      doReturn(integer0).when(consumer0).getIsBindCard();
      doReturn(integer0).when(consumer0).getIsCardAuth();
      doReturn(bigDecimal0).when(consumer0).getLoanAmount();
      doReturn("{0}").when(consumer0).getMobile();
      doReturn("{0}").when(consumer0).getRole();
      doReturn(integer0).when(consumer0).getStatus();
      doReturn("{0}").when(consumer0).getUserNo();
      doReturn("{0}").when(consumer0).getUserType();
      doReturn("{0}").when(consumer0).getUsername();
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumer0).when(consumerMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      //mock bankCardService0
      BankCardService bankCardService0 = mock(BankCardService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((BankCardDTO) null).when(bankCardService0).getByCardNumber(nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "bankCardService", (Object) bankCardService0);
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      //mock consumerRequest0
      ConsumerRequest consumerRequest0 = mock(ConsumerRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("{0}").when(consumerRequest0).getCardNumber();
      doReturn("{0}").when(consumerRequest0).getFullname();
      doReturn("{0}").when(consumerRequest0).getIdNumber();
      doReturn("{0}").when(consumerRequest0).getMobile();
      doReturn("{0}").when(consumerRequest0).getRequestNo();
      doReturn("{0}").when(consumerRequest0).getUserNo();
      
      //Call method: createConsumer
      // Undeclared exception!
      try { 
        consumerServiceImpl0.createConsumer(consumerRequest0);
      } catch(Throwable e) {
         verifyException("com.wanxin.consumer.service.ConsumerServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createRechargeRecord_05()  throws Throwable  {
      //caseID:0958c61c7395742853eeee42ba604baa
      //CoveredLines: [45, 133, 134, 320, 321, 325]
      //Input_0_String: getRequestNo
      //Input_1_String: 2
      //Input_2_String: -463986777
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      
      //Call method: createRechargeRecord
      // Undeclared exception!
      try { 
        consumerServiceImpl0.createRechargeRecord("getRequestNo", "2", "-463986777");
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_createRechargeRecord_06()  throws Throwable  {
      //caseID:41485f6299084ab6a7ba0ff018ff2162
      //CoveredLines: [45, 133, 134, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 159, 160, 320, 321, 322, 329, 333, 334, 335]
      //Input_0_String: -463986777
      //Input_1_String: Z?
      //Input_2_String: i7&\"/!xr
      //Assert: assertNull(method_result.isSuccessful());
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock restResponse0
      RestResponse<GatewayRequest> restResponse0 = (RestResponse<GatewayRequest>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("/cs/hostRunning").when(restResponse0).toString();
      //mock depositoryAgentApiAgent0
      DepositoryAgentApiAgent depositoryAgentApiAgent0 = mock(DepositoryAgentApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(depositoryAgentApiAgent0).createRechargeRecord(any(com.wanxin.api.consumer.model.RechargeRequest.class));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Long long0 = new Long(2236L);
      //mock consumer0
      Consumer consumer0 = mock(Consumer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("/cs/hostRunning").when(consumer0).getAuthList();
      doReturn("/cs/hostRunning").when(consumer0).getFullname();
      doReturn(long0).when(consumer0).getId();
      doReturn("/cs/hostRunning").when(consumer0).getIdNumber();
      doReturn(integer0).when(consumer0).getIsBindCard();
      doReturn(integer0).when(consumer0).getIsCardAuth();
      doReturn(bigDecimal0).when(consumer0).getLoanAmount();
      doReturn("/cs/hostRunning").when(consumer0).getMobile();
      doReturn("/cs/hostRunning").when(consumer0).getRole();
      doReturn(integer0).when(consumer0).getStatus();
      doReturn("/cs/hostRunning").when(consumer0).getUserNo();
      doReturn("/cs/hostRunning").when(consumer0).getUserType();
      doReturn("/cs/hostRunning").when(consumer0).getUsername();
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumer0).when(consumerMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      //mock rechargeRecordMapper0
      RechargeRecordMapper rechargeRecordMapper0 = mock(RechargeRecordMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((int)(byte)0).when(rechargeRecordMapper0).insert(any(com.wanxin.consumer.entity.RechargeRecord.class));
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "rechargeRecordMapper", (Object) rechargeRecordMapper0);
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "depositoryAgentApiAgent", (Object) depositoryAgentApiAgent0);
      
      //Call method: createRechargeRecord
      RestResponse<GatewayRequest> restResponse1 = consumerServiceImpl0.createRechargeRecord("-463986777", "Z?", "i7&\"/!xr");
      
      //Test Result Assert
      assertNull(restResponse1.isSuccessful());
  }

  @Test(timeout = 9000)
  public void test_createWithdrawRecord_07()  throws Throwable  {
      //caseID:77713e0bc88b699cb9a69887080bcc0a
      //CoveredLines: [45, 86, 87, 320, 321, 325]
      //Input_0_String: 2
      //Input_1_String: com/wanxin/consumer/entity/WithdrawRecord
      //Input_2_String: 1
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      
      //Call method: createWithdrawRecord
      // Undeclared exception!
      try { 
        consumerServiceImpl0.createWithdrawRecord("2", "com/wanxin/consumer/entity/WithdrawRecord", "1");
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_createWithdrawRecord_08()  throws Throwable  {
      //caseID:2679df1a567ae06c67adcdfede589a27
      //CoveredLines: [45, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 115, 116, 320, 321, 322, 329, 333, 334, 335]
      //Input_0_String: 2
      //Input_1_String: com/wanxin/consumer/entity/WithdrawRecord
      //Input_2_String: 1
      //Assert: assertNull(method_result);
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock depositoryAgentApiAgent0
      DepositoryAgentApiAgent depositoryAgentApiAgent0 = mock(DepositoryAgentApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumer0
      Consumer consumer0 = mock(Consumer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumer0).when(consumerMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      //mock withdrawRecordMapper0
      WithdrawRecordMapper withdrawRecordMapper0 = mock(WithdrawRecordMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "withdrawRecordMapper", (Object) withdrawRecordMapper0);
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "depositoryAgentApiAgent", (Object) depositoryAgentApiAgent0);
      
      //Call method: createWithdrawRecord
      RestResponse<GatewayRequest> restResponse0 = consumerServiceImpl0.createWithdrawRecord("2", "com/wanxin/consumer/entity/WithdrawRecord", "1");
      
      //Test Result Assert
      assertNull(restResponse0);
  }

  @Test(timeout = 9000)
  public void test_getBorrower_09()  throws Throwable  {
      //caseID:f1b8ca089340094912b7fde73fcca79f
      //CoveredLines: [45, 65, 76, 77, 78, 79]
      //Input_0_Long: 10000000000L
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      Long long0 = new Long(10000000000L);
      
      //Call method: getBorrower
      // Undeclared exception!
      try { 
        consumerServiceImpl0.getBorrower(long0);
      } catch(Throwable e) {
         verifyException("com.wanxin.consumer.service.ConsumerServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_getBorrower_10()  throws Throwable  {
      //caseID:82ef337f983b0040dd541abf01fc7d46
      //CoveredLines: [45, 65, 66, 67, 68, 69, 76, 77, 81, 329, 333, 334, 335]
      //Input_0_Long: 2332
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Long long0 = new Long(2332);
      //mock consumer0
      Consumer consumer0 = mock(Consumer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-463986777").when(consumer0).getAuthList();
      doReturn("-463986777").when(consumer0).getFullname();
      doReturn(long0).when(consumer0).getId();
      doReturn("-463986777").when(consumer0).getIdNumber();
      doReturn(integer0).when(consumer0).getIsBindCard();
      doReturn(integer0).when(consumer0).getIsCardAuth();
      doReturn(bigDecimal0).when(consumer0).getLoanAmount();
      doReturn("-463986777").when(consumer0).getMobile();
      doReturn("-463986777").when(consumer0).getRole();
      doReturn(integer0).when(consumer0).getStatus();
      doReturn("-463986777").when(consumer0).getUserNo();
      doReturn("-463986777").when(consumer0).getUserType();
      doReturn("-463986777").when(consumer0).getUsername();
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumer0).when(consumerMapper0).selectById(any(java.io.Serializable.class));
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      
      //Call method: getBorrower
      // Undeclared exception!
      try { 
        consumerServiceImpl0.getBorrower(long0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"\"", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_getConsumerByMobile_11()  throws Throwable  {
      //caseID:c261da3ecd7376a6d65fac09132f26c2
      //CoveredLines: [45, 189, 320, 321, 322, 329, 333, 334, 335]
      //Input_0_String: birthday
      //Assert: assertNull(method_result.getIsBindCard());
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock consumer0
      Consumer consumer0 = mock(Consumer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumer0).when(consumerMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      
      //Call method: getConsumerByMobile
      ConsumerDTO consumerDTO0 = consumerServiceImpl0.getConsumerByMobile("birthday");
      
      //Test Result Assert
      assertNull(consumerDTO0.getIsBindCard());
  }

  @Test(timeout = 9000)
  public void test_modifyRechargeRecordResult_12()  throws Throwable  {
      //caseID:d99a6f84d91fe29242a136143fb9eba4
      //CoveredLines: [45, 164, 165]
      //Input_0_DepositoryRechargeResponse: {getTransactionStatus=\"9\"}
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock depositoryRechargeResponse0
      DepositoryRechargeResponse depositoryRechargeResponse0 = mock(DepositoryRechargeResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("9").when(depositoryRechargeResponse0).getTransactionStatus();
      
      //Call method: modifyRechargeRecordResult
      // Undeclared exception!
      try { 
        consumerServiceImpl0.modifyRechargeRecordResult(depositoryRechargeResponse0);
      } catch(Throwable e) {
         verifyException("com.wanxin.consumer.service.ConsumerServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_modifyResult_13()  throws Throwable  {
      //caseID:52351a2883c9278da16d5c8c77453737
      //CoveredLines: [45, 196, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 215]
      //Input_0_DepositoryConsumerResponse: {getRequestNo=\"Invalid lambda deserialization\", getBankName=\"Invalid lambda deserialization\", getBankCode=\"Invalid lambda deserialization\", getRespCode=\"Invalid lambda deserialization\"}
      //Assert: assertTrue(method_result);
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock bankCardMapper0
      BankCardMapper bankCardMapper0 = mock(BankCardMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(bankCardMapper0).update(any(com.wanxin.consumer.entity.BankCard.class) , any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      Long long0 = new Long(1);
      //mock consumer0
      Consumer consumer0 = mock(Consumer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(consumer0).getId();
      doReturn("Invalid lambda deserialization").when(consumer0).toString();
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumer0).when(consumerMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      doReturn(1).when(consumerMapper0).updateById(any(com.wanxin.consumer.entity.Consumer.class));
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "bankCardMapper", (Object) bankCardMapper0);
      //mock depositoryConsumerResponse0
      DepositoryConsumerResponse depositoryConsumerResponse0 = mock(DepositoryConsumerResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Invalid lambda deserialization").when(depositoryConsumerResponse0).getRequestNo();
      doReturn("Invalid lambda deserialization").when(depositoryConsumerResponse0).getRespCode();
      doReturn("Invalid lambda deserialization").when(depositoryConsumerResponse0).getBankCode();
      doReturn("Invalid lambda deserialization").when(depositoryConsumerResponse0).getBankName();
      
      //Call method: modifyResult
      Boolean boolean0 = consumerServiceImpl0.modifyResult(depositoryConsumerResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_modifyResult_14()  throws Throwable  {
      //caseID:295a722f888c0e17707760ab2a793faf
      //CoveredLines: [45, 196, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 215]
      //Input_0_DepositoryConsumerResponse: {getRequestNo=\"\\u53D1/\\u540C\\u5E03\\u5931\\u8D25\", getRespCode=\"00000\"}
      //Assert: assertFalse(method_result);
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock bankCardMapper0
      BankCardMapper bankCardMapper0 = mock(BankCardMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumer0
      Consumer consumer0 = mock(Consumer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumer0).when(consumerMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "bankCardMapper", (Object) bankCardMapper0);
      //mock depositoryConsumerResponse0
      DepositoryConsumerResponse depositoryConsumerResponse0 = mock(DepositoryConsumerResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u53D1/\u540C\u5E03\u5931\u8D25").when(depositoryConsumerResponse0).getRequestNo();
      doReturn("00000").when(depositoryConsumerResponse0).getRespCode();
      
      //Call method: modifyResult
      Boolean boolean0 = consumerServiceImpl0.modifyResult(depositoryConsumerResponse0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_modifyResult_15()  throws Throwable  {
      //caseID:806b8234d48622f3d20bced8e076152b
      //CoveredLines: [45, 196, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 215]
      //Input_0_DepositoryConsumerResponse: {getRequestNo=\"com/wanxin/consumer/entity/Consumer\", getRespCode=\"com/wanxin/consumer/entity/BankCard\"}
      //Assert: assertFalse(method_result);
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock bankCardMapper0
      BankCardMapper bankCardMapper0 = mock(BankCardMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumer0
      Consumer consumer0 = mock(Consumer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(consumer0).when(consumerMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "bankCardMapper", (Object) bankCardMapper0);
      //mock depositoryConsumerResponse0
      DepositoryConsumerResponse depositoryConsumerResponse0 = mock(DepositoryConsumerResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com/wanxin/consumer/entity/Consumer").when(depositoryConsumerResponse0).getRequestNo();
      doReturn("com/wanxin/consumer/entity/BankCard").when(depositoryConsumerResponse0).getRespCode();
      
      //Call method: modifyResult
      Boolean boolean0 = consumerServiceImpl0.modifyResult(depositoryConsumerResponse0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_modifyWithdrawRecordResult_16()  throws Throwable  {
      //caseID:94e9a0aff2b265ac038d12555e9f8f09
      //CoveredLines: [45, 120, 121]
      //Input_0_DepositoryWithdrawResponse: {getTransactionStatus=\"Oa#LBx/o\"}
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock depositoryWithdrawResponse0
      DepositoryWithdrawResponse depositoryWithdrawResponse0 = mock(DepositoryWithdrawResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Oa#LBx/o").when(depositoryWithdrawResponse0).getTransactionStatus();
      
      //Call method: modifyWithdrawRecordResult
      // Undeclared exception!
      try { 
        consumerServiceImpl0.modifyWithdrawRecordResult(depositoryWithdrawResponse0);
      } catch(Throwable e) {
         verifyException("com.wanxin.consumer.service.ConsumerServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_register_17()  throws Throwable  {
      //caseID:e59f8a5e41b2024388e29992861f0480
      //CoveredLines: [45, 281, 287, 288, 320, 321, 322, 329, 333, 334, 335]
      //Input_0_ConsumerRegisterDTO: {getPassword=\"\", getRole=\"{orPredicate=\", getMobile=\"cancel register\" \"140107\" \"getConsumerId\", getUsername=\"2\" \"0\"}
      
      ConsumerServiceImpl consumerServiceImpl0 = new ConsumerServiceImpl();
      //mock consumer0
      Consumer consumer0 = mock(Consumer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock consumerMapper0
      ConsumerMapper consumerMapper0 = mock(ConsumerMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1624).when(consumerMapper0).insert(any(com.wanxin.consumer.entity.Consumer.class));
      doReturn(consumer0).when(consumerMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) ConsumerServiceImpl.class, consumerServiceImpl0, "consumerMapper", (Object) consumerMapper0);
      //mock consumerRegisterDTO0
      ConsumerRegisterDTO consumerRegisterDTO0 = mock(ConsumerRegisterDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("cancel register", "140107", "getConsumerId").when(consumerRegisterDTO0).getMobile();
      doReturn("").when(consumerRegisterDTO0).getPassword();
      doReturn("{orPredicate=").when(consumerRegisterDTO0).getRole();
      doReturn("2", "0").when(consumerRegisterDTO0).getUsername();
      
      //Call method: register
      // Undeclared exception!
      try { 
        consumerServiceImpl0.register(consumerRegisterDTO0);
      } catch(Throwable e) {
         verifyException("com.wanxin.consumer.service.ConsumerServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }
}
