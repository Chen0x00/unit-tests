/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.consumer.config;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.wanxin.consumer.config.WebMvcConfiguration;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.web.servlet.config.annotation.InterceptorRegistration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class WebMvcConfiguration_SSTest extends WebMvcConfiguration_SSTest_scaffolding {
// allCoveredLines:[25, 34, 35, 76]

  @Test(timeout = 9000)
  public void test_addInterceptors_0()  throws Throwable  {
      //caseID:3b7e7f21bb7999dca5dab7b854574c69
      //CoveredLines: [25, 34, 35]
      //Input_0_InterceptorRegistry: {addInterceptor=interceptorRegistration0}
      
      WebMvcConfiguration webMvcConfiguration0 = new WebMvcConfiguration();
      //mock interceptorRegistration0
      InterceptorRegistration interceptorRegistration0 = mock(InterceptorRegistration.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock interceptorRegistry0
      InterceptorRegistry interceptorRegistry0 = mock(InterceptorRegistry.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(interceptorRegistration0).when(interceptorRegistry0).addInterceptor(any(org.springframework.web.servlet.HandlerInterceptor.class));
      
      //Call method: addInterceptors
      webMvcConfiguration0.addInterceptors(interceptorRegistry0);
  }

  @Test(timeout = 9000)
  public void test_addResourceHandlers_1()  throws Throwable  {
      //caseID:2e2ae01435248e2e316661af3aa153c1
      //CoveredLines: [25, 76]
      //Input_0_ResourceHandlerRegistry: {addResourceHandler=resourceHandlerRegistration0}
      
      WebMvcConfiguration webMvcConfiguration0 = new WebMvcConfiguration();
      //mock resourceHandlerRegistration0
      ResourceHandlerRegistration resourceHandlerRegistration0 = mock(ResourceHandlerRegistration.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock resourceHandlerRegistry0
      ResourceHandlerRegistry resourceHandlerRegistry0 = mock(ResourceHandlerRegistry.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(resourceHandlerRegistration0).when(resourceHandlerRegistry0).addResourceHandler(any(java.lang.String[].class));
      
      //Call method: addResourceHandlers
      // Undeclared exception!
      try { 
        webMvcConfiguration0.addResourceHandlers(resourceHandlerRegistry0);
      } catch(Throwable e) {
         verifyException("com.wanxin.consumer.config.WebMvcConfiguration", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }
}
