/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.consumer.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.consumer.entity.RechargeRecord;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class RechargeRecord_SSTest extends RechargeRecord_SSTest_scaffolding {
// allCoveredLines:[22, 32, 38, 44, 50, 56, 62, 68]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:d15adb07fa1d699727ad5cfb5b9434e5
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 56]
      //Input_0_Object: rechargeRecord0
      //Assert: assertTrue(method_result);
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      
      rechargeRecord0.getCreateDate();
      
      //Call method: equals
      boolean boolean0 = rechargeRecord0.equals(rechargeRecord0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:a68b5c7cfaeab913fd8a95eff81ae023
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 56]
      //Input_0_Object: BigDecimal.TEN
      //Assert: assertFalse(method_result);
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      rechargeRecord0.getCreateDate();
      
      //Call method: equals
      boolean boolean0 = rechargeRecord0.equals(bigDecimal0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:8d744c9b7750be76d626253f8daccb91
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 32, 56]
      //Input_0_Object: rechargeRecord0
      //Assert: assertFalse(method_result);
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      Long long0 = new Long((-24));
      
      rechargeRecord0.getCreateDate();
      
      PrivateAccess.setVariable((Class<?>) RechargeRecord.class, rechargeRecord0, "id", (Object) long0);
      RechargeRecord rechargeRecord1 = new RechargeRecord();
      
      //Call method: equals
      boolean boolean0 = rechargeRecord1.equals(rechargeRecord0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:d885f6e53aacb67defa8c241d5a74983
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 32, 56]
      //Input_0_Object: rechargeRecord1
      //Assert: assertFalse(method_result);
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      Long long0 = new Long(1155);
      
      rechargeRecord0.getCreateDate();
      
      PrivateAccess.setVariable((Class<?>) RechargeRecord.class, rechargeRecord0, "id", (Object) long0);
      RechargeRecord rechargeRecord1 = new RechargeRecord();
      
      //Call method: equals
      boolean boolean0 = rechargeRecord0.equals(rechargeRecord1);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_04()  throws Throwable  {
      //caseID:0f630d1d8e3715e56599f7f7819f5b5f
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 32, 38, 44, 50, 56, 62, 68]
      //Input_0_Object: {}
      //Assert: assertTrue(method_result);
      
      //mock rechargeRecord0
      RechargeRecord rechargeRecord0 = mock(RechargeRecord.class, CALLS_REAL_METHODS);
      RechargeRecord rechargeRecord1 = new RechargeRecord();
      
      //Call method: equals
      boolean boolean0 = rechargeRecord1.equals(rechargeRecord0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_05()  throws Throwable  {
      //caseID:948150d18ac1569378a0088ec5e1d5aa
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 32, 38, 44, 50, 56, 62, 68]
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      
      rechargeRecord0.getCreateDate();
      
      //Call method: hashCode
      rechargeRecord0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_hashCode_06()  throws Throwable  {
      //caseID:fea555a248e2d6fa7b373f04ff2d6d4e
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 32, 38, 44, 50, 56, 62, 68]
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      
      //Call method: hashCode
      rechargeRecord0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAmount_07()  throws Throwable  {
      //caseID:9ec8afcc97b783a5cb5631a42c165a5d
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setAmount
      rechargeRecord0.setAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(rechargeRecord0.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setCallbackStatus_08()  throws Throwable  {
      //caseID:8d06782040d04d50298318e90c5250ba
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22]
      //Input_0_Integer: 224
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      Integer integer0 = new Integer(224);
      
      //Call method: setCallbackStatus
      rechargeRecord0.setCallbackStatus(integer0);
      
      //Test Result Assert
      assertEquals(224, (int)rechargeRecord0.getCallbackStatus());
  }

  @Test(timeout = 9000)
  public void test_setConsumerId_09()  throws Throwable  {
      //caseID:337143baf781aab1dcc9718695caabd5
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22]
      //Input_0_Long: 791L
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      Long long0 = new Long(791L);
      
      //Call method: setConsumerId
      rechargeRecord0.setConsumerId(long0);
      
      //Test Result Assert
      assertNull(rechargeRecord0.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setCreateDate_10()  throws Throwable  {
      //caseID:243c385832d185bd9893545c88a9e80e
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 56]
      //Input_0_LocalDateTime: null
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      
      rechargeRecord0.getCreateDate();
      
      //Call method: setCreateDate
      rechargeRecord0.setCreateDate((LocalDateTime) null);
      
      //Test Result Assert
      assertNull(rechargeRecord0.getId());
  }

  @Test(timeout = 9000)
  public void test_setId_11()  throws Throwable  {
      //caseID:81e1c99a6bfcd16543ced1f1bf88810a
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22]
      //Input_0_Long: 0L
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      Long long0 = new Long(0L);
      
      //Call method: setId
      rechargeRecord0.setId(long0);
      
      //Test Result Assert
      assertNull(rechargeRecord0.getCallbackStatus());
  }

  @Test(timeout = 9000)
  public void test_setRequestNo_12()  throws Throwable  {
      //caseID:ad15053507b8e4ba853b65a24d7f679f
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 56]
      //Input_0_String: 
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      
      rechargeRecord0.getCreateDate();
      
      //Call method: setRequestNo
      rechargeRecord0.setRequestNo("");
      
      //Test Result Assert
      assertNull(rechargeRecord0.getConsumerId());
  }

  @Test(timeout = 9000)
  public void test_setUserNo_13()  throws Throwable  {
      //caseID:0143b745476c483dc4ccff9d77cae976
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 56]
      //Input_0_String: 
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      
      rechargeRecord0.getCreateDate();
      
      //Call method: setUserNo
      rechargeRecord0.setUserNo("");
      
      //Test Result Assert
      assertNull(rechargeRecord0.getCallbackStatus());
  }

  @Test(timeout = 9000)
  public void test_toString_14()  throws Throwable  {
      //caseID:63549e60f03086809217a3bf1e42d03b
      //CoveredLines: [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 32, 38, 44, 50, 56, 62, 68]
      //Assert: assertEquals("RechargeRecord(id=null, consumerId=null, userNo=null, amount=null, createDate=null, requestNo=null, callbackStatus=null)", method_result);
      
      RechargeRecord rechargeRecord0 = new RechargeRecord();
      
      //Call method: toString
      String string0 = rechargeRecord0.toString();
      
      //Test Result Assert
      assertEquals("RechargeRecord(id=null, consumerId=null, userNo=null, amount=null, createDate=null, requestNo=null, callbackStatus=null)", string0);
  }
}
