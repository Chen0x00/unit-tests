/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.depository.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.depository.controller.DepositoryNotifyController;
import com.wanxin.depository.message.GatewayMessageProducer;
import com.wanxin.depository.service.DepositoryRecordService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class DepositoryNotifyController_SSTest extends DepositoryNotifyController_SSTest_scaffolding {
// allCoveredLines:[30, 45, 46, 47, 59, 60, 61, 74, 75, 77, 80]

  @Test(timeout = 9000)
  public void test_receiveDepositoryCreateConsumerResult_0()  throws Throwable  {
      //caseID:ee9af8f9dcfbb0a407caa7a8bee43b1c
      //CoveredLines: [30, 74, 75, 77, 80]
      //Input_0_String: fT
      //Input_1_String: fT
      //Input_2_String: fT
      //Input_3_String: fT
      //Assert: assertEquals("OK", method_result);
      
      DepositoryNotifyController depositoryNotifyController0 = new DepositoryNotifyController();
      //mock gatewayMessageProducer0
      GatewayMessageProducer gatewayMessageProducer0 = mock(GatewayMessageProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock depositoryRecordService0
      DepositoryRecordService depositoryRecordService0 = mock(DepositoryRecordService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DepositoryNotifyController.class, depositoryNotifyController0, "depositoryRecordService", (Object) depositoryRecordService0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryNotifyController.class, depositoryNotifyController0, "gatewayMessageProducer", (Object) gatewayMessageProducer0);
      
      //Call method: receiveDepositoryCreateConsumerResult
      String string0 = depositoryNotifyController0.receiveDepositoryCreateConsumerResult("fT", "fT", "fT", "fT");
      
      //Test Result Assert
      assertEquals("OK", string0);
  }

  @Test(timeout = 9000)
  public void test_receiveDepositoryRechargeResult_1()  throws Throwable  {
      //caseID:55239b360631b119f0ca9d769852840a
      //CoveredLines: [30, 59, 60, 61]
      //Input_0_String: 
      //Input_1_String: 
      //Input_2_String: 
      //Input_3_String: 
      //Assert: assertEquals("OK", method_result);
      
      DepositoryNotifyController depositoryNotifyController0 = new DepositoryNotifyController();
      //mock gatewayMessageProducer0
      GatewayMessageProducer gatewayMessageProducer0 = mock(GatewayMessageProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DepositoryNotifyController.class, depositoryNotifyController0, "gatewayMessageProducer", (Object) gatewayMessageProducer0);
      
      //Call method: receiveDepositoryRechargeResult
      String string0 = depositoryNotifyController0.receiveDepositoryRechargeResult("", "", "", "");
      
      //Test Result Assert
      assertEquals("OK", string0);
  }

  @Test(timeout = 9000)
  public void test_receiveDepositoryWithdrawResult_2()  throws Throwable  {
      //caseID:9c75d221f3285b50cb41983696c652b1
      //CoveredLines: [30, 45, 46, 47]
      //Input_0_String: 
      //Input_1_String: 
      //Input_2_String: 
      //Input_3_String: 
      //Assert: assertEquals("OK", method_result);
      
      DepositoryNotifyController depositoryNotifyController0 = new DepositoryNotifyController();
      //mock gatewayMessageProducer0
      GatewayMessageProducer gatewayMessageProducer0 = mock(GatewayMessageProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DepositoryNotifyController.class, depositoryNotifyController0, "gatewayMessageProducer", (Object) gatewayMessageProducer0);
      
      //Call method: receiveDepositoryWithdrawResult
      String string0 = depositoryNotifyController0.receiveDepositoryWithdrawResult("", "", "", "");
      
      //Test Result Assert
      assertEquals("OK", string0);
  }
}
