/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.depository.interceptor;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.wanxin.depository.interceptor.SignatureInterceptor;
import com.wanxin.depository.service.ConfigService;
import java.nio.charset.Charset;
import okhttp3.HttpUrl;
import okhttp3.Interceptor;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class SignatureInterceptor_SSTest extends SignatureInterceptor_SSTest_scaffolding {
// allCoveredLines:[27, 29, 33, 45, 46, 47, 48, 49, 52, 58, 59, 60, 62, 64, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 80, 81, 82, 84, 86, 88, 90, 92, 94, 101, 103, 107, 110]

  @Test(timeout = 9000)
  public void test_intercept_0()  throws Throwable  {
      //caseID:dbb79f1b7c16a7f98594d826b9c7c2c7
      //CoveredLines: [27, 29, 33, 45, 46, 47, 48, 49, 52, 58, 59, 60, 62, 64, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78]
      //Input_0_Interceptor.Chain: {request=request0}
      
      SignatureInterceptor signatureInterceptor0 = new SignatureInterceptor();
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("&platformNo=").when(configService0).getP2pPrivateKey();
      
      PrivateAccess.setVariable((Class<?>) SignatureInterceptor.class, signatureInterceptor0, "configService", (Object) configService0);
      //mock httpUrl0
      HttpUrl httpUrl0 = mock(HttpUrl.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("reqData=platformNo==").when(httpUrl0).toString();
      //mock request0
      Request request0 = mock(Request.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("GET").when(request0).method();
      doReturn(httpUrl0).when(request0).url();
      //mock interceptor_Chain0
      Interceptor.Chain interceptor_Chain0 = mock(Interceptor.Chain.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(request0).when(interceptor_Chain0).request();
      
      //Call method: intercept
      // Undeclared exception!
      try { 
        signatureInterceptor0.intercept(interceptor_Chain0);
      } catch(Throwable e) {
         verifyException("java.net.URLEncoder", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_intercept_1()  throws Throwable  {
      //caseID:8774fb49b6a32f8034236763d40eb4c2
      //CoveredLines: [27, 29, 33, 45, 46, 47, 48, 52, 58, 59, 60, 62, 64, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 80, 81, 82, 84, 86, 88, 90, 92, 94, 101, 103]
      //Input_0_Interceptor.Chain: {request=request1, proceed=response0}
      
      SignatureInterceptor signatureInterceptor0 = new SignatureInterceptor();
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("{\"signature\":\"&platformNo=\",\"respData\":\"1.0\"}").when(configService0).getDepositoryPublicKey();
      doReturn("MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEApkqNoES+508OiULK5UIEuZ9WxIUG7fB92V0vEi1FyNJgzMc2gi5hy8eGcyYyLWJdEt5h1vC8jclCgEcMY3lp3QIDAQABAkAUhQia6UDBXEEH8QUGazIYEbBsSZoETHPLGbOQQ6Pj1tb6CVC57kioBjwtNBnY2jBDWi5K815LnOBcJSSjJPwhAiEA2eO6VZMTkdjQAkpB5dhy/0C3i8zs0c0M1rPoTA/RpkUCIQDDYHJPqHLkQyd//7sEeYcm8cMBTvDKBXyiuGk8eLRauQIgQo6IlalGmg+Dgp+SP5Z9kjD/oCmp0XB0UoVEGS/f140CIQCsG9YXHgi31ACD3T9eHcBVKjvidyveix7UKSdrQdl+4QIgNCtRVLV+783e7PX5hRXD+knsWTQxDEMEsHi1KsAWtPk=").when(configService0).getP2pPrivateKey();
      
      PrivateAccess.setVariable((Class<?>) SignatureInterceptor.class, signatureInterceptor0, "configService", (Object) configService0);
      //mock httpUrl0
      HttpUrl httpUrl0 = mock(HttpUrl.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("GET").when(httpUrl0).toString();
      //mock request_Builder0
      Request.Builder request_Builder0 = mock(Request.Builder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock request_Builder1
      Request.Builder request_Builder1 = mock(Request.Builder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(request_Builder0).when(request_Builder1).url(anyString());
      //mock request0
      Request request0 = mock(Request.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock request_Builder2
      Request.Builder request_Builder2 = mock(Request.Builder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(request0).when(request_Builder2).build();
      doReturn(request_Builder1).when(request_Builder2).get();
      //mock request1
      Request request1 = mock(Request.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("GET").when(request1).method();
      doReturn(request_Builder2).when(request1).newBuilder();
      doReturn(httpUrl0).when(request1).url();
      //mock charset0
      Charset charset0 = mock(Charset.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock mediaType0
      MediaType mediaType0 = mock(MediaType.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(charset0).when(mediaType0).charset();
      //mock responseBody0
      ResponseBody responseBody0 = mock(ResponseBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("{\"signature\":\"UTF-8\",\"respData\":\"signature\"}").when(responseBody0).string();
      //mock response_Builder0
      Response.Builder response_Builder0 = mock(Response.Builder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock responseBody1
      ResponseBody responseBody1 = mock(ResponseBody.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(mediaType0).when(responseBody1).contentType();
      //mock response0
      Response response0 = mock(Response.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(responseBody0, responseBody1).when(response0).body();
      doReturn(response_Builder0).when(response0).newBuilder();
      //mock interceptor_Chain0
      Interceptor.Chain interceptor_Chain0 = mock(Interceptor.Chain.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(response0).when(interceptor_Chain0).proceed(nullable(okhttp3.Request.class));
      doReturn(request1).when(interceptor_Chain0).request();
      
      //Call method: intercept
      // Undeclared exception!
      try { 
        signatureInterceptor0.intercept(interceptor_Chain0);
      } catch(Throwable e) {
         verifyException("java.nio.charset.Charset", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_intercept_2()  throws Throwable  {
      //caseID:6da2ab99e2f04710f0bc8a559dc0fb92
      //CoveredLines: [27, 29, 33, 58, 59, 60, 62, 107, 110]
      //Input_0_Interceptor.Chain: {request=request0}
      //Assert: assertNull(method_result);
      
      SignatureInterceptor signatureInterceptor0 = new SignatureInterceptor();
      //mock request0
      Request request0 = mock(Request.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock interceptor_Chain0
      Interceptor.Chain interceptor_Chain0 = mock(Interceptor.Chain.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(request0).when(interceptor_Chain0).request();
      
      //Call method: intercept
      Response response0 = signatureInterceptor0.intercept(interceptor_Chain0);
      
      //Test Result Assert
      assertNull(response0);
  }
}
