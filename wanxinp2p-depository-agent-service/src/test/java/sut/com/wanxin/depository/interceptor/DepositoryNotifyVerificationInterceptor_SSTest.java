/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.depository.interceptor;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.depository.interceptor.DepositoryNotifyVerificationInterceptor;
import com.wanxin.depository.service.ConfigService;
import java.io.PrintWriter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class DepositoryNotifyVerificationInterceptor_SSTest extends DepositoryNotifyVerificationInterceptor_SSTest_scaffolding {
// allCoveredLines:[26, 33, 34, 35, 36, 39, 40, 41, 42, 46, 47, 48, 49, 64, 65, 69, 79, 80, 81, 82, 83, 85, 86]

  @Test(timeout = 9000)
  public void test_preHandle_0()  throws Throwable  {
      //caseID:46a61615c3197d244dbaa145c9676f16
      //CoveredLines: [26, 33, 34, 35, 36, 39, 41, 42, 79, 80, 81, 82, 83, 85, 86]
      //Input_0_HttpServletRequest: {getParameter=\"160101\" \"\" \"160101\" \"\"}
      //Input_1_HttpServletResponse: {getWriter=printWriter0}
      //Input_2_Object: {getParameter=\"160101\" \"\" \"160101\" \"\"}
      //Assert: assertFalse(method_result);
      
      DepositoryNotifyVerificationInterceptor depositoryNotifyVerificationInterceptor0 = new DepositoryNotifyVerificationInterceptor();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("160101", "", "160101", "").when(httpServletRequest0).getParameter(anyString());
      //mock printWriter0
      PrintWriter printWriter0 = mock(PrintWriter.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(printWriter0).when(httpServletResponse0).getWriter();
      
      //Call method: preHandle
      boolean boolean0 = depositoryNotifyVerificationInterceptor0.preHandle(httpServletRequest0, httpServletResponse0, httpServletRequest0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_preHandle_1()  throws Throwable  {
      //caseID:55a79105a7dc55545cd26a0298adbe8c
      //CoveredLines: [26, 33, 34, 35, 36, 39, 41, 42, 79, 80, 81, 82, 83, 85, 86]
      //Input_0_HttpServletRequest: {getParameter=\"@p^t=<x yhrc.nm\" \"@p^t=<x yhrc.nm\" \"\" \"\"}
      //Input_1_HttpServletResponse: {getWriter=printWriter0}
      //Input_2_Object: {getWriter=printWriter0}
      //Assert: assertFalse(method_result);
      
      DepositoryNotifyVerificationInterceptor depositoryNotifyVerificationInterceptor0 = new DepositoryNotifyVerificationInterceptor();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("@p^t=<x yhrc.nm", "@p^t=<x yhrc.nm", "", "").when(httpServletRequest0).getParameter(anyString());
      //mock printWriter0
      PrintWriter printWriter0 = mock(PrintWriter.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(printWriter0).when(httpServletResponse0).getWriter();
      
      //Call method: preHandle
      boolean boolean0 = depositoryNotifyVerificationInterceptor0.preHandle(httpServletRequest0, httpServletResponse0, httpServletResponse0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_preHandle_2()  throws Throwable  {
      //caseID:5be1e37fb9e7ece285f464268b5eaf47
      //CoveredLines: [26, 33, 34, 35, 36, 39, 41, 42, 79, 80, 81, 82, 83, 85, 86]
      //Input_0_HttpServletRequest: {getParameter=\"\" \"\" \"\" \"\"}
      //Input_1_HttpServletResponse: {getWriter=printWriter0}
      //Input_2_Object: {getParameter=\"\" \"\" \"\" \"\"}
      //Assert: assertFalse(method_result);
      
      DepositoryNotifyVerificationInterceptor depositoryNotifyVerificationInterceptor0 = new DepositoryNotifyVerificationInterceptor();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("", "", "", "").when(httpServletRequest0).getParameter(anyString());
      //mock printWriter0
      PrintWriter printWriter0 = mock(PrintWriter.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(printWriter0).when(httpServletResponse0).getWriter();
      
      //Call method: preHandle
      boolean boolean0 = depositoryNotifyVerificationInterceptor0.preHandle(httpServletRequest0, httpServletResponse0, httpServletRequest0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_preHandle_3()  throws Throwable  {
      //caseID:38dbcfe14e466b0894df7f2e3c1a2791
      //CoveredLines: [26, 33, 34, 35, 36, 39, 40, 41, 42, 79, 80, 81, 82, 83, 85, 86]
      //Input_0_HttpServletRequest: {getParameter=\"\\u5B58\\u7BA1\\u4EE3\\u7406\\u670D\\u52A1\\u6821\\u9A8C\\u5B58\\u7BA1\\u7CFB\\u7EDF\\u8FD4\\u56DE\\u6570\\u636E\\u7B7E\\u540D\\u5931\\u8D25\" \"\\u5B58\\u7BA1\\u4EE3\\u7406\\u670D\\u52A1\\u6821\\u9A8C\\u5B58\\u7BA1\\u7CFB\\u7EDF\\u8FD4\\u56DE\\u6570\\u636E\\u7B7E\\u540D\\u5931\\u8D25\" \"\" \"\\u5B58\\u7BA1\\u4EE3\\u7406\\u670D\\u52A1\\u6821\\u9A8C\\u5B58\\u7BA1\\u7CFB\\u7EDF\\u8FD4\\u56DE\\u6570\\u636E\\u7B7E\\u540D\\u5931\\u8D25\"}
      //Input_1_HttpServletResponse: {getWriter=printWriter0}
      //Input_2_Object: {getParameter=\"\\u5B58\\u7BA1\\u4EE3\\u7406\\u670D\\u52A1\\u6821\\u9A8C\\u5B58\\u7BA1\\u7CFB\\u7EDF\\u8FD4\\u56DE\\u6570\\u636E\\u7B7E\\u540D\\u5931\\u8D25\" \"\\u5B58\\u7BA1\\u4EE3\\u7406\\u670D\\u52A1\\u6821\\u9A8C\\u5B58\\u7BA1\\u7CFB\\u7EDF\\u8FD4\\u56DE\\u6570\\u636E\\u7B7E\\u540D\\u5931\\u8D25\" \"\" \"\\u5B58\\u7BA1\\u4EE3\\u7406\\u670D\\u52A1\\u6821\\u9A8C\\u5B58\\u7BA1\\u7CFB\\u7EDF\\u8FD4\\u56DE\\u6570\\u636E\\u7B7E\\u540D\\u5931\\u8D25\"}
      //Assert: assertFalse(method_result);
      
      DepositoryNotifyVerificationInterceptor depositoryNotifyVerificationInterceptor0 = new DepositoryNotifyVerificationInterceptor();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u5B58\u7BA1\u4EE3\u7406\u670D\u52A1\u6821\u9A8C\u5B58\u7BA1\u7CFB\u7EDF\u8FD4\u56DE\u6570\u636E\u7B7E\u540D\u5931\u8D25", "\u5B58\u7BA1\u4EE3\u7406\u670D\u52A1\u6821\u9A8C\u5B58\u7BA1\u7CFB\u7EDF\u8FD4\u56DE\u6570\u636E\u7B7E\u540D\u5931\u8D25", "", "\u5B58\u7BA1\u4EE3\u7406\u670D\u52A1\u6821\u9A8C\u5B58\u7BA1\u7CFB\u7EDF\u8FD4\u56DE\u6570\u636E\u7B7E\u540D\u5931\u8D25").when(httpServletRequest0).getParameter(anyString());
      //mock printWriter0
      PrintWriter printWriter0 = mock(PrintWriter.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(printWriter0).when(httpServletResponse0).getWriter();
      
      //Call method: preHandle
      boolean boolean0 = depositoryNotifyVerificationInterceptor0.preHandle(httpServletRequest0, httpServletResponse0, httpServletRequest0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_preHandle_4()  throws Throwable  {
      //caseID:0114aa08d1c739f3e078e8215a316143
      //CoveredLines: [26, 33, 34, 35, 36, 39, 40, 46, 47, 48, 49, 64, 65, 69, 79, 80, 81, 82, 83, 85, 86]
      //Input_0_HttpServletRequest: {getParameter=\"platformNo\" \"platformNo\" \"platformNo\" \"platformNo\"}
      //Input_1_HttpServletResponse: {getWriter=printWriter0}
      //Input_2_Object: {getParameter=\"platformNo\" \"platformNo\" \"platformNo\" \"platformNo\"}
      //Assert: assertFalse(method_result);
      
      DepositoryNotifyVerificationInterceptor depositoryNotifyVerificationInterceptor0 = new DepositoryNotifyVerificationInterceptor();
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("platformNo").when(configService0).getDepositoryPublicKey();
      
      PrivateAccess.setVariable((Class<?>) DepositoryNotifyVerificationInterceptor.class, depositoryNotifyVerificationInterceptor0, "configService", (Object) configService0);
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("platformNo", "platformNo", "platformNo", "platformNo").when(httpServletRequest0).getParameter(anyString());
      //mock printWriter0
      PrintWriter printWriter0 = mock(PrintWriter.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(printWriter0).when(httpServletResponse0).getWriter();
      
      //Call method: preHandle
      boolean boolean0 = depositoryNotifyVerificationInterceptor0.preHandle(httpServletRequest0, httpServletResponse0, httpServletRequest0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }
}
