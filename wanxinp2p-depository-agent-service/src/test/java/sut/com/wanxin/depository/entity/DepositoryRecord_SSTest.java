/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.depository.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.depository.entity.DepositoryRecord;
import java.time.LocalDateTime;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.mock.java.time.MockLocalDateTime;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class DepositoryRecord_SSTest extends DepositoryRecord_SSTest_scaffolding {
// allCoveredLines:[20, 22, 31, 37, 45, 51, 57, 63, 69, 75, 81, 87, 89, 90, 92, 93, 94, 95, 96, 97]

  @Test(timeout = 9000)
  public void test_canEqual_00()  throws Throwable  {
      //caseID:fcbb27b881fd38d6e23da91bfb5ca548
      //CoveredLines: [22, 22, 22, 92, 93, 94, 95, 96, 97]
      //Input_0_Object: object0
      //Assert: assertFalse(method_result);
      
      Long long0 = new Long((-2L));
      DepositoryRecord depositoryRecord0 = new DepositoryRecord(", objectId=", "1.0", "", long0);
      Object object0 = new Object();
      
      //Call method: canEqual
      boolean boolean0 = (boolean)PrivateAccess.callMethod((Class<DepositoryRecord>) DepositoryRecord.class, depositoryRecord0, "canEqual", object0, (Class<?>) Object.class);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:6866dc6b7daf5f58e7164ab24cb893e9
      //CoveredLines: [22, 22, 22, 89, 90]
      //Input_0_Object: depositoryRecord0
      //Assert: assertTrue(method_result);
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      
      //Call method: equals
      boolean boolean0 = depositoryRecord0.equals(depositoryRecord0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:aa550d1ff9490539cd6ccf23ca8c857c
      //CoveredLines: [22, 22, 22, 31, 89, 90]
      //Input_0_Object: depositoryRecord0
      //Assert: assertFalse(method_result);
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      Long long0 = new Long(192);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecord.class, depositoryRecord0, "id", (Object) long0);
      DepositoryRecord depositoryRecord1 = new DepositoryRecord();
      
      //Call method: equals
      boolean boolean0 = depositoryRecord1.equals(depositoryRecord0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:89bb3fee634145b32338b4c05114b4f1
      //CoveredLines: [22, 22, 22, 31, 89, 90]
      //Input_0_Object: depositoryRecord1
      //Assert: assertFalse(method_result);
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      Long long0 = new Long(43);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecord.class, depositoryRecord0, "id", (Object) long0);
      DepositoryRecord depositoryRecord1 = new DepositoryRecord();
      
      //Call method: equals
      boolean boolean0 = depositoryRecord0.equals(depositoryRecord1);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_04()  throws Throwable  {
      //caseID:9469cee1daf75ab86b7ece7b8c501e24
      //CoveredLines: [22, 22, 22, 92, 93, 94, 95, 96, 97]
      //Input_0_Object: 538
      //Assert: assertFalse(method_result);
      
      Long long0 = new Long(75L);
      DepositoryRecord depositoryRecord0 = new DepositoryRecord("43", "", "@`XcKqx5~D", long0);
      Integer integer0 = new Integer(538);
      
      //Call method: equals
      boolean boolean0 = depositoryRecord0.equals(integer0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_05()  throws Throwable  {
      //caseID:b0dc9652914fd3d5ff2447c93bfbb7a8
      //CoveredLines: [22, 22, 22, 31, 37, 45, 51, 57, 63, 69, 75, 81, 87, 89, 90]
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      
      //Call method: hashCode
      depositoryRecord0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setConfirmDate_06()  throws Throwable  {
      //caseID:f3c10ce902ec57c93a5c750e7ed7b09f
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89, 90]
      //Input_0_LocalDateTime: localDateTime0
      //Assert: assertSame(depositoryRecord0, method_result);
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      
      //Call method: setConfirmDate
      DepositoryRecord depositoryRecord1 = depositoryRecord0.setConfirmDate(localDateTime0);
      
      //Test Result Assert
      assertSame(depositoryRecord0, depositoryRecord1);
  }

  @Test(timeout = 9000)
  public void test_setCreateDate_07()  throws Throwable  {
      //caseID:0495a3bdb6f16472448c5bc40496fe48
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89, 90]
      //Input_0_LocalDateTime: localDateTime0
      //Assert: assertNull(method_result.getRequestNo());
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      
      //Call method: setCreateDate
      DepositoryRecord depositoryRecord1 = depositoryRecord0.setCreateDate(localDateTime0);
      
      //Test Result Assert
      assertNull(depositoryRecord1.getRequestNo());
  }

  @Test(timeout = 9000)
  public void test_setId_08()  throws Throwable  {
      //caseID:0f2bedf77c48cdc89d7cbfcb619feec1
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 93, 94, 95, 96, 97]
      //Input_0_Long: 427L
      //Assert: assertEquals(427L, (long)method_result.getObjectId());
      
      Long long0 = new Long(427L);
      DepositoryRecord depositoryRecord0 = new DepositoryRecord("1", ", objectId=", "C>3O<_y", long0);
      
      //Call method: setId
      DepositoryRecord depositoryRecord1 = depositoryRecord0.setId(long0);
      
      //Test Result Assert
      assertEquals(427L, (long)depositoryRecord1.getObjectId());
  }

  @Test(timeout = 9000)
  public void test_setIsSyn_09()  throws Throwable  {
      //caseID:b880155eead98ffcacd371a9a4f695fb
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 93, 94, 95, 96, 97]
      //Input_0_Integer: 59
      //Assert: assertNull(method_result.getRequestStatus());
      
      Long long0 = new Long(0L);
      DepositoryRecord depositoryRecord0 = new DepositoryRecord("0", "43", "", long0);
      Integer integer0 = new Integer(59);
      
      //Call method: setIsSyn
      DepositoryRecord depositoryRecord1 = depositoryRecord0.setIsSyn(integer0);
      
      //Test Result Assert
      assertNull(depositoryRecord1.getRequestStatus());
  }

  @Test(timeout = 9000)
  public void test_setObjectId_10()  throws Throwable  {
      //caseID:c9028f8bbcd679c766c442a834b3569b
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89, 90]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result.getResponseData());
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      Long long0 = new Long(0L);
      
      //Call method: setObjectId
      DepositoryRecord depositoryRecord1 = depositoryRecord0.setObjectId(long0);
      
      //Test Result Assert
      assertNull(depositoryRecord1.getResponseData());
  }

  @Test(timeout = 9000)
  public void test_setObjectType_11()  throws Throwable  {
      //caseID:e1e1d272d0b9157c6807971c97fcfcc5
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89, 90]
      //Input_0_String: 1.0
      //Assert: assertSame(depositoryRecord0, method_result);
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      
      //Call method: setObjectType
      DepositoryRecord depositoryRecord1 = depositoryRecord0.setObjectType("1.0");
      
      //Test Result Assert
      assertSame(depositoryRecord0, depositoryRecord1);
  }

  @Test(timeout = 9000)
  public void test_setRequestNo_12()  throws Throwable  {
      //caseID:7513c0935fbc6219ac2ab1edc74e2923
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 93, 94, 95, 96, 97]
      //Input_0_String: 
      //Assert: assertSame(method_result, depositoryRecord0);
      
      Long long0 = new Long(1223L);
      DepositoryRecord depositoryRecord0 = new DepositoryRecord(", requestType=", "HmacSHA512", "rx.internal.producers.SingleDelayedProducer", long0);
      
      //Call method: setRequestNo
      DepositoryRecord depositoryRecord1 = depositoryRecord0.setRequestNo("");
      
      //Test Result Assert
      assertSame(depositoryRecord1, depositoryRecord0);
  }

  @Test(timeout = 9000)
  public void test_setRequestStatus_13()  throws Throwable  {
      //caseID:ba92aaa8ff2a4a40174a5c18d87e1b58
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89, 90]
      //Input_0_Integer: (-4097)
      //Assert: assertNull(method_result.getId());
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      Integer integer0 = new Integer((-4097));
      
      //Call method: setRequestStatus
      DepositoryRecord depositoryRecord1 = depositoryRecord0.setRequestStatus(integer0);
      
      //Test Result Assert
      assertNull(depositoryRecord1.getId());
  }

  @Test(timeout = 9000)
  public void test_setRequestType_14()  throws Throwable  {
      //caseID:902c009253ffd38a009a6e1dbaa7e9a6
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89, 90]
      //Input_0_String: 1
      //Assert: assertNull(method_result.getIsSyn());
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      
      //Call method: setRequestType
      DepositoryRecord depositoryRecord1 = depositoryRecord0.setRequestType("1");
      
      //Test Result Assert
      assertNull(depositoryRecord1.getIsSyn());
  }

  @Test(timeout = 9000)
  public void test_setResponseData_15()  throws Throwable  {
      //caseID:87435c6048361fbb572fc9e5a46d8d0c
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89, 90]
      //Input_0_String: Kitcq-56w1(wTg5-O
      //Assert: assertSame(method_result, depositoryRecord0);
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      
      //Call method: setResponseData
      DepositoryRecord depositoryRecord1 = depositoryRecord0.setResponseData("Kitcq-56w1(wTg5-O");
      
      //Test Result Assert
      assertSame(depositoryRecord1, depositoryRecord0);
  }

  @Test(timeout = 9000)
  public void test_toString_16()  throws Throwable  {
      //caseID:048cb2b3dad03ed674b6feab8bb9eb86
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 37, 45, 51, 57, 63, 69, 75, 81, 87, 89, 90]
      //Assert: assertEquals("DepositoryRecord(id=null, requestNo=null, requestType=null, objectType=null, objectId=null, createDate=null, isSyn=null, requestStatus=null, confirmDate=null, responseData=null)", method_result);
      
      DepositoryRecord depositoryRecord0 = new DepositoryRecord();
      
      //Call method: toString
      String string0 = depositoryRecord0.toString();
      
      //Test Result Assert
      assertEquals("DepositoryRecord(id=null, requestNo=null, requestType=null, objectType=null, objectId=null, createDate=null, isSyn=null, requestStatus=null, confirmDate=null, responseData=null)", string0);
  }
}
