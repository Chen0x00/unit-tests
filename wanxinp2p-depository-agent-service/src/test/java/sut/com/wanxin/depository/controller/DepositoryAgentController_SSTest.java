/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.depository.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.api.consumer.model.ConsumerRequest;
import com.wanxin.api.consumer.model.RechargeRequest;
import com.wanxin.api.consumer.model.WithdrawRequest;
import com.wanxin.api.depository.model.DepositoryBaseResponse;
import com.wanxin.api.depository.model.DepositoryResponseDTO;
import com.wanxin.api.depository.model.GatewayRequest;
import com.wanxin.api.depository.model.LoanRequest;
import com.wanxin.api.depository.model.UserAutoPreTransactionRequest;
import com.wanxin.api.repayment.model.RepaymentRequest;
import com.wanxin.api.transaction.model.ModifyProjectStatusDTO;
import com.wanxin.api.transaction.model.ProjectDTO;
import com.wanxin.common.domain.RestResponse;
import com.wanxin.depository.controller.DepositoryAgentController;
import com.wanxin.depository.service.DepositoryRecordService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class DepositoryAgentController_SSTest extends DepositoryAgentController_SSTest_scaffolding {
// allCoveredLines:[34, 43, 51, 59, 67, 77, 78, 79, 80, 88, 89, 90, 91, 92, 93, 103, 113, 121]

  @Test(timeout = 9000)
  public void test_confirmLoan_0()  throws Throwable  {
      //caseID:840ed320fb0ac36e01da969d83562bd2
      //CoveredLines: [34, 59, 77, 78, 79, 80]
      //Input_0_LoanRequest: {}
      //Assert: assertTrue(method_result.isSuccessful());
      
      DepositoryAgentController depositoryAgentController0 = new DepositoryAgentController();
      //mock depositoryBaseResponse0
      DepositoryBaseResponse depositoryBaseResponse0 = mock(DepositoryBaseResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(depositoryBaseResponse0).getRespCode();
      //mock depositoryBaseResponse1
      DepositoryBaseResponse depositoryBaseResponse1 = mock(DepositoryBaseResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(depositoryBaseResponse1).getRespMsg();
      //mock depositoryResponseDTO0
      DepositoryResponseDTO<DepositoryBaseResponse> depositoryResponseDTO0 = (DepositoryResponseDTO<DepositoryBaseResponse>) mock(DepositoryResponseDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryBaseResponse0, depositoryBaseResponse1).when(depositoryResponseDTO0).getRespData();
      //mock depositoryRecordService0
      DepositoryRecordService depositoryRecordService0 = mock(DepositoryRecordService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryResponseDTO0).when(depositoryRecordService0).confirmLoan(any(com.wanxin.api.depository.model.LoanRequest.class));
      
      PrivateAccess.setVariable((Class<?>) DepositoryAgentController.class, depositoryAgentController0, "depositoryRecordService", (Object) depositoryRecordService0);
      //mock loanRequest0
      LoanRequest loanRequest0 = mock(LoanRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: confirmLoan
      RestResponse<String> restResponse0 = depositoryAgentController0.confirmLoan(loanRequest0);
      
      //Test Result Assert
      assertTrue(restResponse0.isSuccessful());
  }

  @Test(timeout = 9000)
  public void test_confirmRepayment_1()  throws Throwable  {
      //caseID:82b4bdec991346243b7760c0313e3e3c
      //CoveredLines: [34, 43, 77, 78, 79, 80]
      //Input_0_RepaymentRequest: {}
      //Assert: assertTrue(method_result.isSuccessful());
      
      DepositoryAgentController depositoryAgentController0 = new DepositoryAgentController();
      //mock depositoryBaseResponse0
      DepositoryBaseResponse depositoryBaseResponse0 = mock(DepositoryBaseResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("(]q({1Qn;-]0Q").when(depositoryBaseResponse0).getRespCode();
      //mock depositoryBaseResponse1
      DepositoryBaseResponse depositoryBaseResponse1 = mock(DepositoryBaseResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Access-Control-Allow-Origin").when(depositoryBaseResponse1).getRespMsg();
      //mock depositoryResponseDTO0
      DepositoryResponseDTO<DepositoryBaseResponse> depositoryResponseDTO0 = (DepositoryResponseDTO<DepositoryBaseResponse>) mock(DepositoryResponseDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryBaseResponse0, depositoryBaseResponse1).when(depositoryResponseDTO0).getRespData();
      //mock depositoryRecordService0
      DepositoryRecordService depositoryRecordService0 = mock(DepositoryRecordService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryResponseDTO0).when(depositoryRecordService0).confirmRepayment(any(com.wanxin.api.repayment.model.RepaymentRequest.class));
      
      PrivateAccess.setVariable((Class<?>) DepositoryAgentController.class, depositoryAgentController0, "depositoryRecordService", (Object) depositoryRecordService0);
      //mock repaymentRequest0
      RepaymentRequest repaymentRequest0 = mock(RepaymentRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: confirmRepayment
      RestResponse<String> restResponse0 = depositoryAgentController0.confirmRepayment(repaymentRequest0);
      
      //Test Result Assert
      assertTrue(restResponse0.isSuccessful());
  }

  @Test(timeout = 9000)
  public void test_createConsumer_2()  throws Throwable  {
      //caseID:f2cc7780b0577616513dc73682e4141e
      //CoveredLines: [34, 121]
      //Input_0_ConsumerRequest: {}
      //Assert: assertEquals("", method_result.getMsg());
      
      DepositoryAgentController depositoryAgentController0 = new DepositoryAgentController();
      //mock depositoryRecordService0
      DepositoryRecordService depositoryRecordService0 = mock(DepositoryRecordService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DepositoryAgentController.class, depositoryAgentController0, "depositoryRecordService", (Object) depositoryRecordService0);
      //mock consumerRequest0
      ConsumerRequest consumerRequest0 = mock(ConsumerRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: createConsumer
      RestResponse<GatewayRequest> restResponse0 = depositoryAgentController0.createConsumer(consumerRequest0);
      
      //Test Result Assert
      assertEquals("", restResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_createProject_3()  throws Throwable  {
      //caseID:968b0c3a9ab9d76f4fe0a3dc4dae9ba9
      //CoveredLines: [34, 88, 89, 90, 91, 92, 93]
      //Input_0_ProjectDTO: {}
      //Assert: assertTrue(method_result.isSuccessful());
      
      DepositoryAgentController depositoryAgentController0 = new DepositoryAgentController();
      //mock depositoryBaseResponse0
      DepositoryBaseResponse depositoryBaseResponse0 = mock(DepositoryBaseResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock depositoryResponseDTO0
      DepositoryResponseDTO<DepositoryBaseResponse> depositoryResponseDTO0 = (DepositoryResponseDTO<DepositoryBaseResponse>) mock(DepositoryResponseDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryBaseResponse0).when(depositoryResponseDTO0).getRespData();
      //mock depositoryRecordService0
      DepositoryRecordService depositoryRecordService0 = mock(DepositoryRecordService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryResponseDTO0).when(depositoryRecordService0).createProject(any(com.wanxin.api.transaction.model.ProjectDTO.class));
      
      PrivateAccess.setVariable((Class<?>) DepositoryAgentController.class, depositoryAgentController0, "depositoryRecordService", (Object) depositoryRecordService0);
      //mock projectDTO0
      ProjectDTO projectDTO0 = mock(ProjectDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: createProject
      RestResponse<String> restResponse0 = depositoryAgentController0.createProject(projectDTO0);
      
      //Test Result Assert
      assertTrue(restResponse0.isSuccessful());
  }

  @Test(timeout = 9000)
  public void test_createRechargeRecord_4()  throws Throwable  {
      //caseID:743b72e933f59afe71dafdd066e79141
      //CoveredLines: [34, 113]
      //Input_0_RechargeRequest: {}
      //Assert: assertTrue(method_result.isSuccessful());
      
      DepositoryAgentController depositoryAgentController0 = new DepositoryAgentController();
      //mock depositoryRecordService0
      DepositoryRecordService depositoryRecordService0 = mock(DepositoryRecordService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DepositoryAgentController.class, depositoryAgentController0, "depositoryRecordService", (Object) depositoryRecordService0);
      //mock rechargeRequest0
      RechargeRequest rechargeRequest0 = mock(RechargeRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: createRechargeRecord
      RestResponse<GatewayRequest> restResponse0 = depositoryAgentController0.createRechargeRecord(rechargeRequest0);
      
      //Test Result Assert
      assertTrue(restResponse0.isSuccessful());
  }

  @Test(timeout = 9000)
  public void test_createWithdrawRecord_5()  throws Throwable  {
      //caseID:ca347dd2d64ae7a21d19343c9804328e
      //CoveredLines: [34, 103]
      //Input_0_WithdrawRequest: {}
      //Assert: assertTrue(method_result.isSuccessful());
      
      DepositoryAgentController depositoryAgentController0 = new DepositoryAgentController();
      //mock depositoryRecordService0
      DepositoryRecordService depositoryRecordService0 = mock(DepositoryRecordService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DepositoryAgentController.class, depositoryAgentController0, "depositoryRecordService", (Object) depositoryRecordService0);
      //mock withdrawRequest0
      WithdrawRequest withdrawRequest0 = mock(WithdrawRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: createWithdrawRecord
      RestResponse<GatewayRequest> restResponse0 = depositoryAgentController0.createWithdrawRecord(withdrawRequest0);
      
      //Test Result Assert
      assertTrue(restResponse0.isSuccessful());
  }

  @Test(timeout = 9000)
  public void test_modifyProjectStatus_6()  throws Throwable  {
      //caseID:a495023601e80ac9dd59bb8e7e613f9f
      //CoveredLines: [34, 51, 77, 78, 79, 80]
      //Input_0_ModifyProjectStatusDTO: {}
      //Assert: assertTrue(method_result.isSuccessful());
      
      DepositoryAgentController depositoryAgentController0 = new DepositoryAgentController();
      //mock depositoryBaseResponse0
      DepositoryBaseResponse depositoryBaseResponse0 = mock(DepositoryBaseResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock depositoryResponseDTO0
      DepositoryResponseDTO<DepositoryBaseResponse> depositoryResponseDTO0 = (DepositoryResponseDTO<DepositoryBaseResponse>) mock(DepositoryResponseDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryBaseResponse0).when(depositoryResponseDTO0).getRespData();
      //mock depositoryRecordService0
      DepositoryRecordService depositoryRecordService0 = mock(DepositoryRecordService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryResponseDTO0).when(depositoryRecordService0).modifyProjectStatus(any(com.wanxin.api.transaction.model.ModifyProjectStatusDTO.class));
      
      PrivateAccess.setVariable((Class<?>) DepositoryAgentController.class, depositoryAgentController0, "depositoryRecordService", (Object) depositoryRecordService0);
      //mock modifyProjectStatusDTO0
      ModifyProjectStatusDTO modifyProjectStatusDTO0 = mock(ModifyProjectStatusDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: modifyProjectStatus
      RestResponse<String> restResponse0 = depositoryAgentController0.modifyProjectStatus(modifyProjectStatusDTO0);
      
      //Test Result Assert
      assertTrue(restResponse0.isSuccessful());
  }

  @Test(timeout = 9000)
  public void test_userAutoPreTransaction_7()  throws Throwable  {
      //caseID:118cba1afa68461452ec49f0e67ce072
      //CoveredLines: [34, 67, 77, 78, 79, 80]
      //Input_0_UserAutoPreTransactionRequest: {}
      //Assert: assertTrue(method_result.isSuccessful());
      
      DepositoryAgentController depositoryAgentController0 = new DepositoryAgentController();
      //mock depositoryBaseResponse0
      DepositoryBaseResponse depositoryBaseResponse0 = mock(DepositoryBaseResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock depositoryResponseDTO0
      DepositoryResponseDTO<DepositoryBaseResponse> depositoryResponseDTO0 = (DepositoryResponseDTO<DepositoryBaseResponse>) mock(DepositoryResponseDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryBaseResponse0).when(depositoryResponseDTO0).getRespData();
      //mock depositoryRecordService0
      DepositoryRecordService depositoryRecordService0 = mock(DepositoryRecordService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryResponseDTO0).when(depositoryRecordService0).userAutoPreTransaction(any(com.wanxin.api.depository.model.UserAutoPreTransactionRequest.class));
      
      PrivateAccess.setVariable((Class<?>) DepositoryAgentController.class, depositoryAgentController0, "depositoryRecordService", (Object) depositoryRecordService0);
      //mock userAutoPreTransactionRequest0
      UserAutoPreTransactionRequest userAutoPreTransactionRequest0 = mock(UserAutoPreTransactionRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: userAutoPreTransaction
      RestResponse<String> restResponse0 = depositoryAgentController0.userAutoPreTransaction(userAutoPreTransactionRequest0);
      
      //Test Result Assert
      assertTrue(restResponse0.isSuccessful());
  }
}
