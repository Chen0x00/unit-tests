/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.depository.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.alibaba.fastjson.JSONException;
import com.wanxin.api.consumer.model.ConsumerRequest;
import com.wanxin.api.consumer.model.RechargeRequest;
import com.wanxin.api.consumer.model.WithdrawRequest;
import com.wanxin.api.repayment.model.RepaymentRequest;
import com.wanxin.api.transaction.model.ProjectDTO;
import com.wanxin.depository.entity.DepositoryRecord;
import com.wanxin.depository.mapper.DepositoryRecordMapper;
import com.wanxin.depository.service.ConfigService;
import com.wanxin.depository.service.DepositoryRecordServiceImpl;
import com.wanxin.depository.service.OkHttpService;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.smartunit.runtime.mock.java.time.MockLocalDateTime;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.StringRedisTemplate;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class DepositoryRecordServiceImpl_SSTest extends DepositoryRecordServiceImpl_SSTest_scaffolding {
// allCoveredLines:[40, 50, 51, 52, 55, 56, 57, 60, 61, 64, 65, 85, 86, 88, 90, 91, 95, 96, 98, 99, 101, 102, 105, 106, 111, 112, 119, 120, 121, 123, 124, 125, 129, 136, 138, 139, 144, 147, 149, 151, 153, 154, 155, 225, 226, 227, 228, 231, 232, 236, 240, 242, 245, 248, 251, 259, 262, 266, 268, 276, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 318, 320, 322, 324, 326, 328, 330, 333, 334, 339, 344, 349, 350, 351, 352, 358]

  @Test(timeout = 9000)
  public void test_confirmRepayment_0()  throws Throwable  {
      //caseID:3980a46de471641e969e50eb588384d8
      //CoveredLines: [40, 50, 51, 52, 85, 86, 88, 95, 96, 98, 99, 105, 106, 119, 120, 123, 124, 125, 129, 136, 138, 154, 155]
      //Input_0_RepaymentRequest: {getRequestNo=\"\", getId=106L}
      
      DepositoryRecordServiceImpl depositoryRecordServiceImpl0 = new DepositoryRecordServiceImpl();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Long long0 = new Long(106L);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      //mock depositoryRecord0
      DepositoryRecord depositoryRecord0 = mock(DepositoryRecord.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(localDateTime0).when(depositoryRecord0).getConfirmDate();
      doReturn(localDateTime0).when(depositoryRecord0).getCreateDate();
      doReturn(long0).when(depositoryRecord0).getId();
      doReturn(integer0).when(depositoryRecord0).getIsSyn();
      doReturn(long0).when(depositoryRecord0).getObjectId();
      doReturn("").when(depositoryRecord0).getObjectType();
      doReturn("").when(depositoryRecord0).getRequestNo();
      doReturn(integer0).when(depositoryRecord0).getRequestStatus();
      doReturn("").when(depositoryRecord0).getRequestType();
      doReturn("").when(depositoryRecord0).getResponseData();
      doReturn("").when(depositoryRecord0).toString();
      //mock depositoryRecordMapper0
      DepositoryRecordMapper depositoryRecordMapper0 = mock(DepositoryRecordMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryRecord0).when(depositoryRecordMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false, false).when(redisConnection0).isPipelined();
      doReturn(false).when(redisConnection0).isQueueing();
      doReturn(long0).when(redisConnection0).incrBy(any(byte[].class) , anyLong());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "stringRedisTemplate", (Object) stringRedisTemplate0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "depositoryRecordMapper", (Object) depositoryRecordMapper0);
      //mock repaymentRequest0
      RepaymentRequest repaymentRequest0 = mock(RepaymentRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(repaymentRequest0).getId();
      doReturn("").when(repaymentRequest0).getRequestNo();
      
      //Call method: confirmRepayment
      // Undeclared exception!
      try { 
        depositoryRecordServiceImpl0.confirmRepayment(repaymentRequest0);
      } catch(Throwable e) {
         verifyException("com.wanxin.depository.service.DepositoryRecordServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmRepayment_1()  throws Throwable  {
      //caseID:3995eca21102b823e2f01ccd2eefee0c
      //CoveredLines: [40, 50, 51, 52, 85, 86, 88, 95, 96, 98, 99, 105, 111, 112, 119, 120, 123, 124, 125, 129, 136, 138, 154, 155]
      //Input_0_RepaymentRequest: {getRequestNo=\"E_160101\", getId=(-1255L)}
      
      DepositoryRecordServiceImpl depositoryRecordServiceImpl0 = new DepositoryRecordServiceImpl();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Long long0 = new Long((-1255L));
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      //mock depositoryRecord0
      DepositoryRecord depositoryRecord0 = mock(DepositoryRecord.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(localDateTime0).when(depositoryRecord0).getConfirmDate();
      doReturn(localDateTime0).when(depositoryRecord0).getCreateDate();
      doReturn(long0).when(depositoryRecord0).getId();
      doReturn(integer0).when(depositoryRecord0).getIsSyn();
      doReturn(long0).when(depositoryRecord0).getObjectId();
      doReturn("E_160101").when(depositoryRecord0).getObjectType();
      doReturn("E_160101").when(depositoryRecord0).getRequestNo();
      doReturn(integer0).when(depositoryRecord0).getRequestStatus();
      doReturn("E_160101").when(depositoryRecord0).getRequestType();
      doReturn("E_160101").when(depositoryRecord0).getResponseData();
      doReturn("E_160101").when(depositoryRecord0).toString();
      //mock depositoryRecordMapper0
      DepositoryRecordMapper depositoryRecordMapper0 = mock(DepositoryRecordMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryRecord0).when(depositoryRecordMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false, false).when(redisConnection0).isPipelined();
      doReturn(false).when(redisConnection0).isQueueing();
      doReturn(long0).when(redisConnection0).incrBy(any(byte[].class) , anyLong());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "stringRedisTemplate", (Object) stringRedisTemplate0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "depositoryRecordMapper", (Object) depositoryRecordMapper0);
      //mock repaymentRequest0
      RepaymentRequest repaymentRequest0 = mock(RepaymentRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(repaymentRequest0).getId();
      doReturn("E_160101").when(repaymentRequest0).getRequestNo();
      
      //Call method: confirmRepayment
      // Undeclared exception!
      try { 
        depositoryRecordServiceImpl0.confirmRepayment(repaymentRequest0);
      } catch(Throwable e) {
         verifyException("com.wanxin.depository.service.DepositoryRecordServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmRepayment_2()  throws Throwable  {
      //caseID:71031464356e1512f469505f86da9923
      //CoveredLines: [40, 50, 51, 52, 85, 86, 88, 95, 96, 98, 99, 101, 102, 119, 120, 123, 124, 125, 129, 136, 138, 139, 144, 147, 149, 151, 153, 154, 155, 259, 262, 266, 268, 276]
      //Input_0_RepaymentRequest: {getRequestNo=\"com/wanxin/depository/entity/DepositoryRecord\", getId=1L}
      
      DepositoryRecordServiceImpl depositoryRecordServiceImpl0 = new DepositoryRecordServiceImpl();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Long long0 = new Long(1L);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      //mock depositoryRecord0
      DepositoryRecord depositoryRecord0 = mock(DepositoryRecord.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(localDateTime0).when(depositoryRecord0).getConfirmDate();
      doReturn(localDateTime0).when(depositoryRecord0).getCreateDate();
      doReturn(long0).when(depositoryRecord0).getId();
      doReturn(integer0).when(depositoryRecord0).getIsSyn();
      doReturn(long0).when(depositoryRecord0).getObjectId();
      doReturn("com/wanxin/depository/entity/DepositoryRecord").when(depositoryRecord0).getObjectType();
      doReturn("com/wanxin/depository/entity/DepositoryRecord").when(depositoryRecord0).getRequestNo();
      doReturn(integer0).when(depositoryRecord0).getRequestStatus();
      doReturn("com/wanxin/depository/entity/DepositoryRecord").when(depositoryRecord0).getRequestType();
      doReturn("com/wanxin/depository/entity/DepositoryRecord").when(depositoryRecord0).getResponseData();
      doReturn("com/wanxin/depository/entity/DepositoryRecord").when(depositoryRecord0).toString();
      //mock depositoryRecordMapper0
      DepositoryRecordMapper depositoryRecordMapper0 = mock(DepositoryRecordMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryRecord0).when(depositoryRecordMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock okHttpService0
      OkHttpService okHttpService0 = mock(OkHttpService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false, false).when(redisConnection0).isPipelined();
      doReturn(false).when(redisConnection0).isQueueing();
      doReturn(long0).when(redisConnection0).incrBy(any(byte[].class) , anyLong());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "stringRedisTemplate", (Object) stringRedisTemplate0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "okHttpService", (Object) okHttpService0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "configService", (Object) configService0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "depositoryRecordMapper", (Object) depositoryRecordMapper0);
      //mock repaymentRequest0
      RepaymentRequest repaymentRequest0 = mock(RepaymentRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(repaymentRequest0).getId();
      doReturn("com/wanxin/depository/entity/DepositoryRecord").when(repaymentRequest0).getRequestNo();
      
      //Call method: confirmRepayment
      // Undeclared exception!
      try { 
        depositoryRecordServiceImpl0.confirmRepayment(repaymentRequest0);
      } catch(Throwable e) {
         verifyException("com.wanxin.depository.service.DepositoryRecordServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmRepayment_3()  throws Throwable  {
      //caseID:5f81ce1939315c8772c823f8540f92cf
      //CoveredLines: [40, 50, 51, 52, 85, 86, 88, 90, 91, 119, 120, 121, 129, 136, 138, 139, 144, 147, 149, 151, 153, 154, 155, 259, 262, 266, 318, 320, 322, 324, 326, 328, 330, 333, 334]
      //Input_0_RepaymentRequest: {}
      
      DepositoryRecordServiceImpl depositoryRecordServiceImpl0 = new DepositoryRecordServiceImpl();
      //mock depositoryRecordMapper0
      DepositoryRecordMapper depositoryRecordMapper0 = mock(DepositoryRecordMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock okHttpService0
      OkHttpService okHttpService0 = mock(OkHttpService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "okHttpService", (Object) okHttpService0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "configService", (Object) configService0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "depositoryRecordMapper", (Object) depositoryRecordMapper0);
      //mock repaymentRequest0
      RepaymentRequest repaymentRequest0 = mock(RepaymentRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: confirmRepayment
      // Undeclared exception!
      try { 
        depositoryRecordServiceImpl0.confirmRepayment(repaymentRequest0);
      } catch(Throwable e) {
         verifyException("com.wanxin.depository.service.DepositoryRecordServiceImpl", e);
         assertEquals("com.wanxin.common.domain.BusinessException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createConsumer_4()  throws Throwable  {
      //caseID:640f0831b4b29e5c1c30c0cf175d44cb
      //CoveredLines: [40, 50, 51, 52, 55, 56, 57, 60, 61, 64, 65, 358]
      //Input_0_ConsumerRequest: {}
      
      DepositoryRecordServiceImpl depositoryRecordServiceImpl0 = new DepositoryRecordServiceImpl();
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2146555207").when(configService0).getDepositoryUrl();
      doReturn("fx6,Un6>,=").when(configService0).getP2pCode();
      doReturn("g3w$&.N").when(configService0).getP2pPrivateKey();
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "configService", (Object) configService0);
      //mock consumerRequest0
      ConsumerRequest consumerRequest0 = mock(ConsumerRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: createConsumer
      // Undeclared exception!
      try { 
        depositoryRecordServiceImpl0.createConsumer(consumerRequest0);
      } catch(Throwable e) {
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createProject_5()  throws Throwable  {
      //caseID:a17351a66ed97019013cab3f231e8190
      //CoveredLines: [40, 50, 51, 52, 85, 86, 88, 95, 111, 112, 119, 120, 123, 124, 125, 129, 225, 226, 227, 228, 231, 232, 236, 240, 242, 245, 248, 251, 259, 262, 266, 268, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310]
      //Input_0_ProjectDTO: {getAnnualRate=BigDecimal.ZERO, getRequestNo=\"\" \"\\u65B0\\u589E\\u6807\\u7684\" \"com.wanxin.depository.service.DepositoryRecordServiceImpl$2\", getUserNo=\"1GSY1(AaB,i\", getName=\"CONFIRM_LOAN\", getProjectNo=\"CREATE\", getIsAssignment=JLayeredPane.DRAG_LAYER, getType=\"2146720776\", getRepaymentWay=\"CREATE\", getId=528L, getDescription=\"/service\", getPeriod=JLayeredPane.DRAG_LAYER, getAmount=BigDecimal.ZERO}
      
      DepositoryRecordServiceImpl depositoryRecordServiceImpl0 = new DepositoryRecordServiceImpl();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Long long0 = new Long(528L);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      //mock depositoryRecord0
      DepositoryRecord depositoryRecord0 = mock(DepositoryRecord.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock depositoryRecord1
      DepositoryRecord depositoryRecord1 = mock(DepositoryRecord.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(localDateTime0).when(depositoryRecord1).getConfirmDate();
      doReturn(localDateTime0).when(depositoryRecord1).getCreateDate();
      doReturn(long0).when(depositoryRecord1).getId();
      doReturn(integer0).when(depositoryRecord1).getIsSyn();
      doReturn(long0).when(depositoryRecord1).getObjectId();
      doReturn("").when(depositoryRecord1).getObjectType();
      doReturn("").when(depositoryRecord1).getRequestNo();
      doReturn(integer0).when(depositoryRecord1).getRequestStatus();
      doReturn("").when(depositoryRecord1).getRequestType();
      doReturn("").when(depositoryRecord1).getResponseData();
      doReturn("").when(depositoryRecord1).toString();
      //mock depositoryRecord2
      DepositoryRecord depositoryRecord2 = mock(DepositoryRecord.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("USER_AUTO_PRE_TRANSACTION").when(depositoryRecord2).getRequestNo();
      doReturn(depositoryRecord0).when(depositoryRecord2).setResponseData(anyString());
      doReturn("1278").when(depositoryRecord2).toString();
      //mock depositoryRecordMapper0
      DepositoryRecordMapper depositoryRecordMapper0 = mock(DepositoryRecordMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(depositoryRecord1, depositoryRecord2).when(depositoryRecordMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("CREATE").when(configService0).getDepositoryUrl();
      doReturn("_+vG").when(configService0).getP2pCode();
      //mock okHttpService0
      OkHttpService okHttpService0 = mock(OkHttpService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("()Ljava/lang/String;").when(okHttpService0).doSyncGet(anyString());
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "okHttpService", (Object) okHttpService0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "configService", (Object) configService0);
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "depositoryRecordMapper", (Object) depositoryRecordMapper0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock projectDTO0
      ProjectDTO projectDTO0 = mock(ProjectDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(projectDTO0).getAmount();
      doReturn(bigDecimal0).when(projectDTO0).getAnnualRate();
      doReturn("/service").when(projectDTO0).getDescription();
      doReturn(long0).when(projectDTO0).getId();
      doReturn(integer0).when(projectDTO0).getIsAssignment();
      doReturn("CONFIRM_LOAN").when(projectDTO0).getName();
      doReturn(integer0).when(projectDTO0).getPeriod();
      doReturn("CREATE").when(projectDTO0).getProjectNo();
      doReturn("CREATE").when(projectDTO0).getRepaymentWay();
      doReturn("", "\u65B0\u589E\u6807\u7684", "com.wanxin.depository.service.DepositoryRecordServiceImpl$2").when(projectDTO0).getRequestNo();
      doReturn("2146720776").when(projectDTO0).getType();
      doReturn("1GSY1(AaB,i").when(projectDTO0).getUserNo();
      
      //Call method: createProject
      // Undeclared exception!
      try { 
        depositoryRecordServiceImpl0.createProject(projectDTO0);
      } catch(Throwable e) {
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
         assertEquals("com.alibaba.fastjson.JSONException", e.getClass().getName());
         assertEquals("syntax error, expect {, actual (, pos 0, fastjson-version 1.2.47", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_modifyRequestStatus_6()  throws Throwable  {
      //caseID:65f047ca02791560f7249495d47f3bd0
      //CoveredLines: [40, 50, 51, 52, 349, 350, 351, 352]
      //Input_0_String: ZXMU>/EsQIFuS
      //Input_1_Integer: JLayeredPane.MODAL_LAYER
      //Assert: assertFalse(method_result);
      
      DepositoryRecordServiceImpl depositoryRecordServiceImpl0 = new DepositoryRecordServiceImpl();
      //mock depositoryRecordMapper0
      DepositoryRecordMapper depositoryRecordMapper0 = mock(DepositoryRecordMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(depositoryRecordMapper0).update(any(com.wanxin.depository.entity.DepositoryRecord.class) , any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "depositoryRecordMapper", (Object) depositoryRecordMapper0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      
      //Call method: modifyRequestStatus
      Boolean boolean0 = depositoryRecordServiceImpl0.modifyRequestStatus("ZXMU>/EsQIFuS", integer0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_modifyRequestStatus_7()  throws Throwable  {
      //caseID:6180c526ec1b4a43b5ea8eb349383217
      //CoveredLines: [40, 50, 51, 52, 349, 350, 351, 352]
      //Input_0_String: ZXMU>/EsQIFuS
      //Input_1_Integer: JLayeredPane.MODAL_LAYER
      //Assert: assertTrue(method_result);
      
      DepositoryRecordServiceImpl depositoryRecordServiceImpl0 = new DepositoryRecordServiceImpl();
      //mock depositoryRecordMapper0
      DepositoryRecordMapper depositoryRecordMapper0 = mock(DepositoryRecordMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(depositoryRecordMapper0).update(any(com.wanxin.depository.entity.DepositoryRecord.class) , any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "depositoryRecordMapper", (Object) depositoryRecordMapper0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      
      //Call method: modifyRequestStatus
      Boolean boolean0 = depositoryRecordServiceImpl0.modifyRequestStatus("ZXMU>/EsQIFuS", integer0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_rechargeRecords_8()  throws Throwable  {
      //caseID:dbf589aa7fb7f0244f4eb6f08ed8d7b7
      //CoveredLines: [40, 50, 51, 52, 55, 56, 57, 60, 61, 64, 65, 344]
      //Input_0_RechargeRequest: {}
      
      DepositoryRecordServiceImpl depositoryRecordServiceImpl0 = new DepositoryRecordServiceImpl();
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1284").when(configService0).getDepositoryUrl();
      doReturn("(usedHeapMemory: ").when(configService0).getP2pCode();
      doReturn("&platformNo=").when(configService0).getP2pPrivateKey();
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "configService", (Object) configService0);
      //mock rechargeRequest0
      RechargeRequest rechargeRequest0 = mock(RechargeRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: rechargeRecords
      // Undeclared exception!
      try { 
        depositoryRecordServiceImpl0.rechargeRecords(rechargeRequest0);
      } catch(Throwable e) {
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_withdrawRecords_9()  throws Throwable  {
      //caseID:154128f58a2a78f0bfb118c87b8434d2
      //CoveredLines: [40, 50, 51, 52, 55, 56, 57, 60, 61, 64, 65, 339]
      //Input_0_WithdrawRequest: {}
      
      DepositoryRecordServiceImpl depositoryRecordServiceImpl0 = new DepositoryRecordServiceImpl();
      //mock configService0
      ConfigService configService0 = mock(ConfigService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("RECHARGE").when(configService0).getDepositoryUrl();
      doReturn("RECHARGE").when(configService0).getP2pCode();
      doReturn("RECHARGE").when(configService0).getP2pPrivateKey();
      
      PrivateAccess.setVariable((Class<?>) DepositoryRecordServiceImpl.class, depositoryRecordServiceImpl0, "configService", (Object) configService0);
      //mock withdrawRequest0
      WithdrawRequest withdrawRequest0 = mock(WithdrawRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: withdrawRecords
      // Undeclared exception!
      try { 
        depositoryRecordServiceImpl0.withdrawRecords(withdrawRequest0);
      } catch(Throwable e) {
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }
}
