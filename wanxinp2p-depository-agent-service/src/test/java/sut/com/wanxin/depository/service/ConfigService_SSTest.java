/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.depository.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.ctrip.framework.apollo.Config;
import com.wanxin.depository.service.ConfigService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ConfigService_SSTest extends ConfigService_SSTest_scaffolding {
// allCoveredLines:[16, 27, 36, 45, 54, 63]

  @Test(timeout = 9000)
  public void test_getDepositoryPublicKey_0()  throws Throwable  {
      //caseID:73c998aa54bcbe2de0cdd7b251bc359f
      //CoveredLines: [16, 36]
      //Assert: assertNull(method_result);
      
      ConfigService configService0 = new ConfigService();
      //mock config0
      Config config0 = mock(Config.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ConfigService.class, configService0, "config", (Object) config0);
      
      //Call method: getDepositoryPublicKey
      String string0 = configService0.getDepositoryPublicKey();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getDepositoryUrl_1()  throws Throwable  {
      //caseID:56733a8f52193296ec3460d5e27dcc4a
      //CoveredLines: [16, 27]
      //Assert: assertNull(method_result);
      
      ConfigService configService0 = new ConfigService();
      //mock config0
      Config config0 = mock(Config.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ConfigService.class, configService0, "config", (Object) config0);
      
      //Call method: getDepositoryUrl
      String string0 = configService0.getDepositoryUrl();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getP2pCode_2()  throws Throwable  {
      //caseID:24afebcb225df3a4055beb08b8ca84cf
      //CoveredLines: [16, 54]
      //Assert: assertNull(method_result);
      
      ConfigService configService0 = new ConfigService();
      //mock config0
      Config config0 = mock(Config.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ConfigService.class, configService0, "config", (Object) config0);
      
      //Call method: getP2pCode
      String string0 = configService0.getP2pCode();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getP2pPrivateKey_3()  throws Throwable  {
      //caseID:a47eb54276ff7185bac770e56d0748bf
      //CoveredLines: [16, 63]
      //Assert: assertNull(method_result);
      
      ConfigService configService0 = new ConfigService();
      //mock config0
      Config config0 = mock(Config.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ConfigService.class, configService0, "config", (Object) config0);
      
      //Call method: getP2pPrivateKey
      String string0 = configService0.getP2pPrivateKey();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getP2pPublicKey_4()  throws Throwable  {
      //caseID:2d8f39daaca46d702184b463cae36793
      //CoveredLines: [16, 45]
      //Assert: assertNull(method_result);
      
      ConfigService configService0 = new ConfigService();
      //mock config0
      Config config0 = mock(Config.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) ConfigService.class, configService0, "config", (Object) config0);
      
      //Call method: getP2pPublicKey
      String string0 = configService0.getP2pPublicKey();
      
      //Test Result Assert
      assertNull(string0);
  }
}
