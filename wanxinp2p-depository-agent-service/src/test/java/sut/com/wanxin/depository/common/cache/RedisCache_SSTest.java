/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.depository.common.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.depository.common.cache.RedisCache;
import java.util.Set;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.StringRedisTemplate;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class RedisCache_SSTest extends RedisCache_SSTest_scaffolding {
// allCoveredLines:[17, 18, 19, 23, 28, 33, 38, 39, 43, 44, 48, 49, 53, 58, 59, 63, 64, 68, 73, 78]

  @Test(timeout = 9000)
  public void test_append_00()  throws Throwable  {
      //caseID:ba6c86561021464dfe720518a86e2b61
      //CoveredLines: [17, 18, 19, 63, 64]
      //Input_0_String: *
      //Input_1_String: 1.0
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: append
      redisCache0.append("*", "1.0");
  }

  @Test(timeout = 9000)
  public void test_del_01()  throws Throwable  {
      //caseID:c87455e2cbafe595e81f8e23bdd41cb7
      //CoveredLines: [17, 18, 19, 38, 39]
      //Input_0_String: 1
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: del
      redisCache0.del("1");
  }

  @Test(timeout = 9000)
  public void test_exists_02()  throws Throwable  {
      //caseID:d6976e27223507a397b87a8f1a4124d0
      //CoveredLines: [17, 18, 19, 33]
      //Input_0_String: 
      //Assert: assertFalse(method_result);
      
      Boolean boolean0 = Boolean.FALSE;
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false, false).when(redisConnection0).isPipelined();
      doReturn(false).when(redisConnection0).isQueueing();
      doReturn(boolean0).when(redisConnection0).exists(any(byte[].class));
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: exists
      Boolean boolean1 = redisCache0.exists("");
      
      //Test Result Assert
      assertFalse(boolean1);
  }

  @Test(timeout = 9000)
  public void test_expire_03()  throws Throwable  {
      //caseID:4f3dd051440853e6c6e79f7b9b5379a7
      //CoveredLines: [17, 18, 19, 58, 59]
      //Input_0_String: 2
      //Input_1_int: 495
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: expire
      redisCache0.expire("2", 495);
  }

  @Test(timeout = 9000)
  public void test_get_04()  throws Throwable  {
      //caseID:f682eea854a0cfb7efceae66f1c58585
      //CoveredLines: [17, 18, 19, 53]
      //Input_0_String: 
      //Assert: assertNull(method_result);
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: get
      String string0 = redisCache0.get("");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getKeys_05()  throws Throwable  {
      //caseID:69f5170a80ad8998cf873980c96fc432
      //CoveredLines: [17, 18, 19, 23, 28]
      //Assert: assertTrue(method_result.isEmpty());
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: getKeys
      Set<String> set0 = redisCache0.getKeys();
      
      //Test Result Assert
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 9000)
  public void test_getset_06()  throws Throwable  {
      //caseID:7c751056921e0915bc3e4cc7dc9b10ba
      //CoveredLines: [17, 18, 19, 68]
      //Input_0_String: 1.0
      //Input_1_String: 1
      //Assert: assertEquals("\u0000", method_result);
      
      byte[] byteArray0 = new byte[1];
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false, false).when(redisConnection0).isPipelined();
      doReturn(false).when(redisConnection0).isQueueing();
      doReturn(byteArray0).when(redisConnection0).getSet(any(byte[].class) , any(byte[].class));
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: getset
      String string0 = redisCache0.getset("1.0", "1");
      
      //Test Result Assert
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 9000)
  public void test_incrBy_07()  throws Throwable  {
      //caseID:0653c2fa1ab016ead86a8c2406b7755b
      //CoveredLines: [17, 18, 19, 78]
      //Input_0_String: *
      //Input_1_Long: 0L
      //Assert: assertNull(method_result);
      
      Long long0 = new Long(0L);
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false, false).when(redisConnection0).isPipelined();
      doReturn(true, true).when(redisConnection0).isQueueing();
      doReturn(long0).when(redisConnection0).incrBy(any(byte[].class) , anyLong());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: incrBy
      Long long1 = redisCache0.incrBy("*", long0);
      
      //Test Result Assert
      assertNull(long1);
  }

  @Test(timeout = 9000)
  public void test_set_08()  throws Throwable  {
      //caseID:6de24675334039e854ca1ef376c9e780
      //CoveredLines: [17, 18, 19, 48, 49]
      //Input_0_String: *%NKQj
      //Input_1_String: yhSb\"p3Up2/eL
      //Input_2_Integer: JLayeredPane.DRAG_LAYER
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      
      //Call method: set
      redisCache0.set("*%NKQj", "yhSb\"p3Up2/eL", integer0);
  }

  @Test(timeout = 9000)
  public void test_set_09()  throws Throwable  {
      //caseID:6b7b288b052a441b69ac3d80ef08e27d
      //CoveredLines: [17, 18, 19, 43, 44]
      //Input_0_String: com.ctc.wstx.dtd.DTDValidatorBase
      //Input_1_String: t\"4r?l
      
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      RedisCache redisCache0 = new RedisCache(stringRedisTemplate0);
      
      //Call method: set
      redisCache0.set("com.ctc.wstx.dtd.DTDValidatorBase", "t\"4r?l");
  }

  @Test(timeout = 9000)
  public void test_setnx_10()  throws Throwable  {
      //caseID:34a8e2ba55700d90de7b58370691ab52
      //CoveredLines: [17, 18, 19, 73]
      //Input_0_String: 
      //Input_1_String: 1.0
      //Assert: assertFalse(method_result);
      
      RedisCache redisCache0 = new RedisCache((StringRedisTemplate) null);
      Boolean boolean0 = Boolean.FALSE;
      //mock redisConnection0
      RedisConnection redisConnection0 = mock(RedisConnection.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false, false).when(redisConnection0).isPipelined();
      doReturn(false).when(redisConnection0).isQueueing();
      doReturn(boolean0).when(redisConnection0).setNX(any(byte[].class) , any(byte[].class));
      //mock redisConnectionFactory0
      RedisConnectionFactory redisConnectionFactory0 = mock(RedisConnectionFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(redisConnection0).when(redisConnectionFactory0).getConnection();
      StringRedisTemplate stringRedisTemplate0 = new StringRedisTemplate(redisConnectionFactory0);
      
      PrivateAccess.setVariable((Class<?>) RedisCache.class, redisCache0, "redisTemplate", (Object) stringRedisTemplate0);
      
      //Call method: setnx
      boolean boolean1 = redisCache0.setnx("", "1.0");
      
      //Test Result Assert
      assertFalse(boolean1);
  }
}
