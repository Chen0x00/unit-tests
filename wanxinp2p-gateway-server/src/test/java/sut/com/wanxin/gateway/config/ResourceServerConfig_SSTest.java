/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.gateway.config;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.gateway.config.ResourceServerConfig;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ResourceServerConfig_SSTest extends ResourceServerConfig_SSTest_scaffolding {
// allCoveredLines:[19, 23, 25, 32, 41, 42, 43, 64, 73, 74, 76, 77]

  @Test(timeout = 9000)
  public void test_configure_0()  throws Throwable  {
      //caseID:bfb51499358091cabce876eb7eb25715
      //CoveredLines: [19, 23, 25, 32, 41, 42, 43]
      //Input_0_ResourceServerSecurityConfigurer: {tokenStore=resourceServerSecurityConfigurer1}
      
      ResourceServerConfig resourceServerConfig0 = new ResourceServerConfig();
      ResourceServerConfig.UAAServerConfig resourceServerConfig_UAAServerConfig0 = resourceServerConfig0.new UAAServerConfig();
      //mock resourceServerSecurityConfigurer0
      ResourceServerSecurityConfigurer resourceServerSecurityConfigurer0 = mock(ResourceServerSecurityConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock resourceServerSecurityConfigurer1
      ResourceServerSecurityConfigurer resourceServerSecurityConfigurer1 = mock(ResourceServerSecurityConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(resourceServerSecurityConfigurer0).when(resourceServerSecurityConfigurer1).resourceId(anyString());
      //mock resourceServerSecurityConfigurer2
      ResourceServerSecurityConfigurer resourceServerSecurityConfigurer2 = mock(ResourceServerSecurityConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(resourceServerSecurityConfigurer1).when(resourceServerSecurityConfigurer2).tokenStore(nullable(org.springframework.security.oauth2.provider.token.TokenStore.class));
      
      //Call method: configure
      resourceServerConfig_UAAServerConfig0.configure(resourceServerSecurityConfigurer2);
  }

  @Test(timeout = 9000)
  public void test_configure_1()  throws Throwable  {
      //caseID:f516300db6d36873646adf53a40c37ba
      //CoveredLines: [19, 23, 25, 64, 73, 74, 76, 77]
      //Input_0_ResourceServerSecurityConfigurer: {authenticationEntryPoint=resourceServerSecurityConfigurer2, tokenStore=resourceServerSecurityConfigurer2}
      
      ResourceServerConfig resourceServerConfig0 = new ResourceServerConfig();
      ResourceServerConfig.ConsumerServerConfig resourceServerConfig_ConsumerServerConfig0 = resourceServerConfig0.new ConsumerServerConfig();
      //mock resourceServerSecurityConfigurer0
      ResourceServerSecurityConfigurer resourceServerSecurityConfigurer0 = mock(ResourceServerSecurityConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock resourceServerSecurityConfigurer1
      ResourceServerSecurityConfigurer resourceServerSecurityConfigurer1 = mock(ResourceServerSecurityConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(resourceServerSecurityConfigurer0).when(resourceServerSecurityConfigurer1).stateless(anyBoolean());
      //mock resourceServerSecurityConfigurer2
      ResourceServerSecurityConfigurer resourceServerSecurityConfigurer2 = mock(ResourceServerSecurityConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(resourceServerSecurityConfigurer1).when(resourceServerSecurityConfigurer2).resourceId(anyString());
      //mock resourceServerSecurityConfigurer3
      ResourceServerSecurityConfigurer resourceServerSecurityConfigurer3 = mock(ResourceServerSecurityConfigurer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(resourceServerSecurityConfigurer2).when(resourceServerSecurityConfigurer3).authenticationEntryPoint(any(org.springframework.security.web.AuthenticationEntryPoint.class));
      doReturn(resourceServerSecurityConfigurer2).when(resourceServerSecurityConfigurer3).tokenStore(nullable(org.springframework.security.oauth2.provider.token.TokenStore.class));
      
      //Call method: configure
      resourceServerConfig_ConsumerServerConfig0.configure(resourceServerSecurityConfigurer3);
  }
}
