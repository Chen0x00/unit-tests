/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.account.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.account.entity.Account;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class Account_SSTest extends Account_SSTest_scaffolding {
// allCoveredLines:[15, 25, 31, 37, 43, 49, 55, 61]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:4e7ab766f5b6c422f547b8822918fa31
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
      //Input_0_Object: account0
      //Assert: assertTrue(method_result);
      
      Account account0 = new Account();
      
      //Call method: equals
      boolean boolean0 = account0.equals(account0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:5856729f147bbb80a34b4463562afa7d
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
      //Input_0_Object: 2002
      //Assert: assertFalse(method_result);
      
      Account account0 = new Account();
      Long long0 = new Long(2002);
      
      //Call method: equals
      boolean boolean0 = account0.equals(long0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:ade154511b81c7a7a0ce5b0c2c639b70
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 25, 31, 37, 43, 49, 55, 61]
      //Input_0_Object: account0
      //Assert: assertTrue(method_result);
      
      Account account0 = new Account();
      Account account1 = new Account();
      
      //Call method: equals
      boolean boolean0 = account1.equals(account0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:4bd2694f1030f228406c072ffca96ed6
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 25, 31, 37, 43, 49, 55, 61]
      //Input_0_Object: account1
      //Assert: assertTrue(method_result);
      
      Account account0 = new Account();
      Account account1 = new Account();
      
      //Call method: equals
      boolean boolean0 = account0.equals(account1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:8b9e45488b6d005a2e405e09d5897d41
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 25, 31, 37, 43, 49, 55, 61]
      
      Account account0 = new Account();
      
      //Call method: hashCode
      account0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setDomain_05()  throws Throwable  {
      //caseID:1556c64f5e6fd7db78489c9f44dab789
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
      //Input_0_String: 
      
      Account account0 = new Account();
      
      //Call method: setDomain
      account0.setDomain("");
      
      //Test Result Assert
      assertNull(account0.getStatus());
  }

  @Test(timeout = 9000)
  public void test_setId_06()  throws Throwable  {
      //caseID:9104f8e8324c3cd7fd65288f174b9a67
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
      //Input_0_Long: 0L
      
      Account account0 = new Account();
      Long long0 = new Long(0L);
      
      //Call method: setId
      account0.setId(long0);
      
      //Test Result Assert
      assertNull(account0.getStatus());
  }

  @Test(timeout = 9000)
  public void test_setMobile_07()  throws Throwable  {
      //caseID:bb238264eb02d1b09383500d3af2379f
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
      //Input_0_String: 02d0_>v:{-
      
      Account account0 = new Account();
      
      //Call method: setMobile
      account0.setMobile("02d0_>v:{-");
      
      //Test Result Assert
      assertNull(account0.getId());
  }

  @Test(timeout = 9000)
  public void test_setPassword_08()  throws Throwable  {
      //caseID:38d1bf8b8f0df58e5b3d3c7aba7aecf8
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
      //Input_0_String: 
      
      Account account0 = new Account();
      
      //Call method: setPassword
      account0.setPassword("");
      
      //Test Result Assert
      assertNull(account0.getStatus());
  }

  @Test(timeout = 9000)
  public void test_setSalt_09()  throws Throwable  {
      //caseID:0447a00c9eb362ded145d8728762a715
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
      //Input_0_String: )
      
      Account account0 = new Account();
      
      //Call method: setSalt
      account0.setSalt(")");
      
      //Test Result Assert
      assertNull(account0.getPassword());
  }

  @Test(timeout = 9000)
  public void test_setStatus_10()  throws Throwable  {
      //caseID:ae3b004efaf05df0ecec8e659a38384d
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
      //Input_0_Integer: 2422
      
      Account account0 = new Account();
      Integer integer0 = new Integer(2422);
      
      //Call method: setStatus
      account0.setStatus(integer0);
      
      //Test Result Assert
      assertNull(account0.getSalt());
  }

  @Test(timeout = 9000)
  public void test_setUsername_11()  throws Throwable  {
      //caseID:d80345eb4eb31a6476297a0ba483539b
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
      //Input_0_String: Account(id=
      
      Account account0 = new Account();
      
      //Call method: setUsername
      account0.setUsername("Account(id=");
      
      //Test Result Assert
      assertNull(account0.getId());
  }

  @Test(timeout = 9000)
  public void test_toString_12()  throws Throwable  {
      //caseID:719b5e7ad9736b8255aedb76d833eb0a
      //CoveredLines: [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 25, 31, 37, 43, 49, 55, 61]
      //Assert: assertEquals("Account(id=null, username=null, mobile=null, password=null, salt=null, status=null, domain=null)", method_result);
      
      Account account0 = new Account();
      
      //Call method: toString
      String string0 = account0.toString();
      
      //Test Result Assert
      assertEquals("Account(id=null, username=null, mobile=null, password=null, salt=null, status=null, domain=null)", string0);
  }
}
