/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.account.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.account.controller.AccountController;
import com.wanxin.account.service.AccountService;
import com.wanxin.api.account.model.AccountDTO;
import com.wanxin.api.account.model.AccountLoginDTO;
import com.wanxin.api.account.model.AccountRegisterDTO;
import com.wanxin.common.domain.RestResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class AccountController_SSTest extends AccountController_SSTest_scaffolding {
// allCoveredLines:[23, 34, 44, 59, 67]

  @Test(timeout = 9000)
  public void test_checkMobile_0()  throws Throwable  {
      //caseID:7f4c8467fbd28575d5f3390a0657f188
      //CoveredLines: [23, 59]
      //Input_0_String: 1.0
      //Input_1_String: 1
      //Input_2_String: 1
      //Assert: assertTrue(method_result.isSuccessful());
      
      AccountController accountController0 = new AccountController();
      //mock accountService0
      AccountService accountService0 = mock(AccountService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) AccountController.class, accountController0, "accountService", (Object) accountService0);
      
      //Call method: checkMobile
      RestResponse<Integer> restResponse0 = accountController0.checkMobile("1.0", "1", "1");
      
      //Test Result Assert
      assertTrue(restResponse0.isSuccessful());
  }

  @Test(timeout = 9000)
  public void test_getSMSCode_1()  throws Throwable  {
      //caseID:77727e8080bcdf0c7b58a68df0a538a4
      //CoveredLines: [23, 67]
      //Input_0_String: 
      //Assert: assertNull(method_result);
      
      AccountController accountController0 = new AccountController();
      //mock accountService0
      AccountService accountService0 = mock(AccountService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) AccountController.class, accountController0, "accountService", (Object) accountService0);
      
      //Call method: getSMSCode
      RestResponse restResponse0 = accountController0.getSMSCode("");
      
      //Test Result Assert
      assertNull(restResponse0);
  }

  @Test(timeout = 9000)
  public void test_login_2()  throws Throwable  {
      //caseID:1dfc532ffac9adf4c0e2dff2e8ffd03e
      //CoveredLines: [23, 34]
      //Input_0_AccountLoginDTO: {}
      //Assert: assertEquals("", method_result.getMsg());
      
      AccountController accountController0 = new AccountController();
      //mock accountService0
      AccountService accountService0 = mock(AccountService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) AccountController.class, accountController0, "accountService", (Object) accountService0);
      //mock accountLoginDTO0
      AccountLoginDTO accountLoginDTO0 = mock(AccountLoginDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: login
      RestResponse<AccountDTO> restResponse0 = accountController0.login(accountLoginDTO0);
      
      //Test Result Assert
      assertEquals("", restResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_registry_3()  throws Throwable  {
      //caseID:29bffc31962b2952f806761aae0c13a7
      //CoveredLines: [23, 44]
      //Input_0_AccountRegisterDTO: {}
      //Assert: assertTrue(method_result.isSuccessful());
      
      AccountController accountController0 = new AccountController();
      //mock accountService0
      AccountService accountService0 = mock(AccountService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) AccountController.class, accountController0, "accountService", (Object) accountService0);
      //mock accountRegisterDTO0
      AccountRegisterDTO accountRegisterDTO0 = mock(AccountRegisterDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: registry
      RestResponse<AccountDTO> restResponse0 = accountController0.registry(accountRegisterDTO0);
      
      //Test Result Assert
      assertTrue(restResponse0.isSuccessful());
  }
}
