/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.repayment.message;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.wanxin.repayment.message.ConfirmRepaymentTransactionListener;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.messaging.Message;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ConfirmRepaymentTransactionListener_SSTest extends ConfirmRepaymentTransactionListener_SSTest_scaffolding {
// allCoveredLines:[23, 32, 49]

  @Test(timeout = 9000)
  public void test_checkLocalTransaction_0()  throws Throwable  {
      //caseID:43f69fc4b16d7154614c5e6e24872e43
      //CoveredLines: [23, 49]
      //Input_0_Message: {getPayload=\"1.0\"}
      
      ConfirmRepaymentTransactionListener confirmRepaymentTransactionListener0 = new ConfirmRepaymentTransactionListener();
      //mock message0
      Message<String> message0 = (Message<String>) mock(Message.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(message0).getPayload();
      
      //Call method: checkLocalTransaction
      // Undeclared exception!
      try { 
        confirmRepaymentTransactionListener0.checkLocalTransaction(message0);
      } catch(Throwable e) {
         verifyException("com.wanxin.repayment.message.ConfirmRepaymentTransactionListener", e);
         assertEquals("java.lang.ClassCastException", e.getClass().getName());
         assertEquals("java.lang.String cannot be cast to [B", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_executeLocalTransaction_1()  throws Throwable  {
      //caseID:52a322def1287245af7f794cc3f2fe5b
      //CoveredLines: [23, 32]
      //Input_0_Message: {getPayload=Boolean.FALSE}
      //Input_1_Object: {getPayload=Boolean.FALSE}
      
      ConfirmRepaymentTransactionListener confirmRepaymentTransactionListener0 = new ConfirmRepaymentTransactionListener();
      Boolean boolean0 = Boolean.FALSE;
      //mock message0
      Message<Object> message0 = (Message<Object>) mock(Message.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(message0).getPayload();
      
      //Call method: executeLocalTransaction
      // Undeclared exception!
      try { 
        confirmRepaymentTransactionListener0.executeLocalTransaction(message0, message0);
      } catch(Throwable e) {
         verifyException("com.wanxin.repayment.message.ConfirmRepaymentTransactionListener", e);
         assertEquals("java.lang.ClassCastException", e.getClass().getName());
         assertEquals("java.lang.Boolean cannot be cast to [B", e.getMessage());
      }
  }
}
