/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.repayment.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.wanxin.api.repayment.model.EqualInterestRepayment;
import com.wanxin.api.repayment.model.RepaymentRequest;
import com.wanxin.api.transaction.model.ProjectDTO;
import com.wanxin.api.transaction.model.ProjectWithTendersDTO;
import com.wanxin.api.transaction.model.TenderDTO;
import com.wanxin.common.domain.RestResponse;
import com.wanxin.repayment.agent.DepositoryAgentApiAgent;
import com.wanxin.repayment.entity.ReceivablePlan;
import com.wanxin.repayment.entity.RepaymentDetail;
import com.wanxin.repayment.entity.RepaymentPlan;
import com.wanxin.repayment.mapper.ReceivablePlanMapper;
import com.wanxin.repayment.mapper.RepaymentDetailMapper;
import com.wanxin.repayment.mapper.RepaymentPlanMapper;
import com.wanxin.repayment.message.RepaymentProducer;
import com.wanxin.repayment.service.RepaymentServiceImpl;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class RepaymentServiceImpl_SSTest extends RepaymentServiceImpl_SSTest_scaffolding {
// allCoveredLines:[44, 60, 62, 63, 65, 70, 71, 72, 74, 76, 77, 78, 80, 82, 84, 85, 96, 97, 99, 101, 103, 105, 107, 109, 111, 113, 114, 115, 117, 119, 122, 124, 126, 127, 129, 130, 134, 138, 139, 140, 147, 148, 179, 181, 183, 195, 197, 199, 201, 203, 205, 207, 209, 214, 216, 232, 237, 241, 245, 246, 247, 248, 249, 250, 252, 259, 261, 263, 264, 266, 268, 287, 301, 303, 305, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 337, 338, 340, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 385]

  @Test(timeout = 9000)
  public void test_confirmRepayment_0()  throws Throwable  {
      //caseID:ffadcb44d81b2096744ae80055854947
      //CoveredLines: [44, 147, 148]
      //Input_0_RepaymentPlan: {}
      //Input_1_RepaymentRequest: {}
      
      RepaymentServiceImpl repaymentServiceImpl0 = new RepaymentServiceImpl();
      //mock repaymentPlan0
      RepaymentPlan repaymentPlan0 = mock(RepaymentPlan.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock repaymentRequest0
      RepaymentRequest repaymentRequest0 = mock(RepaymentRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: confirmRepayment
      // Undeclared exception!
      try { 
        repaymentServiceImpl0.confirmRepayment(repaymentPlan0, repaymentRequest0);
      } catch(Throwable e) {
         verifyException("com.baomidou.mybatisplus.core.toolkit.ExceptionUtils", e);
         assertEquals("com.baomidou.mybatisplus.core.exceptions.MybatisPlusException", e.getClass().getName());
         assertEquals("can not find lambda cache for this property [status] of entity [com.wanxin.repayment.entity.RepaymentDetail]", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_executeRepayment_1()  throws Throwable  {
      //caseID:b85861fa5b4e4692ce13d07e855107fc
      //CoveredLines: [44, 70, 71, 72, 74, 76, 77, 78, 80, 82, 84, 85, 96, 97, 99, 101, 103, 105, 107, 109, 111, 113, 114, 129, 130, 134, 138, 139, 140, 179, 181, 183, 195, 197, 199, 201, 203, 205, 207, 209, 214, 216, 232, 237, 241, 245, 246, 247, 248, 249, 250, 252]
      //Input_0_String: org.springframework.beans.TypeConverterSupport
      
      RepaymentServiceImpl repaymentServiceImpl0 = new RepaymentServiceImpl();
      //mock restResponse0
      RestResponse<String> restResponse0 = (RestResponse<String>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1414471233").when(restResponse0).getResult();
      //mock depositoryAgentApiAgent0
      DepositoryAgentApiAgent depositoryAgentApiAgent0 = mock(DepositoryAgentApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(depositoryAgentApiAgent0).userAutoPreTransaction(any(com.wanxin.api.depository.model.UserAutoPreTransactionRequest.class));
      ArrayList<ReceivablePlan> arrayList0 = new ArrayList<ReceivablePlan>();
      //mock receivablePlanMapper0
      ReceivablePlanMapper receivablePlanMapper0 = mock(ReceivablePlanMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(receivablePlanMapper0).selectList(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      //mock repaymentDetail0
      RepaymentDetail repaymentDetail0 = mock(RepaymentDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("3").when(repaymentDetail0).getRequestNo();
      doReturn("_|+SJ5BoRzf34!k>L").when(repaymentDetail0).toString();
      //mock repaymentDetailMapper0
      RepaymentDetailMapper repaymentDetailMapper0 = mock(RepaymentDetailMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(repaymentDetail0).when(repaymentDetailMapper0).selectOne(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      ArrayList<RepaymentPlan> arrayList1 = new ArrayList<RepaymentPlan>();
      //mock repaymentPlan0
      RepaymentPlan repaymentPlan0 = mock(RepaymentPlan.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      arrayList1.add(repaymentPlan0);
      //mock repaymentPlanMapper0
      RepaymentPlanMapper repaymentPlanMapper0 = mock(RepaymentPlanMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(repaymentPlanMapper0).selectDueRepayment(anyString());
      //mock repaymentProducer0
      RepaymentProducer repaymentProducer0 = mock(RepaymentProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) RepaymentServiceImpl.class, repaymentServiceImpl0, "repaymentProducer", (Object) repaymentProducer0);
      
      PrivateAccess.setVariable((Class<?>) RepaymentServiceImpl.class, repaymentServiceImpl0, "planMapper", (Object) repaymentPlanMapper0);
      
      PrivateAccess.setVariable((Class<?>) RepaymentServiceImpl.class, repaymentServiceImpl0, "repaymentDetailMapper", (Object) repaymentDetailMapper0);
      
      PrivateAccess.setVariable((Class<?>) RepaymentServiceImpl.class, repaymentServiceImpl0, "receivablePlanMapper", (Object) receivablePlanMapper0);
      
      PrivateAccess.setVariable((Class<?>) RepaymentServiceImpl.class, repaymentServiceImpl0, "depositoryAgentApiAgent", (Object) depositoryAgentApiAgent0);
      
      //Call method: executeRepayment
      repaymentServiceImpl0.executeRepayment("org.springframework.beans.TypeConverterSupport");
  }

  @Test(timeout = 9000)
  public void test_generateRepaymentRequest_2()  throws Throwable  {
      //caseID:6874aeaa7ca7717418a0accd1b04cacb
      //CoveredLines: [44, 96, 97, 99, 101, 103, 105, 107, 109, 111, 113, 114, 115, 117, 119, 122, 124, 126, 127, 129, 130]
      //Input_0_com.wanxin.repayment.entity.RepaymentPlan: {getCommission=BigDecimal.TEN, getProjectNo=\"Path must not be null\", getId=(-1L) (-1L), getAmount=BigDecimal.TEN}
      //Input_1_String: com/baomidou/mybatisplus/core/toolkit/support/SFunction
      //Assert: assertEquals("com/baomidou/mybatisplus/core/toolkit/support/SFunction", method_result.getPreRequestNo());
      
      RepaymentServiceImpl repaymentServiceImpl0 = new RepaymentServiceImpl();
      Vector<ReceivablePlan> vector0 = new Vector<ReceivablePlan>();
      //mock receivablePlanMapper0
      ReceivablePlanMapper receivablePlanMapper0 = mock(ReceivablePlanMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(receivablePlanMapper0).selectList(any(com.baomidou.mybatisplus.core.conditions.Wrapper.class));
      //mock receivablePlan0
      ReceivablePlan receivablePlan0 = mock(ReceivablePlan.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      vector0.add(receivablePlan0);
      
      PrivateAccess.setVariable((Class<?>) RepaymentServiceImpl.class, repaymentServiceImpl0, "receivablePlanMapper", (Object) receivablePlanMapper0);
      Long long0 = new Long((-1L));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock repaymentPlan0
      RepaymentPlan repaymentPlan0 = mock(RepaymentPlan.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(repaymentPlan0).getAmount();
      doReturn(bigDecimal0).when(repaymentPlan0).getCommission();
      doReturn(long0, long0).when(repaymentPlan0).getId();
      doReturn("Path must not be null").when(repaymentPlan0).getProjectNo();
      
      //Call method: generateRepaymentRequest
      RepaymentRequest repaymentRequest0 = (RepaymentRequest)PrivateAccess.callMethod((Class<RepaymentServiceImpl>) RepaymentServiceImpl.class, repaymentServiceImpl0, "generateRepaymentRequest", (Object) repaymentPlan0, (Class<?>) RepaymentPlan.class, (Object) "com/baomidou/mybatisplus/core/toolkit/support/SFunction", (Class<?>) String.class);
      
      //Test Result Assert
      assertEquals("com/baomidou/mybatisplus/core/toolkit/support/SFunction", repaymentRequest0.getPreRequestNo());
  }

  @Test(timeout = 9000)
  public void test_invokeConfirmRepayment_3()  throws Throwable  {
      //caseID:a41ae764b098dcd526a07ad6844ea5f0
      //CoveredLines: [44, 60, 62, 63]
      //Input_0_RepaymentPlan: {}
      //Input_1_RepaymentRequest: {}
      
      RepaymentServiceImpl repaymentServiceImpl0 = new RepaymentServiceImpl();
      //mock restResponse0
      RestResponse<String> restResponse0 = (RestResponse<String>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock depositoryAgentApiAgent0
      DepositoryAgentApiAgent depositoryAgentApiAgent0 = mock(DepositoryAgentApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(depositoryAgentApiAgent0).confirmRepayment(any(com.wanxin.api.repayment.model.RepaymentRequest.class));
      
      PrivateAccess.setVariable((Class<?>) RepaymentServiceImpl.class, repaymentServiceImpl0, "depositoryAgentApiAgent", (Object) depositoryAgentApiAgent0);
      //mock repaymentPlan0
      RepaymentPlan repaymentPlan0 = mock(RepaymentPlan.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock repaymentRequest0
      RepaymentRequest repaymentRequest0 = mock(RepaymentRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: invokeConfirmRepayment
      // Undeclared exception!
      try { 
        repaymentServiceImpl0.invokeConfirmRepayment(repaymentPlan0, repaymentRequest0);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_invokeConfirmRepayment_4()  throws Throwable  {
      //caseID:d977dd827af69c739b0f1c62d7f4e374
      //CoveredLines: [44, 60, 62, 65]
      //Input_0_RepaymentPlan: {}
      //Input_1_RepaymentRequest: {}
      
      RepaymentServiceImpl repaymentServiceImpl0 = new RepaymentServiceImpl();
      //mock restResponse0
      RestResponse<String> restResponse0 = (RestResponse<String>) mock(RestResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("00000").when(restResponse0).getResult();
      //mock depositoryAgentApiAgent0
      DepositoryAgentApiAgent depositoryAgentApiAgent0 = mock(DepositoryAgentApiAgent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(restResponse0).when(depositoryAgentApiAgent0).confirmRepayment(any(com.wanxin.api.repayment.model.RepaymentRequest.class));
      
      PrivateAccess.setVariable((Class<?>) RepaymentServiceImpl.class, repaymentServiceImpl0, "depositoryAgentApiAgent", (Object) depositoryAgentApiAgent0);
      //mock repaymentPlan0
      RepaymentPlan repaymentPlan0 = mock(RepaymentPlan.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock repaymentRequest0
      RepaymentRequest repaymentRequest0 = mock(RepaymentRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: invokeConfirmRepayment
      repaymentServiceImpl0.invokeConfirmRepayment(repaymentPlan0, repaymentRequest0);
  }

  @Test(timeout = 9000)
  public void test_saveReceivablePlan_5()  throws Throwable  {
      //caseID:623821d787aced9e95e88b5401c8667f
      //CoveredLines: [44, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 385]
      //Input_0_com.wanxin.repayment.entity.RepaymentPlan: {getNumberOfPeriods=JLayeredPane.PALETTE_LAYER JLayeredPane.PALETTE_LAYER JLayeredPane.PALETTE_LAYER, getId=0L}
      //Input_1_com.wanxin.api.transaction.model.TenderDTO: {getUserNo=\"org.apache.catalina.webresources.TomcatURLStreamHandlerFactory\", getId=0L, getConsumerId=0L}
      //Input_2_com.wanxin.api.repayment.model.EqualInterestRepayment: {getPrincipalMap=map0, getCommissionMap=map2, getInterestMap=map1}
      
      RepaymentServiceImpl repaymentServiceImpl0 = new RepaymentServiceImpl();
      //mock receivablePlanMapper0
      ReceivablePlanMapper receivablePlanMapper0 = mock(ReceivablePlanMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) RepaymentServiceImpl.class, repaymentServiceImpl0, "receivablePlanMapper", (Object) receivablePlanMapper0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Long long0 = new Long(0L);
      //mock repaymentPlan0
      RepaymentPlan repaymentPlan0 = mock(RepaymentPlan.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(repaymentPlan0).getId();
      doReturn(integer0, integer0, integer0).when(repaymentPlan0).getNumberOfPeriods();
      //mock tenderDTO0
      TenderDTO tenderDTO0 = mock(TenderDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(tenderDTO0).getConsumerId();
      doReturn(long0).when(tenderDTO0).getId();
      doReturn("org.apache.catalina.webresources.TomcatURLStreamHandlerFactory").when(tenderDTO0).getUserNo();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      //mock map0
      Map<Integer, BigDecimal> map0 = (Map<Integer, BigDecimal>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(map0).get(any());
      //mock map1
      Map<Integer, BigDecimal> map1 = (Map<Integer, BigDecimal>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(map1).get(any());
      //mock map2
      Map<Integer, BigDecimal> map2 = (Map<Integer, BigDecimal>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock equalInterestRepayment0
      EqualInterestRepayment equalInterestRepayment0 = mock(EqualInterestRepayment.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(map2).when(equalInterestRepayment0).getCommissionMap();
      doReturn(map1).when(equalInterestRepayment0).getInterestMap();
      doReturn(map0).when(equalInterestRepayment0).getPrincipalMap();
      
      //Call method: saveReceivablePlan
      PrivateAccess.callMethod((Class<RepaymentServiceImpl>) RepaymentServiceImpl.class, repaymentServiceImpl0, "saveReceivablePlan", (Object) repaymentPlan0, (Class<?>) RepaymentPlan.class, (Object) tenderDTO0, (Class<?>) TenderDTO.class, (Object) equalInterestRepayment0, (Class<?>) EqualInterestRepayment.class);
  }

  @Test(timeout = 9000)
  public void test_saveRepaymentPlan_6()  throws Throwable  {
      //caseID:dc93c74fb8cf56d24a2df5f9f3285ad9
      //CoveredLines: [44, 301, 303, 305, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 337, 338, 340]
      //Input_0_com.wanxin.api.transaction.model.ProjectDTO: {}
      //Input_1_com.wanxin.api.repayment.model.EqualInterestRepayment: {getPrincipalMap=hashMap0, getCommissionMap=hashMap0, getInterestMap=hashMap0}
      //Assert: assertFalse(method_result.isEmpty());
      
      RepaymentServiceImpl repaymentServiceImpl0 = new RepaymentServiceImpl();
      //mock repaymentPlanMapper0
      RepaymentPlanMapper repaymentPlanMapper0 = mock(RepaymentPlanMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) RepaymentServiceImpl.class, repaymentServiceImpl0, "planMapper", (Object) repaymentPlanMapper0);
      //mock projectDTO0
      ProjectDTO projectDTO0 = mock(ProjectDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HashMap<Integer, BigDecimal> hashMap0 = new HashMap<Integer, BigDecimal>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      hashMap0.put(integer0, bigDecimal0);
      //mock equalInterestRepayment0
      EqualInterestRepayment equalInterestRepayment0 = mock(EqualInterestRepayment.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(hashMap0).when(equalInterestRepayment0).getCommissionMap();
      doReturn(hashMap0).when(equalInterestRepayment0).getInterestMap();
      doReturn(hashMap0).when(equalInterestRepayment0).getPrincipalMap();
      
      //Call method: saveRepaymentPlan
      List<RepaymentPlan> list0 = (List<RepaymentPlan>)PrivateAccess.callMethod((Class<RepaymentServiceImpl>) RepaymentServiceImpl.class, repaymentServiceImpl0, "saveRepaymentPlan", (Object) projectDTO0, (Class<?>) ProjectDTO.class, (Object) equalInterestRepayment0, (Class<?>) EqualInterestRepayment.class);
      
      //Test Result Assert
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 9000)
  public void test_startRepayment_7()  throws Throwable  {
      //caseID:3d5b5e8780f1ae3cdad48cb203c548d0
      //CoveredLines: [44, 259, 261, 263, 264, 266, 268, 287]
      //Input_0_ProjectWithTendersDTO: {getProject=projectDTO0, getTenders=arrayList0}
      //Assert: assertEquals("-1", method_result);
      
      RepaymentServiceImpl repaymentServiceImpl0 = new RepaymentServiceImpl();
      ArrayList<TenderDTO> arrayList0 = new ArrayList<TenderDTO>();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      //mock projectDTO0
      ProjectDTO projectDTO0 = mock(ProjectDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(projectDTO0).getPeriod();
      doReturn("()Ljava/lang/Long;").when(projectDTO0).getRepaymentWay();
      //mock projectWithTendersDTO0
      ProjectWithTendersDTO projectWithTendersDTO0 = mock(ProjectWithTendersDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(projectDTO0).when(projectWithTendersDTO0).getProject();
      doReturn(arrayList0).when(projectWithTendersDTO0).getTenders();
      
      //Call method: startRepayment
      String string0 = repaymentServiceImpl0.startRepayment(projectWithTendersDTO0);
      
      //Test Result Assert
      assertEquals("-1", string0);
  }
}
