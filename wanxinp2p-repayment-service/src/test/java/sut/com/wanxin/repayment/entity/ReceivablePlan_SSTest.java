/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.repayment.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.repayment.entity.ReceivablePlan;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.smartunit.runtime.mock.java.time.MockInstant;
import org.smartunit.runtime.mock.java.time.MockLocalDateTime;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ReceivablePlan_SSTest extends ReceivablePlan_SSTest_scaffolding {
// allCoveredLines:[20, 29, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:e7acff6a1c67d02591119d4daef3493d
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 83]
      //Input_0_Object: 0
      //Assert: assertFalse(method_result);
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      Integer integer0 = new Integer(0);
      
      receivablePlan0.getShouldReceivableDate();
      
      //Call method: equals
      boolean boolean0 = receivablePlan0.equals(integer0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:f60a0ada32829f91cef267749609403b
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 83]
      //Input_0_Object: receivablePlan0
      //Assert: assertTrue(method_result);
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      
      receivablePlan0.getShouldReceivableDate();
      
      //Call method: equals
      boolean boolean0 = receivablePlan0.equals(receivablePlan0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:2a54c4fcd6eefcd431ee508ff589cb06
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 29, 83]
      //Input_0_Object: receivablePlan0
      //Assert: assertFalse(method_result);
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      Long long0 = new Long(43);
      
      receivablePlan0.getShouldReceivableDate();
      
      PrivateAccess.setVariable((Class<?>) ReceivablePlan.class, receivablePlan0, "id", (Object) long0);
      ReceivablePlan receivablePlan1 = new ReceivablePlan();
      
      //Call method: equals
      boolean boolean0 = receivablePlan1.equals(receivablePlan0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:bd3f18724547d7dc8b52217fabfca71d
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 29, 83]
      //Input_0_Object: receivablePlan1
      //Assert: assertFalse(method_result);
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      Long long0 = new Long((-1));
      
      receivablePlan0.getShouldReceivableDate();
      
      PrivateAccess.setVariable((Class<?>) ReceivablePlan.class, receivablePlan0, "id", (Object) long0);
      ReceivablePlan receivablePlan1 = new ReceivablePlan();
      
      //Call method: equals
      boolean boolean0 = receivablePlan0.equals(receivablePlan1);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:2de0dc0dc80e426c05b351c1d8cb44da
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 29, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101]
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      
      //Call method: hashCode
      receivablePlan0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_hashCode_05()  throws Throwable  {
      //caseID:ee4fcc863335c4c680832ba52bf8d232
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 29, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101]
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      
      receivablePlan0.getShouldReceivableDate();
      
      //Call method: hashCode
      receivablePlan0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAmount_06()  throws Throwable  {
      //caseID:2ac2f608d16cdaa4d4c7959a985128be
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 95]
      //Input_0_BigDecimal: BigDecimal.ZERO
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      receivablePlan0.getCreateDate();
      
      //Call method: setAmount
      receivablePlan0.setAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(receivablePlan0.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setCommission_07()  throws Throwable  {
      //caseID:d769944b7a3bdf09cdccc7859c721a6c
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 83]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      receivablePlan0.getShouldReceivableDate();
      
      //Call method: setCommission
      receivablePlan0.setCommission(bigDecimal0);
      
      //Test Result Assert
      assertNull(receivablePlan0.getRepaymentId());
  }

  @Test(timeout = 9000)
  public void test_setConsumerId_08()  throws Throwable  {
      //caseID:954bd2325f9359e70ffe79a3730e5a55
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
      //Input_0_Long: 0L
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      Long long0 = new Long(0L);
      
      //Call method: setConsumerId
      receivablePlan0.setConsumerId(long0);
      
      //Test Result Assert
      assertNull(receivablePlan0.getNumberOfPeriods());
  }

  @Test(timeout = 9000)
  public void test_setCreateDate_09()  throws Throwable  {
      //caseID:fde8cb10b15cdd2f062607e64a90e2b6
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 83]
      //Input_0_LocalDateTime: null
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      
      receivablePlan0.getShouldReceivableDate();
      
      //Call method: setCreateDate
      receivablePlan0.setCreateDate((LocalDateTime) null);
      
      //Test Result Assert
      assertNull(receivablePlan0.getTenderId());
  }

  @Test(timeout = 9000)
  public void test_setId_10()  throws Throwable  {
      //caseID:80c68092285e4bf4690953201d71e85a
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
      //Input_0_Long: 2204L
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      Long long0 = new Long(2204L);
      
      //Call method: setId
      receivablePlan0.setId(long0);
      
      //Test Result Assert
      assertNull(receivablePlan0.getTenderId());
  }

  @Test(timeout = 9000)
  public void test_setInterest_11()  throws Throwable  {
      //caseID:7e40425ea6793796b863ccee5ca4df17
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 83]
      //Input_0_BigDecimal: (-1L)
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      
      receivablePlan0.getShouldReceivableDate();
      
      //Call method: setInterest
      receivablePlan0.setInterest(bigDecimal0);
      
      //Test Result Assert
      assertNull(receivablePlan0.getNumberOfPeriods());
  }

  @Test(timeout = 9000)
  public void test_setNumberOfPeriods_12()  throws Throwable  {
      //caseID:d8864f5643fce1c83aed09f9b0068d37
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 83]
      //Input_0_Integer: 2147483635
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      Integer integer0 = new Integer(2147483635);
      
      receivablePlan0.getShouldReceivableDate();
      
      //Call method: setNumberOfPeriods
      receivablePlan0.setNumberOfPeriods(integer0);
      
      //Test Result Assert
      assertNull(receivablePlan0.getId());
  }

  @Test(timeout = 9000)
  public void test_setPrincipal_13()  throws Throwable  {
      //caseID:98547090c70bb60eadd308a9dee68003
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 83]
      //Input_0_BigDecimal: bigInteger0
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      byte[] byteArray0 = new byte[8];
      //mock bigInteger0
      BigInteger bigInteger0 = mock(BigInteger.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(byteArray0).when(bigInteger0).toByteArray();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      
      receivablePlan0.getShouldReceivableDate();
      
      //Call method: setPrincipal
      receivablePlan0.setPrincipal(bigDecimal0);
      
      //Test Result Assert
      assertNull(receivablePlan0.getRepaymentId());
  }

  @Test(timeout = 9000)
  public void test_setReceivableStatus_14()  throws Throwable  {
      //caseID:6bf887e3bbfe0a95744140e0979bb850
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 95]
      //Input_0_Integer: 1629
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      Integer integer0 = new Integer(1629);
      
      receivablePlan0.getCreateDate();
      
      //Call method: setReceivableStatus
      receivablePlan0.setReceivableStatus(integer0);
      
      //Test Result Assert
      assertNull(receivablePlan0.getRepaymentId());
  }

  @Test(timeout = 9000)
  public void test_setRepaymentId_15()  throws Throwable  {
      //caseID:b801a4d414f2b317020dcfcec0a30ef2
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 83]
      //Input_0_Long: 0L
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      Long long0 = new Long(0L);
      
      receivablePlan0.getShouldReceivableDate();
      
      //Call method: setRepaymentId
      receivablePlan0.setRepaymentId(long0);
      
      //Test Result Assert
      assertNull(receivablePlan0.getUserNo());
  }

  @Test(timeout = 9000)
  public void test_setShouldReceivableDate_16()  throws Throwable  {
      //caseID:56115bd292e9e581b001c56f34ca07a5
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
      //Input_0_LocalDateTime: localDateTime0
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      
      Instant instant0 = MockInstant.now();
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, (-1));
      
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      
      //Call method: setShouldReceivableDate
      receivablePlan0.setShouldReceivableDate(localDateTime0);
      
      //Test Result Assert
      assertNull(receivablePlan0.getNumberOfPeriods());
  }

  @Test(timeout = 9000)
  public void test_setTenderId_17()  throws Throwable  {
      //caseID:ddad089ac99ed794770bf29fd9d043eb
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
      //Input_0_Long: 0L
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      Long long0 = new Long(0L);
      
      //Call method: setTenderId
      receivablePlan0.setTenderId(long0);
      
      //Test Result Assert
      assertNull(receivablePlan0.getNumberOfPeriods());
  }

  @Test(timeout = 9000)
  public void test_setUserNo_18()  throws Throwable  {
      //caseID:39e6d96056fd2a4ef6ac247870bc0c75
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 83]
      //Input_0_String: , createDate=
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      
      receivablePlan0.getShouldReceivableDate();
      
      //Call method: setUserNo
      receivablePlan0.setUserNo(", createDate=");
      
      //Test Result Assert
      assertNull(receivablePlan0.getNumberOfPeriods());
  }

  @Test(timeout = 9000)
  public void test_toString_19()  throws Throwable  {
      //caseID:6372cb7c34f68723e8c1280cf23de0c3
      //CoveredLines: [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 29, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101]
      //Assert: assertEquals("ReceivablePlan(id=null, consumerId=null, userNo=null, tenderId=null, repaymentId=null, numberOfPeriods=null, interest=null, principal=null, amount=null, shouldReceivableDate=null, receivableStatus=null, createDate=null, commission=null)", method_result);
      
      ReceivablePlan receivablePlan0 = new ReceivablePlan();
      
      //Call method: toString
      String string0 = receivablePlan0.toString();
      
      //Test Result Assert
      assertEquals("ReceivablePlan(id=null, consumerId=null, userNo=null, tenderId=null, repaymentId=null, numberOfPeriods=null, interest=null, principal=null, amount=null, shouldReceivableDate=null, receivableStatus=null, createDate=null, commission=null)", string0);
  }
}
