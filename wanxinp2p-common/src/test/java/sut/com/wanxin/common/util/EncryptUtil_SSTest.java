/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.common.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.common.util.EncryptUtil;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class EncryptUtil_SSTest extends EncryptUtil_SSTest_scaffolding {
// allCoveredLines:[13, 16, 17, 21, 22, 23, 27, 29, 32, 33, 38, 39, 41, 44, 45, 49, 51, 54, 55, 59, 61, 64, 65]

  @Test(timeout = 9000)
  public void test_decodeBase64_0()  throws Throwable  {
      //caseID:6b80dc1e7b04a740835e729c605564d7
      //CoveredLines: [13, 21, 22, 23]
      //Input_0_String: 
      //Assert: assertArrayEquals(new byte[] {}, method_result);
      
      EncryptUtil encryptUtil0 = new EncryptUtil();
      
      //Call method: decodeBase64
      byte[] byteArray0 = EncryptUtil.decodeBase64("");
      
      //Test Result Assert
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 9000)
  public void test_decodeURL_1()  throws Throwable  {
      //caseID:c76ae4f60fd89f0ad2ac710c95b0f9b4
      //CoveredLines: [59, 61, 64, 65]
      //Input_0_String: 1
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("1", method_result);
      
      
      //Call method: decodeURL
      String string0 = EncryptUtil.decodeURL("1");
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("1", string0);
  }

  @Test(timeout = 9000)
  public void test_decodeUTF8StringBase64_2()  throws Throwable  {
      //caseID:1c0a53cf2e7c7eeeac016023f56fc926
      //CoveredLines: [38, 39, 41, 44, 45]
      //Input_0_String: 
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("", method_result);
      
      
      //Call method: decodeUTF8StringBase64
      String string0 = EncryptUtil.decodeUTF8StringBase64("");
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("", string0);
  }

  @Test(timeout = 9000)
  public void test_encodeBase64_3()  throws Throwable  {
      //caseID:ebf9dff2d0112a889c2b10a418b0e33b
      //CoveredLines: [16, 17]
      //Input_0_byte[]: byteArray0
      //Assert: assertEquals("", method_result);
      
      byte[] byteArray0 = new byte[0];
      
      //Call method: encodeBase64
      String string0 = EncryptUtil.encodeBase64(byteArray0);
      
      //Test Result Assert
      assertEquals("", string0);
  }

  @Test(timeout = 9000)
  public void test_encodeURL_4()  throws Throwable  {
      //caseID:66e9425154a7d774f106a30cc2234bba
      //CoveredLines: [49, 51, 54, 55]
      //Input_0_String: IS&9
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("IS%269", method_result);
      
      
      //Call method: encodeURL
      String string0 = EncryptUtil.encodeURL("IS&9");
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("IS%269", string0);
  }

  @Test(timeout = 9000)
  public void test_encodeUTF8StringBase64_5()  throws Throwable  {
      //caseID:ff92ff2d65990699c3312c52892ec7f6
      //CoveredLines: [27, 29, 32, 33]
      //Input_0_String: 
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("", method_result);
      
      
      //Call method: encodeUTF8StringBase64
      String string0 = EncryptUtil.encodeUTF8StringBase64("");
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("", string0);
  }
}
