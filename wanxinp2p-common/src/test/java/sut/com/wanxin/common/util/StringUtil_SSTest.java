/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.common.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.common.util.StringUtil;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class StringUtil_SSTest extends StringUtil_SSTest_scaffolding {
// allCoveredLines:[15, 54, 67, 79, 91, 103, 114, 125, 137, 149, 150, 152, 153, 154, 156, 157, 169, 170, 172, 173, 174, 175, 177, 186, 195, 204, 205, 206, 208, 219, 220, 222, 223, 225, 235, 236, 246, 247, 248, 250, 260, 261, 262, 264, 275, 277, 288, 290, 301, 312, 313, 314, 315, 316, 317, 321, 332, 333, 334, 335, 337, 347]

  @Test(timeout = 9000)
  public void test_builder_00()  throws Throwable  {
      //caseID:549dd5c732f3e11e76a537de278a9c7f
      //CoveredLines: [195]
      //Input_0_int: 0
      //Assert: assertEquals("", method_result.toString());
      
      
      //Call method: builder
      StringBuilder stringBuilder0 = StringUtil.builder(0);
      
      //Test Result Assert
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 9000)
  public void test_builder_01()  throws Throwable  {
      //caseID:6c2dd105bd570dbdcde8a1f4c2d0fb8a
      //CoveredLines: [15, 186]
      //Assert: assertEquals("", method_result.toString());
      
      StringUtil stringUtil0 = new StringUtil();
      
      //Call method: builder
      StringBuilder stringBuilder0 = StringUtil.builder();
      
      //Test Result Assert
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 9000)
  public void test_builder_02()  throws Throwable  {
      //caseID:7b3dfdb3f5c3fa92bf1ec738026d9bde
      //CoveredLines: [204, 205, 206, 208]
      //Input_0_String[]: stringArray0
      //Assert: assertEquals("nullnullnull", method_result.toString());
      
      String[] stringArray0 = new String[3];
      
      //Call method: builder
      StringBuilder stringBuilder0 = StringUtil.builder(stringArray0);
      
      //Test Result Assert
      assertEquals("nullnullnull", stringBuilder0.toString());
  }

  @Test(timeout = 9000)
  public void test_bytes_03()  throws Throwable  {
      //caseID:ae7ce11c514cfb72f3611a47bb82d631
      //CoveredLines: [219, 220]
      //Input_0_String: null
      //Input_1_String: null
      //Assert: assertNull(method_result);
      
      
      //Call method: bytes
      byte[] byteArray0 = StringUtil.bytes((String) null, (String) null);
      
      //Test Result Assert
      assertNull(byteArray0);
  }

  @Test(timeout = 9000)
  public void test_bytes_04()  throws Throwable  {
      //caseID:74b9dd857e6d83280a6c77adc9c39643
      //CoveredLines: [54, 219, 222, 225]
      //Input_0_String: 1112
      //Input_1_String: 1112
      //Assert: assertNotNull(method_result);
      //Assert: assertArrayEquals(new byte[] {(byte) (-15), (byte) (-15), (byte) (-15), (byte) (-14)}, method_result);
      
      
      //Call method: bytes
      byte[] byteArray0 = StringUtil.bytes("1112", "1112");
      
      //Test Result Assert
      assertNotNull(byteArray0);
      
      //Test Result Assert
      assertArrayEquals(new byte[] {(byte) (-15), (byte) (-15), (byte) (-15), (byte) (-14)}, byteArray0);
  }

  @Test(timeout = 9000)
  public void test_bytes_05()  throws Throwable  {
      //caseID:e562bb20670c6e9c772bf41c37689ef9
      //CoveredLines: [54, 219, 222, 223]
      //Input_0_String: 
      //Input_1_String: 
      //Assert: assertNull(method_result);
      
      
      //Call method: bytes
      byte[] byteArray0 = StringUtil.bytes("", "");
      
      //Test Result Assert
      assertNull(byteArray0);
  }

  @Test(timeout = 9000)
  public void test_checkArrayValue_06()  throws Throwable  {
      //caseID:c24428a8fe004101701ab900aeac4f56
      //CoveredLines: [312, 313, 321]
      //Input_0_String[]: stringArray0
      //Input_1_String: 1.0
      //Assert: assertFalse(method_result);
      
      String[] stringArray0 = new String[0];
      
      //Call method: checkArrayValue
      Boolean boolean0 = StringUtil.checkArrayValue(stringArray0, "1.0");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_checkArrayValue_07()  throws Throwable  {
      //caseID:f9d022cfe1b7ef759291e7d13f335b92
      //CoveredLines: [312, 313, 321]
      //Input_0_String[]: null
      //Input_1_String: 75
      //Assert: assertFalse(method_result);
      
      
      //Call method: checkArrayValue
      Boolean boolean0 = StringUtil.checkArrayValue((String[]) null, "75");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_checkArrayValue_08()  throws Throwable  {
      //caseID:eb44c3caad9c620dd13b3250e47cbd19
      //CoveredLines: [312, 313, 314, 315, 321]
      //Input_0_String[]: stringArray0
      //Input_1_String: f6
      //Assert: assertFalse(method_result);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      
      //Call method: checkArrayValue
      Boolean boolean0 = StringUtil.checkArrayValue(stringArray0, "f6");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_checkArrayValue_09()  throws Throwable  {
      //caseID:870980ba136766611fd00b5e89fba9d2
      //CoveredLines: [312, 313, 314, 315, 316, 317, 321]
      //Input_0_String[]: stringArray0
      //Input_1_String: 
      //Assert: assertTrue(method_result);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0123456789ABCDEF";
      stringArray0[1] = "";
      
      //Call method: checkArrayValue
      Boolean boolean0 = StringUtil.checkArrayValue(stringArray0, "");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_checkArrayValue_10()  throws Throwable  {
      //caseID:05816bedd302bd5df1bc420136cdd145
      //CoveredLines: [312, 313, 314, 315, 316, 317, 321]
      //Input_0_String[]: stringArray0
      //Input_1_String: 1.0
      //Assert: assertTrue(method_result);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1.0";
      
      //Call method: checkArrayValue
      Boolean boolean0 = StringUtil.checkArrayValue(stringArray0, "1.0");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_getFileExt_11()  throws Throwable  {
      //caseID:fe097a835e7819eeb145790ed1388e00
      //CoveredLines: [275, 277]
      //Input_0_String: .
      //Assert: assertEquals("", method_result);
      
      
      //Call method: getFileExt
      String string0 = StringUtil.getFileExt(".");
      
      //Test Result Assert
      assertEquals("", string0);
  }

  @Test(timeout = 9000)
  public void test_getFileName_12()  throws Throwable  {
      //caseID:8edc47a4c6e88742d981010dc21b0d8f
      //CoveredLines: [288, 290]
      //Input_0_String: 1.0
      //Assert: assertEquals("1", method_result);
      
      
      //Call method: getFileName
      String string0 = StringUtil.getFileName("1.0");
      
      //Test Result Assert
      assertEquals("1", string0);
  }

  @Test(timeout = 9000)
  public void test_isInteger_13()  throws Throwable  {
      //caseID:00a9decd5719bd746949fc38cdd8eb60
      //CoveredLines: [235, 236]
      //Input_0_String: 7~o:!>`8KxE,)8 c;
      //Assert: assertFalse(method_result);
      
      
      //Call method: isInteger
      boolean boolean0 = StringUtil.isInteger("7~o:!>`8KxE,)8 c;");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isNotBlank_14()  throws Throwable  {
      //caseID:981d07f452556f88c27c9f8b6b9368b5
      //CoveredLines: [54, 67]
      //Input_0_String: null
      //Assert: assertFalse(method_result);
      
      
      //Call method: isNotBlank
      boolean boolean0 = StringUtil.isNotBlank((String) null);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isNotBlank_15()  throws Throwable  {
      //caseID:cf28b2a5bc2726d515e62f3eff03100b
      //CoveredLines: [54, 67]
      //Input_0_String:  
      //Assert: assertFalse(method_result);
      
      
      //Call method: isNotBlank
      boolean boolean0 = StringUtil.isNotBlank(" ");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isNotBlank_16()  throws Throwable  {
      //caseID:2093b6dbcd6852bbac856506eaa9c384
      //CoveredLines: [54, 67]
      //Input_0_String: 1.0
      //Assert: assertTrue(method_result);
      
      
      //Call method: isNotBlank
      boolean boolean0 = StringUtil.isNotBlank("1.0");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isNotEmpty_17()  throws Throwable  {
      //caseID:164d7cca499d8cb47c5652578bba0552
      //CoveredLines: [79, 91]
      //Input_0_String: null
      //Assert: assertFalse(method_result);
      
      
      //Call method: isNotEmpty
      boolean boolean0 = StringUtil.isNotEmpty((String) null);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isNotEmpty_18()  throws Throwable  {
      //caseID:fefcd3352043c4c62a4bd48d964460db
      //CoveredLines: [79, 91]
      //Input_0_String: 
      //Assert: assertFalse(method_result);
      
      
      //Call method: isNotEmpty
      boolean boolean0 = StringUtil.isNotEmpty("");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isNotEmpty_19()  throws Throwable  {
      //caseID:12d01364ff80780b29f45aabecdce944
      //CoveredLines: [79, 91]
      //Input_0_String: >O
      //Assert: assertTrue(method_result);
      
      
      //Call method: isNotEmpty
      boolean boolean0 = StringUtil.isNotEmpty(">O");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isNull_20()  throws Throwable  {
      //caseID:911eb919568e53c8979b171180cb1368
      //CoveredLines: [301]
      //Input_0_String: null
      //Assert: assertTrue(method_result);
      
      
      //Call method: isNull
      boolean boolean0 = StringUtil.isNull((String) null);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isNull_21()  throws Throwable  {
      //caseID:1f849f75475c5f68a2184164912857fe
      //CoveredLines: [301]
      //Input_0_String: 
      //Assert: assertTrue(method_result);
      
      
      //Call method: isNull
      boolean boolean0 = StringUtil.isNull("");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isNull_22()  throws Throwable  {
      //caseID:275968b49bb7b4a6ad6fbb8eb247c022
      //CoveredLines: [301]
      //Input_0_String: \r\n
      //Assert: assertTrue(method_result);
      
      
      //Call method: isNull
      boolean boolean0 = StringUtil.isNull("\r\n");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isNull_23()  throws Throwable  {
      //caseID:e44b35345f7c41cad2421c52c3109805
      //CoveredLines: [301]
      //Input_0_String: com.google.common.base.Functions$PredicateFunction
      //Assert: assertFalse(method_result);
      
      
      //Call method: isNull
      boolean boolean0 = StringUtil.isNull("com.google.common.base.Functions$PredicateFunction");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isWrap_24()  throws Throwable  {
      //caseID:e50b31e46969d5001e280938ebe8a586
      //CoveredLines: [103, 114]
      //Input_0_String: 175
      //Input_1_String: 1
      //Assert: assertFalse(method_result);
      
      
      //Call method: isWrap
      boolean boolean0 = StringUtil.isWrap("175", "1");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isWrap_25()  throws Throwable  {
      //caseID:60e9678b7d0dc886c7ae432baf6a912e
      //CoveredLines: [125, 137]
      //Input_0_String: _
      //Input_1_char: _
      //Assert: assertTrue(method_result);
      
      
      //Call method: isWrap
      boolean boolean0 = StringUtil.isWrap("_", '_');
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isWrap_26()  throws Throwable  {
      //caseID:17fba331ba1f4d833b50c8cc23125793
      //CoveredLines: [103, 114]
      //Input_0_String: yyyy-MM-dd
      //Input_1_String: &gt;
      //Assert: assertFalse(method_result);
      
      
      //Call method: isWrap
      boolean boolean0 = StringUtil.isWrap("yyyy-MM-dd", "&gt;");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isWrap_27()  throws Throwable  {
      //caseID:408dfd27fdc50c59d548ac363426dee0
      //CoveredLines: [103, 114]
      //Input_0_String: Multiple entries with same 
      //Input_1_String: Multiple entries with same 
      //Assert: assertTrue(method_result);
      
      
      //Call method: isWrap
      boolean boolean0 = StringUtil.isWrap("Multiple entries with same ", "Multiple entries with same ");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isWrap_28()  throws Throwable  {
      //caseID:dcedbe0aa908f270c45d259fd2a2fe11
      //CoveredLines: [125, 137]
      //Input_0_String: com.google.common.base.CharMatcher$JavaDigit
      //Input_1_char: c
      //Assert: assertFalse(method_result);
      
      
      //Call method: isWrap
      boolean boolean0 = StringUtil.isWrap("com.google.common.base.CharMatcher$JavaDigit", 'c');
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_isWrap_29()  throws Throwable  {
      //caseID:c769ed2c377dc4586d1f03085732ec0d
      //CoveredLines: [125, 137]
      //Input_0_String: 1
      //Input_1_char: t
      //Assert: assertFalse(method_result);
      
      
      //Call method: isWrap
      boolean boolean0 = StringUtil.isWrap("1", 't');
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_mapCamelCaseToUnderscore_30()  throws Throwable  {
      //caseID:bcbefc36f08f5a5e5a08264bdc647d50
      //CoveredLines: [347]
      //Input_0_String: \r\n
      //Assert: assertEquals("\r\n", method_result);
      
      
      //Call method: mapCamelCaseToUnderscore
      String string0 = StringUtil.mapCamelCaseToUnderscore("\r\n");
      
      //Test Result Assert
      assertEquals("\r\n", string0);
  }

  @Test(timeout = 9000)
  public void test_mapUnderscoreToCamelCase_31()  throws Throwable  {
      //caseID:0aa5333c679c8a96b33245a834d8f608
      //CoveredLines: [15, 332, 333, 334, 337]
      //Input_0_String: com.wanxin.common.util.StringUtil
      //Assert: assertEquals("com.wanxin.common.util.stringutil", method_result);
      
      StringUtil stringUtil0 = new StringUtil();
      
      //Call method: mapUnderscoreToCamelCase
      String string0 = StringUtil.mapUnderscoreToCamelCase("com.wanxin.common.util.StringUtil");
      
      //Test Result Assert
      assertEquals("com.wanxin.common.util.stringutil", string0);
  }

  @Test(timeout = 9000)
  public void test_mapUnderscoreToCamelCase_32()  throws Throwable  {
      //caseID:efc99aa6b92e4a4b87ddeb7b54ee874d
      //CoveredLines: [332, 333, 334, 335, 337]
      //Input_0_String: IS_NULL
      //Assert: assertEquals("isNull", method_result);
      
      
      //Call method: mapUnderscoreToCamelCase
      String string0 = StringUtil.mapUnderscoreToCamelCase("IS_NULL");
      
      //Test Result Assert
      assertEquals("isNull", string0);
  }

  @Test(timeout = 9000)
  public void test_padEnd_33()  throws Throwable  {
      //caseID:19de37b2673d9920c3451d9aac9cd42a
      //CoveredLines: [15, 169, 170]
      //Input_0_String: 
      //Input_1_int: 0
      //Input_2_char: ]
      //Assert: assertEquals("", method_result);
      
      StringUtil stringUtil0 = new StringUtil();
      
      //Call method: padEnd
      String string0 = StringUtil.padEnd("", 0, ']');
      
      //Test Result Assert
      assertEquals("", string0);
  }

  @Test(timeout = 9000)
  public void test_padEnd_34()  throws Throwable  {
      //caseID:7e7abb900d521589b085226176ca311a
      //CoveredLines: [169, 172, 173, 174, 175, 177]
      //Input_0_String: @s Tbs9%J&Sw
      //Input_1_int: u
      //Input_2_char: u
      //Assert: assertEquals("@s Tbs9%J&Swuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", method_result);
      
      
      //Call method: padEnd
      String string0 = StringUtil.padEnd("@s Tbs9%J&Sw", 'u', 'u');
      
      //Test Result Assert
      assertEquals("@s Tbs9%J&Swuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string0);
  }

  @Test(timeout = 9000)
  public void test_padPre_35()  throws Throwable  {
      //caseID:6c42b50dd59f64d46bc5ac97f922995e
      //CoveredLines: [149, 150]
      //Input_0_String: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray
      //Input_1_int: 4
      //Input_2_char: 4
      //Assert: assertEquals("com.google.common.hash.BloomFilterStrategies$LockFreeBitArray", method_result);
      
      
      //Call method: padPre
      String string0 = StringUtil.padPre("com.google.common.hash.BloomFilterStrategies$LockFreeBitArray", '4', '4');
      
      //Test Result Assert
      assertEquals("com.google.common.hash.BloomFilterStrategies$LockFreeBitArray", string0);
  }

  @Test(timeout = 9000)
  public void test_padPre_36()  throws Throwable  {
      //caseID:e5a88cc5e767d80b9e0dd67c0cf5daf5
      //CoveredLines: [149, 152, 153, 154, 156, 157]
      //Input_0_String: yyyy-MM-dd
      //Input_1_int: ]
      //Input_2_char: ]
      //Assert: assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]yyyy-MM-dd", method_result);
      
      
      //Call method: padPre
      String string0 = StringUtil.padPre("yyyy-MM-dd", ']', ']');
      
      //Test Result Assert
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]yyyy-MM-dd", string0);
  }

  @Test(timeout = 9000)
  public void test_stringTOLongArray_37()  throws Throwable  {
      //caseID:8f214a2b72ec3d48b8d94f72e3ee0104
      //CoveredLines: [260, 261, 262, 264]
      //Input_0_String[]: stringArray0
      //Assert: assertEquals(1, method_result.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "2464";
      
      //Call method: stringTOLongArray
      Long[] longArray0 = StringUtil.stringTOLongArray(stringArray0);
      
      //Test Result Assert
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 9000)
  public void test_stringToIntegerArray_38()  throws Throwable  {
      //caseID:d298402f54bc0e56956baa365d19e0dc
      //CoveredLines: [246, 247, 248, 250]
      //Input_0_String[]: stringArray0
      //Assert: assertEquals(4, method_result.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "62";
      stringArray0[1] = "1";
      stringArray0[2] = "-1431655763";
      stringArray0[3] = "1";
      
      //Call method: stringToIntegerArray
      Integer[] integerArray0 = StringUtil.stringToIntegerArray(stringArray0);
      
      //Test Result Assert
      assertEquals(4, integerArray0.length);
  }
}
