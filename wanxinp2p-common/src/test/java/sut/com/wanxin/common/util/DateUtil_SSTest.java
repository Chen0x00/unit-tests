/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.common.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.wanxin.common.util.DateUtil;
import java.text.DateFormat;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.smartunit.runtime.mock.java.time.MockLocalDate;
import org.smartunit.runtime.mock.java.time.MockLocalDateTime;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class DateUtil_SSTest extends DateUtil_SSTest_scaffolding {
// allCoveredLines:[33, 47, 50, 61, 62, 63, 65, 66, 77, 78, 79, 81, 82, 94, 96, 97, 98, 100, 102, 113, 114, 115, 118, 119, 120, 121, 122, 131, 142, 143, 144, 147, 148, 149, 151, 152, 153, 154, 167, 168, 169, 170, 172, 173, 174, 175, 178, 190, 191, 194, 195, 196, 198, 209, 210, 211, 212, 217, 218, 223, 224, 225, 227, 228, 229, 230, 236, 245, 246, 250, 251, 260, 272, 273, 275, 276, 277, 279, 295, 296, 298, 299, 300, 302, 316, 317, 318, 319, 320, 329, 330, 332, 333, 334, 343, 344, 345, 346, 350, 351, 352, 353, 357, 358, 359, 366, 367, 368, 369, 379, 380, 381, 382, 389, 390, 391, 394, 404, 405, 417, 420, 423, 424, 426, 430, 431, 435, 436, 440, 441, 453]

  @Test(timeout = 9000)
  public void test_addExtraHour_00()  throws Throwable  {
      //caseID:55bbdfec22e2d2a59f19184a616e36e3
      //CoveredLines: [61, 62, 63, 65, 66]
      //Input_0_Date: {}
      //Input_1_int: 1430
      //Assert: assertEquals("Sun Mar 01 14:00:00 GMT 1970", method_result.toString());
      
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: addExtraHour
      Date date1 = DateUtil.addExtraHour(date0, 1430);
      
      //Test Result Assert
      assertEquals("Sun Mar 01 14:00:00 GMT 1970", date1.toString());
  }

  @Test(timeout = 9000)
  public void test_differentDaysByMillisecond_01()  throws Throwable  {
      //caseID:1d7401fceb567178b75f5c1458b3b089
      //CoveredLines: [453]
      //Input_0_LocalDateTime: localDateTime0
      //Input_1_LocalDateTime: localDateTime0
      //Assert: assertEquals(0, method_result);
      
      
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 5, 1, 1, 1, 1);
      
      //Call method: differentDaysByMillisecond
      int int0 = DateUtil.differentDaysByMillisecond(localDateTime0, localDateTime0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 9000)
  public void test_format_02()  throws Throwable  {
      //caseID:72af7b8fface9f8cc0688f4d89032b3f
      //CoveredLines: [113, 114, 115]
      //Input_0_String: null
      //Input_1_String: K
      //Assert: assertNull(method_result);
      
      
      //Call method: format
      Date date0 = DateUtil.format((String) null, "K");
      
      //Test Result Assert
      assertNull(date0);
  }

  @Test(timeout = 9000)
  public void test_format_03()  throws Throwable  {
      //caseID:fdb87ed4f7ce286576cb0cdcdda76fe5
      //CoveredLines: [113, 114, 115]
      //Input_0_String: 
      //Input_1_String: 
      //Assert: assertNull(method_result);
      
      
      //Call method: format
      Date date0 = DateUtil.format("", "");
      
      //Test Result Assert
      assertNull(date0);
  }

  @Test(timeout = 9000)
  public void test_format_04()  throws Throwable  {
      //caseID:cd728579d5f4798bb5f7478ddfcabdac
      //CoveredLines: [113, 114, 118, 121, 122, 131]
      //Input_0_String: 0
      //Input_1_String: 0
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("Fri Feb 14 20:21:21 GMT 2014", method_result.toString());
      
      
      //Call method: format
      Date date0 = DateUtil.format("0", "0");
      
      //Test Result Assert
      //  // Unstable assertion: assertNotNull(date0);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 9000)
  public void test_format_05()  throws Throwable  {
      //caseID:7007d21f4a8451457c454236ee3e87e4
      //CoveredLines: [113, 114, 118, 119, 120, 131]
      //Input_0_String: 0
      //Input_1_String: 17
      //Assert: assertNull(method_result);
      
      
      //Call method: format
      Date date0 = DateUtil.format("0", "17");
      
      //Test Result Assert
      assertNull(date0);
  }

  @Test(timeout = 9000)
  public void test_formatYearMonthDay_06()  throws Throwable  {
      //caseID:9c21f92117b33561d55906c359cddb7a
      //CoveredLines: [389, 394]
      //Input_0_String: 
      //Assert: assertEquals("", method_result);
      
      
      //Call method: formatYearMonthDay
      String string0 = DateUtil.formatYearMonthDay("");
      
      //Test Result Assert
      assertEquals("", string0);
  }

  @Test(timeout = 9000)
  public void test_formatYearMonthDay_07()  throws Throwable  {
      //caseID:30fc7b383e12c83c76f99258f73956d8
      //CoveredLines: [389, 390, 391]
      //Input_0_String: >w%tk(
      
      
      //Call method: formatYearMonthDay
      try { 
        DateUtil.formatYearMonthDay(">w%tk(");
      } catch(Throwable e) {
         verifyException("java.text.DateFormat", e);
         assertEquals("java.text.ParseException", e.getClass().getName());
         assertEquals("Unparseable date: \">w%tk(\"", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_getAllDaysOfMonth_08()  throws Throwable  {
      //caseID:3de38dc0c1629e5fc9e9d98091af51c3
      //CoveredLines: [167, 168, 169, 170, 172, 173, 174, 175, 178]
      //Input_0_Date: {}
      //Assert: assertEquals(31, method_result.size());
      
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getAllDaysOfMonth
      List<Date> list0 = DateUtil.getAllDaysOfMonth(date0);
      
      //Test Result Assert
      assertEquals(31, list0.size());
  }

  @Test(timeout = 9000)
  public void test_getAllDaysOfMonthInString_09()  throws Throwable  {
      //caseID:2cdf15723333cb60be185f5469505eaa
      //CoveredLines: [142, 143, 144, 147, 148, 149, 151, 152, 153, 154]
      //Input_0_Date: {getTime=(-1352L)}
      //Input_1_DateFormat: {}
      
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1352L)).when(date0).getTime();
      //mock dateFormat0
      DateFormat dateFormat0 = mock(DateFormat.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getAllDaysOfMonthInString
      // Undeclared exception!
      try { 
        DateUtil.getAllDaysOfMonthInString(date0, dateFormat0);
      } catch(Throwable e) {
         verifyException("com.wanxin.common.util.DateUtil", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_getCurrDateTimeStr_10()  throws Throwable  {
      //caseID:d4ab6d145d7f9578411227b7a7d1b729
      //CoveredLines: [245, 246, 250, 251, 260]
      //Assert: assertEquals("2014-02-14 20:21:21", method_result);
      
      
      //Call method: getCurrDateTimeStr
      String string0 = DateUtil.getCurrDateTimeStr();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("2014-02-14 20:21:21", string0);
  }

  @Test(timeout = 9000)
  public void test_getCurrDayStart_11()  throws Throwable  {
      //caseID:7c5bb42e0c6bd8828f063e0572cba228
      //CoveredLines: [357, 358, 359]
      //Assert: assertEquals("2014-02-14", method_result);
      
      
      //Call method: getCurrDayStart
      String string0 = DateUtil.getCurrDayStart();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("2014-02-14", string0);
  }

  @Test(timeout = 9000)
  public void test_getCurrentMonthFirstDay_12()  throws Throwable  {
      //caseID:8cfaca43f8746be217cff013588dbab9
      //CoveredLines: [329, 330, 332, 333, 334]
      //Assert: assertEquals("2014-02-14", method_result);
      
      
      //Call method: getCurrentMonthFirstDay
      String string0 = DateUtil.getCurrentMonthFirstDay();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("2014-02-14", string0);
  }

  @Test(timeout = 9000)
  public void test_getDay_13()  throws Throwable  {
      //caseID:3915365a4d47c9d27a3c4b76c2a13b90
      //CoveredLines: [440, 441]
      //Assert: assertEquals(14, method_result);
      
      
      //Call method: getDay
      int int0 = DateUtil.getDay();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals(14, int0);
  }

  @Test(timeout = 9000)
  public void test_getEndDayWithMonth_14()  throws Throwable  {
      //caseID:c8e308606d5bd9bab902428183eb5aff
      //CoveredLines: [379, 380, 381, 382]
      //Input_0_String: yyyy-MM-dd HH:mm:ss
      
      
      //Call method: getEndDayWithMonth
      try { 
        DateUtil.getEndDayWithMonth("yyyy-MM-dd HH:mm:ss");
      } catch(Throwable e) {
         verifyException("java.text.DateFormat", e);
         assertEquals("java.text.ParseException", e.getClass().getName());
         assertEquals("Unparseable date: \"yyyy-MM-dd HH:mm:ss\"", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_getMonth_15()  throws Throwable  {
      //caseID:e812e09370e49a8ccfaba78093489672
      //CoveredLines: [435, 436]
      //Assert: assertEquals(2, method_result);
      
      
      //Call method: getMonth
      int int0 = DateUtil.getMonth();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals(2, int0);
  }

  @Test(timeout = 9000)
  public void test_getSecondToDesignationTime_16()  throws Throwable  {
      //caseID:01ec782be24da866311ed96bf3738a51
      //CoveredLines: [417, 420, 423, 424, 426]
      //Input_0_String: com.wanxin.common.util.DateUtil
      //Assert: assertEquals(0, method_result);
      
      
      //Call method: getSecondToDesignationTime
      int int0 = DateUtil.getSecondToDesignationTime("com.wanxin.common.util.DateUtil");
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 9000)
  public void test_getSpecifiedDayAfter_17()  throws Throwable  {
      //caseID:30ef86af73a164cfe13459367e09ff29
      //CoveredLines: [295, 296, 298, 299, 300, 302]
      //Input_0_String: 0
      //Input_1_String: 
      
      
      //Call method: getSpecifiedDayAfter
      // Undeclared exception!
      try { 
        DateUtil.getSpecifiedDayAfter("0", "");
      } catch(Throwable e) {
         verifyException("java.util.Calendar", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_getSpecifiedDayBefore_18()  throws Throwable  {
      //caseID:03e700be32ebc8e16e4f8f412f6a0226
      //CoveredLines: [272, 273, 275, 276, 277, 279]
      //Input_0_String: occurrences
      //Input_1_String: Y7JLu~1Y?P>|!Y%e~i
      
      
      //Call method: getSpecifiedDayBefore
      // Undeclared exception!
      try { 
        DateUtil.getSpecifiedDayBefore("occurrences", "Y7JLu~1Y?P>|!Y%e~i");
      } catch(Throwable e) {
         verifyException("java.util.Calendar", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_getSpecifyDaysOfMonthInString_19()  throws Throwable  {
      //caseID:70009c72d58a31e4cb02d798779127af
      //CoveredLines: [190, 191, 194, 195, 196, 198, 209, 210, 211, 212, 217, 218, 223, 224, 225, 227, 228, 229, 230, 236]
      //Input_0_Date: {}
      //Input_1_Date: {}
      //Input_2_DateFormat: {}
      //Assert: assertTrue(method_result.isEmpty());
      
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock dateFormat0
      DateFormat dateFormat0 = mock(DateFormat.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getSpecifyDaysOfMonthInString
      List<String> list0 = DateUtil.getSpecifyDaysOfMonthInString(date0, date0, dateFormat0);
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 9000)
  public void test_getStartDayWithMonth_20()  throws Throwable  {
      //caseID:f0ca99b47de09f534ac18fc25db68c24
      //CoveredLines: [366, 367, 368, 369]
      //Input_0_String: !kLCk#2_y]gu1[
      
      
      //Call method: getStartDayWithMonth
      try { 
        DateUtil.getStartDayWithMonth("!kLCk#2_y]gu1[");
      } catch(Throwable e) {
         verifyException("java.text.DateFormat", e);
         assertEquals("java.text.ParseException", e.getClass().getName());
         assertEquals("Unparseable date: \"!kLCk#2_y]gu1[\"", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_getWeekFirstDay_21()  throws Throwable  {
      //caseID:d18f6fc3b9ca9b35076ad84d5d72b43c
      //CoveredLines: [316, 317, 318, 319, 320]
      //Assert: assertEquals("2014-02-10", method_result);
      
      
      //Call method: getWeekFirstDay
      String string0 = DateUtil.getWeekFirstDay();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("2014-02-10", string0);
  }

  @Test(timeout = 9000)
  public void test_getWeekIndexOfMonth_22()  throws Throwable  {
      //caseID:130af574cae396b1b778242b07944460
      //CoveredLines: [404, 405]
      //Input_0_String: 1
      
      
      //Call method: getWeekIndexOfMonth
      try { 
        DateUtil.getWeekIndexOfMonth("1");
      } catch(Throwable e) {
         verifyException("java.text.DateFormat", e);
         assertEquals("java.text.ParseException", e.getClass().getName());
         assertEquals("Unparseable date: \"1\"", e.getMessage());
      }
  }

  @Test(timeout = 9000)
  public void test_getYear_23()  throws Throwable  {
      //caseID:b13c0216b07ed86af6c5615223c637fb
      //CoveredLines: [430, 431]
      //Assert: assertEquals(2014, method_result);
      
      
      //Call method: getYear
      int int0 = DateUtil.getYear();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals(2014, int0);
  }

  @Test(timeout = 9000)
  public void test_getYesterdayEnd_24()  throws Throwable  {
      //caseID:13a89faf2d3addd8e06acfd8dcdda3c5
      //CoveredLines: [350, 351, 352, 353]
      //Assert: assertEquals("2014-02-13 23:59:59", method_result);
      
      
      //Call method: getYesterdayEnd
      String string0 = DateUtil.getYesterdayEnd();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("2014-02-13 23:59:59", string0);
  }

  @Test(timeout = 9000)
  public void test_getYesterdayStart_25()  throws Throwable  {
      //caseID:41104a1eac78bda106ddc2d78447eaae
      //CoveredLines: [343, 344, 345, 346]
      //Assert: assertEquals("2014-02-13", method_result);
      
      
      //Call method: getYesterdayStart
      String string0 = DateUtil.getYesterdayStart();
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("2014-02-13", string0);
  }

  @Test(timeout = 9000)
  public void test_increaseDay2Date_26()  throws Throwable  {
      //caseID:3bc5f48e2c0330799622c4f8850afc79
      //CoveredLines: [77, 78, 81, 82]
      //Input_0_Date: null
      //Input_1_int: 2
      //Assert: assertEquals("Sun Feb 16 20:21:21 GMT 2014", method_result.toString());
      
      
      //Call method: increaseDay2Date
      Date date0 = DateUtil.increaseDay2Date((Date) null, 2);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("Sun Feb 16 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 9000)
  public void test_increaseDay2Date_27()  throws Throwable  {
      //caseID:d393e5c9888f65336dcea3b5e8f9a013
      //CoveredLines: [77, 78, 79, 81, 82]
      //Input_0_Date: {}
      //Input_1_int: -1
      //Assert: assertEquals("Wed Dec 31 00:00:00 GMT 1969", method_result.toString());
      
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: increaseDay2Date
      Date date1 = DateUtil.increaseDay2Date(date0, (-1));
      
      //Test Result Assert
      assertEquals("Wed Dec 31 00:00:00 GMT 1969", date1.toString());
  }

  @Test(timeout = 9000)
  public void test_localDateTimeAddMonth_28()  throws Throwable  {
      //caseID:7945ef8a6b5a092158b147b7e455e8d8
      //CoveredLines: [94, 96, 97, 98, 100, 102]
      //Input_0_LocalDateTime: localDateTime0
      //Input_1_int: 6
      //Assert: assertFalse(method_result.equals((Object)localDateTime0));
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1090L, 2, zoneOffset0);
      
      //Call method: localDateTimeAddMonth
      LocalDateTime localDateTime1 = DateUtil.localDateTimeAddMonth(localDateTime0, 6);
      
      //Test Result Assert
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 9000)
  public void test_now_29()  throws Throwable  {
      //caseID:d6c2b78ae8bfb9d6b90d61a356ce6c4e
      //CoveredLines: [33]
      //Assert: assertNotNull(method_result);
      
      
      //Call method: now
      LocalDateTime localDateTime0 = DateUtil.now();
      
      //Test Result Assert
      assertNotNull(localDateTime0);
  }

  @Test(timeout = 9000)
  public void test_toDateText_30()  throws Throwable  {
      //caseID:8f4dc6bf2ba0b492d8331785f53933d9
      //CoveredLines: [47, 50]
      //Input_0_LocalDate: localDate0
      //Input_1_String: 0
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("0", method_result);
      
      
      LocalDate localDate0 = MockLocalDate.now();
      
      //Call method: toDateText
      String string0 = DateUtil.toDateText(localDate0, "0");
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("0", string0);
  }
}
