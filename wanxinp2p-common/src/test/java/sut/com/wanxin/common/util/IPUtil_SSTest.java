/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.common.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.common.util.IPUtil;
import javax.servlet.http.HttpServletRequest;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class IPUtil_SSTest extends IPUtil_SSTest_scaffolding {
// allCoveredLines:[12, 15, 16, 18, 19, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 39, 41, 43, 46, 47, 50]

  @Test(timeout = 9000)
  public void test_getIpAddr_0()  throws Throwable  {
      //caseID:2ae17a8b3c7715e618155398f99efa5a
      //CoveredLines: [15, 16, 18, 22, 25, 28, 31, 34, 37, 50]
      //Input_0_HttpServletRequest: {getHeader=\"32\"}
      //Assert: assertEquals("32", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("32").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getIpAddr
      String string0 = IPUtil.getIpAddr(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("32", string0);
  }

  @Test(timeout = 9000)
  public void test_getIpAddr_1()  throws Throwable  {
      //caseID:f2c779c1ebf8d7658e6afb09dde46a03
      //CoveredLines: [15, 16, 18, 19, 22, 25, 28, 31, 34, 37, 50]
      //Input_0_HttpServletRequest: {getHeader=\"omf8&kqc,wulqr&\"}
      //Assert: assertEquals("omf8&kqc", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("omf8&kqc,wulqr&").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getIpAddr
      String string0 = IPUtil.getIpAddr(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("omf8&kqc", string0);
  }

  @Test(timeout = 9000)
  public void test_getIpAddr_2()  throws Throwable  {
      //caseID:fd720dd2c60f000218684232e6304299
      //CoveredLines: [15, 16, 18, 19, 22, 23, 25, 28, 31, 34, 37, 50]
      //Input_0_HttpServletRequest: {getHeader=\",Xf<#,0HA\" \",Xf<#,0HA\"}
      //Assert: assertEquals(",Xf<#,0HA", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(",Xf<#,0HA", ",Xf<#,0HA").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getIpAddr
      String string0 = IPUtil.getIpAddr(httpServletRequest0);
      
      //Test Result Assert
      assertEquals(",Xf<#,0HA", string0);
  }

  @Test(timeout = 9000)
  public void test_getIpAddr_3()  throws Throwable  {
      //caseID:c5f72d53582c602f23db3da2e02828cf
      //CoveredLines: [15, 16, 22, 23, 25, 26, 28, 29, 31, 32, 34, 37, 50]
      //Input_0_HttpServletRequest: {getHeader=\"\" \"\" \"\" \"\" \"t]R'H\"}
      //Assert: assertEquals("t]R'H", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("", "", "", "", "t]R'H").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getIpAddr
      String string0 = IPUtil.getIpAddr(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("t]R'H", string0);
  }

  @Test(timeout = 9000)
  public void test_getIpAddr_4()  throws Throwable  {
      //caseID:330304f1654364213f505e593131822a
      //CoveredLines: [15, 16, 22, 23, 25, 26, 28, 29, 31, 32, 34, 37, 50]
      //Input_0_HttpServletRequest: {getHeader=\"unknown\" (String) null (String) null (String) null \"WL-Proxy-Client-IP\"}
      //Assert: assertEquals("WL-Proxy-Client-IP", method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("unknown", (String) null, (String) null, (String) null, "WL-Proxy-Client-IP").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getIpAddr
      String string0 = IPUtil.getIpAddr(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("WL-Proxy-Client-IP", string0);
  }

  @Test(timeout = 9000)
  public void test_getIpAddr_5()  throws Throwable  {
      //caseID:448564d68fa64a314919347f47b9449b
      //CoveredLines: [12, 15, 16, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 50]
      //Input_0_HttpServletRequest: {getHeader=(String) null \"unknown\" (String) null (String) null (String) null \"com.wanxin.common.util.IPUtil\"}
      //Assert: assertEquals("com.wanxin.common.util.IPUtil", method_result);
      
      IPUtil iPUtil0 = new IPUtil();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((String) null, "unknown", (String) null, (String) null, (String) null, "com.wanxin.common.util.IPUtil").when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getIpAddr
      String string0 = IPUtil.getIpAddr(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("com.wanxin.common.util.IPUtil", string0);
  }

  @Test(timeout = 9000)
  public void test_getIpAddr_6()  throws Throwable  {
      //caseID:e90dc88480000d3543eff33195b8a757
      //CoveredLines: [12, 15, 16, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 39, 50]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"com.google.common.cache.CacheStats\", getHeader=(String) null (String) null (String) null (String) null (String) null (String) null}
      //Assert: assertEquals("com.google.common.cache.CacheStats", method_result);
      
      IPUtil iPUtil0 = new IPUtil();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.google.common.cache.CacheStats").when(httpServletRequest0).getRemoteAddr();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getIpAddr
      String string0 = IPUtil.getIpAddr(httpServletRequest0);
      
      //Test Result Assert
      assertEquals("com.google.common.cache.CacheStats", string0);
  }

  @Test(timeout = 9000)
  public void test_getIpAddr_7()  throws Throwable  {
      //caseID:c92365709c0798902ce89c2cf8bf344c
      //CoveredLines: [12, 15, 16, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 39, 41, 43, 46, 47, 50]
      //Input_0_HttpServletRequest: {getRemoteAddr=\",0:0:0:0:0:0:1\", getHeader=(String) null (String) null (String) null (String) null (String) null (String) null}
      //Assert: assertEquals("192.168.1.42", method_result);
      
      IPUtil iPUtil0 = new IPUtil();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(",0:0:0:0:0:0:1").when(httpServletRequest0).getRemoteAddr();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getIpAddr
      String string0 = IPUtil.getIpAddr(httpServletRequest0);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("192.168.1.42", string0);
  }

  @Test(timeout = 9000)
  public void test_getIpAddr_8()  throws Throwable  {
      //caseID:5bdfd70973886e89a1edd0bfe0b378d7
      //CoveredLines: [12, 15, 16, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 39, 41, 43, 46, 47, 50]
      //Input_0_HttpServletRequest: {getRemoteAddr=\"127.0.0.1\", getHeader=(String) null (String) null (String) null (String) null (String) null (String) null}
      //Assert: assertEquals("192.168.1.42", method_result);
      
      IPUtil iPUtil0 = new IPUtil();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("127.0.0.1").when(httpServletRequest0).getRemoteAddr();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      
      //Call method: getIpAddr
      String string0 = IPUtil.getIpAddr(httpServletRequest0);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("192.168.1.42", string0);
  }
}
