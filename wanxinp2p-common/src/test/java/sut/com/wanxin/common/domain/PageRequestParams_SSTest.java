/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.common.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.wanxin.common.domain.PageRequestParams;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class PageRequestParams_SSTest extends PageRequestParams_SSTest_scaffolding {
// allCoveredLines:[14, 15, 16, 17, 20, 21, 22, 26, 30, 31, 34, 38, 39]

  @Test(timeout = 9000)
  public void test_getLimit_0()  throws Throwable  {
      //caseID:d15e1516325e4184c4e3de1362682bd1
      //CoveredLines: [14, 15, 16, 17, 20, 21, 22, 34]
      //Assert: assertEquals(0L, method_result);
      
      Integer integer0 = new Integer(0);
      
      PageRequestParams pageRequestParams0 = PageRequestParams.of(integer0, integer0);
      
      //Call method: getLimit
      long long0 = pageRequestParams0.getLimit();
      
      //Test Result Assert
      assertEquals(0L, long0);
  }

  @Test(timeout = 9000)
  public void test_getStartRow_1()  throws Throwable  {
      //caseID:8ba1fbf5997e6654be87e76991e52575
      //CoveredLines: [14, 15, 16, 17, 20, 21, 22, 26]
      //Assert: assertEquals(2L, method_result);
      
      Integer integer0 = new Integer((-1));
      
      PageRequestParams pageRequestParams0 = PageRequestParams.of(integer0, integer0);
      
      //Call method: getStartRow
      long long0 = pageRequestParams0.getStartRow();
      
      //Test Result Assert
      assertEquals(2L, long0);
  }

  @Test(timeout = 9000)
  public void test_setLimit_2()  throws Throwable  {
      //caseID:50b44a8d6d840a0ddf836b72bc6e128d
      //CoveredLines: [14, 15, 16, 17, 20, 21, 22, 38, 39]
      //Input_0_long: 1
      
      Integer integer0 = new Integer((-48));
      
      PageRequestParams pageRequestParams0 = PageRequestParams.of(integer0, integer0);
      
      //Call method: setLimit
      pageRequestParams0.setLimit(1L);
      
      //Test Result Assert
      assertEquals(2352L, pageRequestParams0.getStartRow());
  }

  @Test(timeout = 9000)
  public void test_setStartRow_3()  throws Throwable  {
      //caseID:3cfec616774f2b4b4109d5d90c94bf77
      //CoveredLines: [14, 15, 16, 17, 20, 21, 22, 30, 31]
      //Input_0_long: 959
      
      Integer integer0 = new Integer(959);
      
      PageRequestParams pageRequestParams0 = PageRequestParams.of(integer0, integer0);
      
      //Test Result Assert
      assertEquals(918722L, pageRequestParams0.getStartRow());
      
      
      //Call method: setStartRow
      pageRequestParams0.setStartRow(959);
      
      //Test Result Assert
      assertEquals(959L, pageRequestParams0.getLimit());
  }
}
