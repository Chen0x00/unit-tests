/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.wanxin.search.common.intercept;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.wanxin.common.domain.BusinessException;
import com.wanxin.common.domain.ErrorCode;
import com.wanxin.common.domain.RestResponse;
import com.wanxin.search.common.intercept.GlobalExceptionHandler;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.lang.Nullable;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class GlobalExceptionHandler_SSTest extends GlobalExceptionHandler_SSTest_scaffolding {
// allCoveredLines:[25, 32, 33, 34, 37, 40, 42, 44, 48, 49]

  @Test(timeout = 9000)
  public void test_exceptionGet_0()  throws Throwable  {
      //caseID:1220ef14cef50ac32ba5fa3e56104003
      //CoveredLines: [25, 32, 33, 34, 37]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_Exception: errorCode0
      //Assert: assertEquals("m0\td", method_result.getMsg());
      
      GlobalExceptionHandler globalExceptionHandler0 = new GlobalExceptionHandler();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock errorCode0
      ErrorCode errorCode0 = mock(ErrorCode.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(errorCode0).getCode();
      doReturn("m0\td").when(errorCode0).getDesc();
      BusinessException businessException0 = new BusinessException(errorCode0);
      
      //Call method: exceptionGet
      RestResponse<Nullable> restResponse0 = globalExceptionHandler0.exceptionGet(httpServletRequest0, httpServletResponse0, businessException0);
      
      //Test Result Assert
      assertEquals("m0\td", restResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_exceptionGet_1()  throws Throwable  {
      //caseID:73ac19f3d04862fa4252aad8d158350e
      //CoveredLines: [25, 32, 40, 42, 44, 48, 49]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_Exception: {}
      //Assert: assertEquals(999999, method_result.getCode());
      
      GlobalExceptionHandler globalExceptionHandler0 = new GlobalExceptionHandler();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock exception0
      Exception exception0 = mock(Exception.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: exceptionGet
      RestResponse<Nullable> restResponse0 = globalExceptionHandler0.exceptionGet(httpServletRequest0, httpServletResponse0, exception0);
      
      //Test Result Assert
      assertEquals(999999, restResponse0.getCode());
  }
}
